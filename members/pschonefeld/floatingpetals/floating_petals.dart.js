// Generated by dart2js, the Dart to JavaScript compiler version: 0.5.20.4_r24275.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
$$._HTMLElement = {"": "Element;"};

$$.AnchorElement = {"": "_HTMLElement;name=,type%",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.AnimationEvent = {"": "Event;"};

$$.AreaElement = {"": "_HTMLElement;shape="};

$$.AudioElement = {"": "MediaElement;"};

$$.AutocompleteErrorEvent = {"": "Event;"};

$$.BRElement = {"": "_HTMLElement;"};

$$.BaseElement = {"": "_HTMLElement;"};

$$.BeforeLoadEvent = {"": "Event;"};

$$.Blob = {"": "Interceptor;type="};

$$.BodyElement = {"": "_HTMLElement;"};

$$.ButtonElement = {"": "_HTMLElement;name=,type%,value="};

$$.CDataSection = {"": "Text;"};

$$.CanvasElement = {"": "_HTMLElement;"};

$$.CharacterData = {"": "Node;length="};

$$.CloseEvent = {"": "Event;"};

$$.Comment = {"": "CharacterData;"};

$$.CompositionEvent = {"": "UIEvent;"};

$$.ContentElement = {"": "_HTMLElement;"};

$$.CssFontFaceLoadEvent = {"": "Event;"};

$$.CustomElementConstructor = {"": "Interceptor;"};

$$.CustomEvent = {"": "Event;"};

$$.DListElement = {"": "_HTMLElement;"};

$$.DataListElement = {"": "_HTMLElement;"};

$$.DetailsElement = {"": "_HTMLElement;"};

$$.DeviceMotionEvent = {"": "Event;"};

$$.DeviceOrientationEvent = {"": "Event;"};

$$.DialogElement = {"": "_HTMLElement;"};

$$.DivElement = {"": "_HTMLElement;"};

$$.Document = {"": "Node;children=",
  register$2: function(receiver, $name, options) {
    return receiver.webkitRegister($name, $.convertDartToNative_Dictionary(options));
    return receiver.webkitRegister($name);
  },
  get$onMouseOver: function(receiver) {
    return new $._EventStream(receiver, $.EventStreamProvider_mouseover._eventType, false);
  }
};

$$.DocumentFragment = {"": "Node;",
  get$children: function(receiver) {
    if (receiver._children == null)
      receiver._children = new $.FilteredElementList(receiver, new $._ChildNodeListLazy(receiver));
    return receiver._children;
  },
  set$innerHtml: function(receiver, value) {
    var e, t1, t2;
    new $._ChildNodeListLazy(receiver)._this.textContent = "";
    e = document.createElement("div");
    t1 = $.getInterceptor$x(e);
    t1.set$innerHtml(e, value);
    t2 = new $._ChildNodeListLazy(receiver);
    t2.addAll$1(t2, $.List_List$from(t1.get$nodes(e), false));
  }
};

$$.DocumentType = {"": "Node;"};

$$.DomError = {"": "Interceptor;"};

$$.DomException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.Element = {"": "Node;id=,innerHtml:innerHTML},$$dom_children:children=",
  get$attributes: function(receiver) {
    return new $._ElementAttributeMap(receiver);
  },
  get$children: function(receiver) {
    return new $._ChildrenElementList(receiver, this.get$$$dom_children(receiver));
  },
  toString$0: function(receiver) {
    return receiver.localName;
  },
  getBoundingClientRect$0: function(receiver) {
    return receiver.getBoundingClientRect();
  },
  get$onMouseOver: function(receiver) {
    return new $._EventStream(receiver, $.EventStreamProvider_mouseover._eventType, false);
  },
  $isElement: true,
  $asElement: null
};

$$.EmbedElement = {"": "_HTMLElement;name=,type%"};

$$.ErrorEvent = {"": "Event;"};

$$.Event = {"": "Interceptor;type=",
  get$currentTarget: function(receiver) {
    return $._convertNativeToDart_EventTarget(receiver.currentTarget);
  }
};

$$.EventException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.EventTarget = {"": "Interceptor;", $isEventTarget: true, $asEventTarget: null};

$$.FieldSetElement = {"": "_HTMLElement;name=,type="};

$$.File = {"": "Blob;"};

$$.FileError = {"": "Interceptor;"};

$$.FileException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.FocusEvent = {"": "UIEvent;"};

$$.FormElement = {"": "_HTMLElement;length=,name="};

$$.HRElement = {"": "_HTMLElement;"};

$$.HashChangeEvent = {"": "Event;"};

$$.HeadElement = {"": "_HTMLElement;"};

$$.HeadingElement = {"": "_HTMLElement;"};

$$.HtmlCollection = {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.HtmlDocument = {"": "Document;body="};

$$.HtmlElement = {"": "_HTMLElement;"};

$$.HtmlFormControlsCollection = {"": "HtmlCollection;"};

$$.HtmlOptionsCollection = {"": "HtmlCollection;"};

$$.HttpRequest = {"": "EventTarget;responseText=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  open$5$async$password$user: function(receiver, method, url, async, password, user) {
    return receiver.open(method, url, async, user, password);
  },
  open$3$async: function($receiver, method, url, async) {
    return $receiver.open(method, url, async);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  }
};

$$.HttpRequestProgressEvent = {"": "ProgressEvent;position="};

$$.IFrameElement = {"": "_HTMLElement;name="};

$$.ImageElement = {"": "_HTMLElement;x=,y="};

$$.InputElement = {"": "_HTMLElement;name=,type%,value=", $isElement: true, $asElement: null, $isEventTarget: true, $asEventTarget: null};

$$.KeyboardEvent = {"": "UIEvent;"};

$$.KeygenElement = {"": "_HTMLElement;name=,type="};

$$.LIElement = {"": "_HTMLElement;type%,value="};

$$.LabelElement = {"": "_HTMLElement;"};

$$.LegendElement = {"": "_HTMLElement;"};

$$.LinkElement = {"": "_HTMLElement;type%"};

$$.MapElement = {"": "_HTMLElement;name="};

$$.MediaElement = {"": "_HTMLElement;"};

$$.MediaError = {"": "Interceptor;"};

$$.MediaKeyError = {"": "Interceptor;"};

$$.MediaKeyEvent = {"": "Event;"};

$$.MediaKeyMessageEvent = {"": "Event;"};

$$.MediaKeyNeededEvent = {"": "Event;"};

$$.MediaStreamEvent = {"": "Event;"};

$$.MediaStreamTrackEvent = {"": "Event;"};

$$.MenuElement = {"": "_HTMLElement;"};

$$.MessageEvent = {"": "Event;"};

$$.MetaElement = {"": "_HTMLElement;name="};

$$.MeterElement = {"": "_HTMLElement;value="};

$$.MidiConnectionEvent = {"": "Event;"};

$$.MidiMessageEvent = {"": "Event;"};

$$.ModElement = {"": "_HTMLElement;"};

$$.MouseEvent = {"": "UIEvent;"};

$$.MutationEvent = {"": "Event;"};

$$.Navigator = {"": "Interceptor;"};

$$.NavigatorUserMediaError = {"": "Interceptor;"};

$$.Node = {"": "EventTarget;parent:parentElement=",
  get$nodes: function(receiver) {
    return new $._ChildNodeListLazy(receiver);
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      $.$$dom_replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return receiver;
  },
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? $.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  }
};

$$.NodeList = {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Notation = {"": "Node;"};

$$.OListElement = {"": "_HTMLElement;type%"};

$$.ObjectElement = {"": "_HTMLElement;name=,type%"};

$$.OptGroupElement = {"": "_HTMLElement;"};

$$.OptionElement = {"": "_HTMLElement;value="};

$$.OutputElement = {"": "_HTMLElement;name=,type=,value="};

$$.OverflowEvent = {"": "Event;"};

$$.PageTransitionEvent = {"": "Event;"};

$$.ParagraphElement = {"": "_HTMLElement;"};

$$.ParamElement = {"": "_HTMLElement;name=,value="};

$$.PopStateEvent = {"": "Event;"};

$$.PositionError = {"": "Interceptor;"};

$$.PreElement = {"": "_HTMLElement;"};

$$.ProcessingInstruction = {"": "Node;"};

$$.ProgressElement = {"": "_HTMLElement;position=,value="};

$$.ProgressEvent = {"": "Event;"};

$$.QuoteElement = {"": "_HTMLElement;"};

$$.ResourceProgressEvent = {"": "ProgressEvent;"};

$$.RtcDataChannelEvent = {"": "Event;"};

$$.RtcDtmfToneChangeEvent = {"": "Event;"};

$$.RtcIceCandidateEvent = {"": "Event;"};

$$.ScriptElement = {"": "_HTMLElement;type%"};

$$.SecurityPolicyViolationEvent = {"": "Event;"};

$$.SelectElement = {"": "_HTMLElement;length=,name=,type=,value="};

$$.ShadowElement = {"": "_HTMLElement;"};

$$.ShadowRoot = {"": "DocumentFragment;innerHtml:innerHTML}"};

$$.SourceElement = {"": "_HTMLElement;type%"};

$$.SpanElement = {"": "_HTMLElement;"};

$$.SpeechInputEvent = {"": "Event;"};

$$.SpeechRecognitionError = {"": "Event;"};

$$.SpeechRecognitionEvent = {"": "Event;"};

$$.SpeechSynthesisEvent = {"": "Event;"};

$$.StorageEvent = {"": "Event;key="};

$$.StyleElement = {"": "_HTMLElement;type%"};

$$.TableCaptionElement = {"": "_HTMLElement;"};

$$.TableCellElement = {"": "_HTMLElement;"};

$$.TableColElement = {"": "_HTMLElement;"};

$$.TableElement = {"": "_HTMLElement;"};

$$.TableRowElement = {"": "_HTMLElement;"};

$$.TableSectionElement = {"": "_HTMLElement;"};

$$.TemplateElement = {"": "_HTMLElement;"};

$$.Text = {"": "CharacterData;"};

$$.TextAreaElement = {"": "_HTMLElement;name=,type=,value="};

$$.TextEvent = {"": "UIEvent;"};

$$.TitleElement = {"": "_HTMLElement;"};

$$.TouchEvent = {"": "UIEvent;"};

$$.TrackElement = {"": "_HTMLElement;"};

$$.TrackEvent = {"": "Event;"};

$$.TransitionEvent = {"": "Event;"};

$$.UIEvent = {"": "Event;"};

$$.UListElement = {"": "_HTMLElement;"};

$$.UnknownElement = {"": "_HTMLElement;"};

$$.VideoElement = {"": "MediaElement;"};

$$.WheelEvent = {"": "MouseEvent;"};

$$.Window = {"": "EventTarget;",
  get$animationFrame: function(receiver) {
    var completer, futureImpl, t1;
    completer = new $._AsyncCompleter(new $._FutureImpl(0, $.get$_Zone__current().fork$0(), null), false);
    futureImpl = completer.future;
    t1 = futureImpl._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    this._ensureRequestAnimationFrame$0(receiver);
    this._requestAnimationFrame$1(receiver, new $.Window_animationFrame_closure(completer));
    return futureImpl;
  },
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  get$parent: function(receiver) {
    return $._convertNativeToDart_Window(receiver.parent);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  get$onMouseOver: function(receiver) {
    return new $._EventStream(receiver, $.EventStreamProvider_mouseover._eventType, false);
  }
};

$$.XPathException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$._Attr = {"": "Node;name=,value="};

$$._ClientRect = {"": "Interceptor;height=,left=,top=,width=",
  toString$0: function(receiver) {
    return "(" + $.S(receiver.left) + ", " + $.S(receiver.top) + ", " + $.S(receiver.width) + ", " + $.S(receiver.height) + ")";
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isRect)
      return false;
    t1 = receiver.left;
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$left(other);
    if (t1 == null ? t3 == null : t1 === t3) {
      t1 = receiver.top;
      t3 = t2.get$top(other);
      if (t1 == null ? t3 == null : t1 === t3) {
        t1 = receiver.width;
        t3 = t2.get$width(other);
        if (t1 == null ? t3 == null : t1 === t3) {
          t1 = receiver.height;
          t2 = t2.get$height(other);
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  $isRect: true,
  $asRect: null
};

$$._Entity = {"": "Node;"};

$$._NamedNodeMap = {"": "Interceptor_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.VersionChangeEvent = {"": "Event;"};

$$.AElement = {"": "StyledElement;"};

$$.AltGlyphElement = {"": "TextPositioningElement;"};

$$.AnimateElement = {"": "AnimationElement;"};

$$.AnimateMotionElement = {"": "AnimationElement;"};

$$.AnimateTransformElement = {"": "AnimationElement;"};

$$.AnimatedEnumeration = {"": "Interceptor;"};

$$.AnimatedLength = {"": "Interceptor;"};

$$.AnimatedLengthList = {"": "Interceptor;"};

$$.AnimatedNumber = {"": "Interceptor;"};

$$.AnimatedNumberList = {"": "Interceptor;"};

$$.AnimationElement = {"": "SvgElement;"};

$$.CircleElement = {"": "StyledElement;"};

$$.ClipPathElement = {"": "StyledElement;"};

$$.DefsElement = {"": "StyledElement;"};

$$.DescElement = {"": "StyledElement;"};

$$.EllipseElement = {"": "StyledElement;"};

$$.FEBlendElement = {"": "StyledElement;x=,y="};

$$.FEColorMatrixElement = {"": "StyledElement;type=,x=,y="};

$$.FEComponentTransferElement = {"": "StyledElement;x=,y="};

$$.FECompositeElement = {"": "StyledElement;x=,y="};

$$.FEConvolveMatrixElement = {"": "StyledElement;x=,y="};

$$.FEDiffuseLightingElement = {"": "StyledElement;x=,y="};

$$.FEDisplacementMapElement = {"": "StyledElement;x=,y="};

$$.FEDistantLightElement = {"": "SvgElement;"};

$$.FEFloodElement = {"": "StyledElement;x=,y="};

$$.FEFuncAElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncBElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncGElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncRElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEGaussianBlurElement = {"": "StyledElement;x=,y="};

$$.FEImageElement = {"": "StyledElement;x=,y="};

$$.FEMergeElement = {"": "StyledElement;x=,y="};

$$.FEMergeNodeElement = {"": "SvgElement;"};

$$.FEMorphologyElement = {"": "StyledElement;x=,y="};

$$.FEOffsetElement = {"": "StyledElement;x=,y="};

$$.FEPointLightElement = {"": "SvgElement;x=,y="};

$$.FESpecularLightingElement = {"": "StyledElement;x=,y="};

$$.FESpotLightElement = {"": "SvgElement;x=,y="};

$$.FETileElement = {"": "StyledElement;x=,y="};

$$.FETurbulenceElement = {"": "StyledElement;type=,x=,y="};

$$.FilterElement = {"": "StyledElement;x=,y="};

$$.ForeignObjectElement = {"": "StyledElement;x=,y="};

$$.GElement = {"": "StyledElement;"};

$$.ImageElement0 = {"": "StyledElement;x=,y="};

$$.LineElement = {"": "StyledElement;"};

$$.LinearGradientElement = {"": "_GradientElement;"};

$$.MarkerElement = {"": "StyledElement;"};

$$.MaskElement = {"": "StyledElement;x=,y="};

$$.MetadataElement = {"": "SvgElement;"};

$$.PathElement = {"": "StyledElement;"};

$$.PatternElement = {"": "StyledElement;x=,y="};

$$.PointList = {"": "Interceptor;"};

$$.PolygonElement = {"": "StyledElement;points="};

$$.PolylineElement = {"": "StyledElement;points="};

$$.RadialGradientElement = {"": "_GradientElement;"};

$$.RectElement = {"": "StyledElement;x=,y="};

$$.ScriptElement0 = {"": "SvgElement;type%"};

$$.SetElement = {"": "AnimationElement;"};

$$.StopElement = {"": "StyledElement;"};

$$.StyleElement0 = {"": "SvgElement;type%"};

$$.StyledElement = {"": "SvgElement;"};

$$.SvgDocument = {"": "Document;"};

$$.SvgElement = {"": "Element;",
  get$children: function(receiver) {
    return new $.FilteredElementList(receiver, new $._ChildNodeListLazy(receiver));
  },
  set$innerHtml: function(receiver, svg) {
    var container, t1, children;
    container = document.createElement("div");
    t1 = $.getInterceptor$x(container);
    t1.set$innerHtml(container, "<svg version=\"1.1\">" + $.S(svg) + "</svg>");
    t1 = $.get$children$x($.$index$asx(t1.get$children(container), 0));
    children = new $.FilteredElementList(receiver, $._ChildNodeListLazy$(receiver));
    children._childNodes._this.textContent = "";
    children.addAll$1(children, t1);
  },
  get$$$dom_children: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot get dom_children on SVG."));
  },
  get$id: function(receiver) {
    return receiver.id;
  }
};

$$.SvgException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.SvgSvgElement = {"": "StyledElement;x=,y="};

$$.SwitchElement = {"": "StyledElement;"};

$$.SymbolElement = {"": "StyledElement;"};

$$.TSpanElement = {"": "TextPositioningElement;"};

$$.TextContentElement = {"": "StyledElement;"};

$$.TextElement = {"": "TextPositioningElement;"};

$$.TextPathElement = {"": "TextContentElement;"};

$$.TextPositioningElement = {"": "TextContentElement;x=,y="};

$$.TitleElement0 = {"": "StyledElement;"};

$$.UseElement = {"": "StyledElement;x=,y="};

$$.ViewElement = {"": "SvgElement;"};

$$.ZoomEvent = {"": "UIEvent;"};

$$._GradientElement = {"": "StyledElement;"};

$$._SVGComponentTransferFunctionElement = {"": "SvgElement;"};

$$.AudioProcessingEvent = {"": "Event;"};

$$.OfflineAudioCompletionEvent = {"": "Event;"};

$$.ContextEvent = {"": "Event;"};

$$.SqlError = {"": "Interceptor;"};

$$.SqlException = {"": "Interceptor;"};

$$.ByteBuffer = {"": "Interceptor;"};

$$.TypedData = {"": "Interceptor;"};

$$.ByteData = {"": "TypedData;"};

$$.Float32List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  skip$1: function(receiver, n) {
    return new $.SubListIterable(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  toString$0: function(receiver) {
    var buffer = new $.StringBuffer("");
    buffer._contents = "[";
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSDouble]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSDouble]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Float64List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  skip$1: function(receiver, n) {
    return new $.SubListIterable(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  toString$0: function(receiver) {
    var buffer = new $.StringBuffer("");
    buffer._contents = "[";
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSDouble]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSDouble]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int16List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  skip$1: function(receiver, n) {
    return new $.SubListIterable(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  toString$0: function(receiver) {
    var buffer = new $.StringBuffer("");
    buffer._contents = "[";
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int32List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  skip$1: function(receiver, n) {
    return new $.SubListIterable(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  toString$0: function(receiver) {
    var buffer = new $.StringBuffer("");
    buffer._contents = "[";
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int8List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  skip$1: function(receiver, n) {
    return new $.SubListIterable(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  toString$0: function(receiver) {
    var buffer = new $.StringBuffer("");
    buffer._contents = "[";
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint16List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  skip$1: function(receiver, n) {
    return new $.SubListIterable(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  toString$0: function(receiver) {
    var buffer = new $.StringBuffer("");
    buffer._contents = "[";
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint32List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  skip$1: function(receiver, n) {
    return new $.SubListIterable(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  toString$0: function(receiver) {
    var buffer = new $.StringBuffer("");
    buffer._contents = "[";
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8ClampedList = {"": "Uint8List;",
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout1(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout1: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout1(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout1: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  skip$1: function(receiver, n) {
    return new $.SubListIterable(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  toString$0: function(receiver) {
    var buffer = new $.StringBuffer("");
    buffer._contents = "[";
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
      else
        $.throwExpression(new $.ArgumentError("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  skip$1: function(receiver, n) {
    return new $.SubListIterable(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  toString$0: function(receiver) {
    var buffer = new $.StringBuffer("");
    buffer._contents = "[";
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

// Bound closures
$$.BoundClosure$3 = {"": "BoundClosure;_self,_target,_receiver",
  call$3: function(p0, p1, p2) {
    return this._self[this._target](p0, p1, p2);
  }
};

$$.BoundClosure$2 = {"": "BoundClosure;_self,_target,_receiver",
  call$2: function(p0, p1) {
    return this._self[this._target](p0, p1);
  }
};

$$.BoundClosure$1 = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  }
};

$$.BoundClosure$0 = {"": "BoundClosure;_self,_target,_receiver",
  call$0: function() {
    return this._self[this._target]();
  }
};

$$.Closure$_processWorkerMessage = {"": "Closure;call$2,$name"};

$$.Closure$_throwFormatException = {"": "Closure;call$1,$name"};

$$.Closure$wrapException = {"": "Closure;call$1,$name"};

$$.Closure$toStringWrapper = {"": "Closure;call$0,$name"};

$$.Closure$invokeClosure = {"": "Closure;call$5,$name"};

$$.Closure$typeNameInChrome = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInSafari = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInOpera = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInFirefox = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInIE = {"": "Closure;call$1,$name"};

$$.Closure$constructorNameFallback = {"": "Closure;call$1,$name"};

$$.Closure$_asyncRunCallback = {"": "Closure;call$0,$name"};

$$.Closure$_nullDataHandler = {"": "Closure;call$1,$name"};

$$.Closure$_nullErrorHandler = {"": "Closure;call$1,$name"};

$$.Closure$_nullDoneHandler = {"": "Closure;call$0,$name"};

$$.Closure$compare = {"": "Closure;call$2,$name"};

$$.Closure$main = {"": "Closure;call$0,$name"};

$$.Closure$update = {"": "Closure;call$1,$name"};

(function (reflectionData) {
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = {};
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var descriptor = data[3];
    var classes = [];
    var functions = [];
    for (var property in descriptor) {
      if (!hasOwnProperty.call(descriptor, property)) continue;
      var element = descriptor[property];
      if (property.substring(0, 1) == "@") {
        property = property.substring(1);
        $[property]["@"] = element;
      } else if (typeof element === "function") {
        $[property] = element;
        functions.push(property);
      } else {
        var newDesc = {};
        var previousProp;
        for (var prop in element) {
          if (!hasOwnProperty.call(element, prop)) continue;
          var firstChar = prop.substring(0, 1);
          if (firstChar == "+") {
            mangledNames[previousProp] = prop.substring(1);
          } else if (firstChar == "@" && prop != "@") {
            newDesc[prop.substring(1)]["@"] =element[prop];
          } else {
            newDesc[previousProp = prop] = element[prop];
          }
        }
        $$[property] = newDesc;
        classes.push(property);
      }
    }
    libraries.push([name, uri, classes, functions, metadata]);
  }
})([
["_interceptors", "dart:_interceptors", , {
Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return "Instance of '" + $.Primitives_objectTypeName(receiver) + "'";
  }
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
},

JSUnknown: {"": "Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return 0;
  }
},

JSArray: {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("add"));
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("removeLast"));
    if (receiver.length === 0)
      throw $.wrapException(new $.RangeError("value -1"));
    return receiver.pop();
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  skip$1: function(receiver, n) {
    return new $.SubListIterable(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    var t1;
    if (start == null)
      $.throwExpression(new $.ArgumentError(null));
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException(new $.ArgumentError(start));
    if (start < 0 || start > receiver.length) {
      t1 = receiver.length;
      throw $.wrapException(new $.RangeError("value " + start + " not in range 0.." + t1));
    }
    if (end < start || end > receiver.length) {
      t1 = receiver.length;
      throw $.wrapException(new $.RangeError("value " + end + " not in range " + start + ".." + t1));
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    if (!!receiver.immutable$list)
      $.throwExpression(new $.UnsupportedError("set range"));
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  toString$0: function(receiver) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitValue(receiver, result, $.List_List($));
    return result._contents;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw $.wrapException(new $.ArgumentError(newLength));
    if (newLength < 0)
      throw $.wrapException(new $.RangeError("value " + newLength));
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      $.throwExpression(new $.UnsupportedError("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    receiver[index] = value;
  },
  $isList: true,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
},

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true, $asJSArray: function() { return [null]; }, $asList: function() { return [null]; }, $asIterable: function() { return [null]; }},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var t1, bIsNegative;
    if (typeof b !== "number")
      throw $.wrapException(new $.ArgumentError(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      t1 = receiver === 0;
      if (t1) {
        bIsNegative = this.get$isNegative(b);
        if ((t1 ? 1 / receiver < 0 : receiver < 0) === bIsNegative)
          return 0;
        if (t1 ? 1 / receiver < 0 : receiver < 0)
          return -1;
        return 1;
      }
      return 0;
    } else if (isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  ceilToDouble$0: function(receiver) {
    return Math.ceil(receiver);
  },
  floorToDouble$0: function(receiver) {
    return Math.floor(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver - other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver * other;
  },
  $tdiv: function(receiver, other) {
    var t1, truncated;
    t1 = receiver / other;
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    return truncated == -0.0 ? 0 : truncated;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.wrapException(new $.ArgumentError(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver >= other;
  },
  $isnum: true
},

JSInt: {"": "int/JSNumber;", $isdouble: true, $isnum: true, $isint: true},

JSDouble: {"": "double/JSNumber;", $isdouble: true, $isnum: true},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    if (index >= receiver.length)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    endIndex = receiver.length;
    if (typeof endIndex !== "number")
      $.throwExpression(new $.ArgumentError(endIndex));
    if (startIndex < 0)
      throw $.wrapException(new $.RangeError("value " + startIndex));
    if (typeof endIndex !== "number")
      throw $.iae(endIndex);
    if (startIndex > endIndex)
      throw $.wrapException(new $.RangeError("value " + startIndex));
    if (endIndex > receiver.length)
      throw $.wrapException(new $.RangeError("value " + $.S(endIndex)));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  trim$0: function(receiver) {
    var endIndex, startIndex, codeUnit, endIndex0, endIndex1;
    for (endIndex = receiver.length, startIndex = 0; startIndex < endIndex;) {
      if (startIndex >= endIndex)
        $.throwExpression(new $.RangeError("value " + startIndex));
      codeUnit = receiver.charCodeAt(startIndex);
      if (codeUnit === 32 || codeUnit === 13 || $.JSString__isWhitespace(codeUnit))
        ++startIndex;
      else
        break;
    }
    if (startIndex === endIndex)
      return "";
    for (endIndex0 = endIndex; true; endIndex0 = endIndex1) {
      endIndex1 = endIndex0 - 1;
      if (endIndex1 < 0)
        $.throwExpression(new $.RangeError("value " + endIndex1));
      if (endIndex1 >= endIndex)
        $.throwExpression(new $.RangeError("value " + endIndex1));
      codeUnit = receiver.charCodeAt(endIndex1);
      if (codeUnit === 32 || codeUnit === 13 || $.JSString__isWhitespace(codeUnit))
        ;
      else
        break;
    }
    if (startIndex === 0 && endIndex0 === endIndex)
      return receiver;
    return receiver.substring(startIndex, endIndex0);
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw $.wrapException(new $.ArgumentError(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    return receiver[index];
  },
  $isString: true
},

getInterceptor: function(object) {
  return $.getInterceptor(object);
},

getDispatchProperty: function(object) {
  return object[$.dispatchPropertyName];
},

setDispatchProperty: function(object, value) {
  Object.defineProperty(object, $.dispatchPropertyName, {value: value, enumerable: false, writable: true, configurable: true});
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto;
  record = $.getDispatchProperty(object);
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = $.lookupDispatchRecord(object);
  if (record == null)
    return $.C_JSUnknown;
  $.setDispatchProperty(Object.getPrototypeOf(object), record);
  return $.getNativeInterceptor(object);
},

initializeDispatchProperty: function(setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  if (typeof rootProperty !== "string")
    return $.initializeDispatchProperty$bailout(1, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor);
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    if (i > 0)
      property = rootProperty + "_" + i;
    else
      property = rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null, null));
      return;
    }
  }
},

initializeDispatchProperty$bailout: function(state0, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    property = i > 0 ? rootProperty + "_" + i : rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null, null));
      return;
    }
  }
},

JSString__isWhitespace: function(codeUnit) {
  if (codeUnit < 256)
    switch (codeUnit) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 133:
      case 160:
        return true;
      default:
        return false;
    }
  switch (codeUnit) {
    case 5760:
    case 6158:
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8232:
    case 8233:
    case 8239:
    case 8287:
    case 12288:
    case 65279:
      return true;
    default:
      return false;
  }
}}],
["_isolate_helper", "dart:_isolate_helper", , {
CloseToken: {"": "Object;", $isCloseToken: true},

JsIsolateSink: {"": "EventSink;_isClosed,_port<",
  add$1: function(_, message) {
    $.send$1$x(this._port, message);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isIsolateSink && $.$eq(this._port, other.get$_port());
  },
  get$hashCode: function(_) {
    return $.$add$ns($.get$hashCode$(this._port), 499);
  },
  $isJsIsolateSink: true,
  $asIsolateSink: null,
  $isIsolateSink: true
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      if (t2 != null) {
        $.get$IsolateNatives_thisScript();
        t2 = true;
      } else
        t2 = false;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _Manager$1: function(entry) {
    var $function;
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new $._EventLoop($.ListQueue$(null), 0);
    this.isolates = new $.HashMap(0, null, null, null, null);
    this.managers = new $.HashMap(0, null, null, null, null);
    if (this.isWorker === true) {
      this.mainManager = new $._MainManagerStub();
      $function = function (e) { $.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
      $.get$globalThis().onmessage = $function;
      $.get$globalThis().dartPrint = function (object) {};
    }
  }
},

_IsolateContext: {"": "Object;id>,ports,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw $.wrapException(new $._ExceptionImplementation("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._liblib0$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  }
},

_EventLoop: {"": "Object;events,activeTimerCount",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._liblib0$_length === 0)
      throw $.wrapException(new $._ExceptionImplementation("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true) {
        t2 = t1.isolates;
        t2.get$isEmpty;
        t2 = t2._liblib0$_length === 0 && t1.topEventLoop.activeTimerCount === 0;
      } else
        t2 = false;
      if (t2) {
        t1 = t1.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "close"]));
        t1.postMessage$1;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        t1 = $globalState.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)]));
        t1.postMessage$1;
        self.postMessage(t2);
      }

  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    $.get$_Zone__current().createTimer$2($.Duration_0, this);
  }
},

_IsolateEvent: {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
},

_MainManagerStub: {"": "Object;"},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    var t1 = $.ReceivePortImpl__nextFreeId;
    $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
    t1 = new $.ReceivePortImpl(t1, null);
    $.register$2$x($._globalState().currentContext, t1._id, t1);
    $.lazyPort = t1;
    if ($.lazyPort == null)
      $.lazyPort = $.ReceivePortImpl$();
    t1 = $.lazyPort;
    t1.toSendPort$0;
    $.send$2$x(this.replyTo_1, "spawned", new $._NativeJsSendPort(t1, $.get$id$x($globalState.currentContext)));
    this.entryPoint_0.call$0();
  }
},

_BaseSendPort: {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_NativeJsSendPort) && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_WorkerSendPort) && true)
      throw $.wrapException(new $._ExceptionImplementation("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, futureImpl, t1, port;
    completer = new $._AsyncCompleter(new $._FutureImpl(0, $.get$_Zone__current().fork$0(), null), false);
    futureImpl = completer.future;
    t1 = futureImpl._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    t1 = $.ReceivePortImpl__nextFreeId;
    $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
    port = new $.ReceivePortImpl(t1, null);
    $.register$2$x($globalState.currentContext, port._id, port);
    this.send$2(this, message, new $._NativeJsSendPort(port, $.get$id$x($globalState.currentContext)));
    port._callback = new $._BaseSendPort_call_closure(completer, port);
    return futureImpl;
  },
  $isSendPort: true
},

_BaseSendPort_call_closure: {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1, t2;
    t1 = this.port_1;
    t1._callback = null;
    $globalState.currentContext.unregister$1(t1._id);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isException)
      t1.completeError$1(value);
    else {
      if (t1._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t1._isComplete = true;
      t2 = t1.future._zone;
      t2._openCallbacks = t2._openCallbacks - 1;
      if (t2._isExecutingCallback !== true && t2._openCallbacks === 0 && t2._children.length === 0)
        ;
      t1._setFutureValue$1(value);
    }
  }
},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(_, message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_closure(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && !$.$eq($.get$id$x($globalState.currentContext), t2.get$_isolateId());
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    t3 = $globalState.topEventLoop;
    t4 = "receive " + $.S(msg);
    t3.enqueue$3;
    t3.events._add$1(new $._IsolateEvent(isolate, new $._NativeJsSendPort_send__closure(t1, t2, shouldSerialize), t4));
  }
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t2 = this.box_0;
      t1.get$_receivePort()._callback$2(t2.msg_0, t2.reply_1);
    }
  }
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(_, message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_closure(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_WorkerSendPort)
      t1 = $.$eq(this._workerId, other._workerId) && $.$eq(this._isolateId, other._isolateId) && $.$eq(this._receivePortId, other._receivePortId);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = this._workerId;
    if (typeof t1 !== "number")
      throw t1.$shl();
    t2 = this._isolateId;
    if (typeof t2 !== "number")
      throw t2.$shl();
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.postMessage$1;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  }
},

ReceivePortImpl: {"": "Object;_id<,_callback<",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  }
},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  }
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_closure(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1.$indexSet(t1, map, true);
    $.forEach$1$ax(map.get$values(map), new $._PendingSendPortFinder_visitMap_closure(this));
  },
  visitSendPort$1: function(port) {
    if (false)
      this.ports.push(port.get$_futurePort());
  },
  visitIsolateSink$1: function(sink) {
    var t1 = sink._port;
    if (false)
      this.ports.push(t1.get$_futurePort());
  },
  visitCloseToken$1: function(token) {
  }
},

_PendingSendPortFinder_visitList_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
},

_PendingSendPortFinder_visitMap_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return new $._NativeJsSendPort(x._receivePort, x._isolateId);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return new $._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var result = new $.JsIsolateSink(false, this.visitSendPort$1(sink._port));
    result._isClosed = sink._isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if ($.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new $._NativeJsSendPort(receivePort, isolateId);
    } else
      return new $._WorkerSendPort(managerId, receivePortId, isolateId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, result;
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    result = new $.JsIsolateSink(false, port);
    result._isClosed = t1.$index(list, 2);
    return result;
  },
  deserializeCloseToken$1: function(list) {
    return $.C_CloseToken;
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List($);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;_visited",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isCloseToken)
      return this.visitCloseToken$1(x);
    $.throwExpression("Message serialization: Illegal value " + $.S(x) + " passed");
    return;
  }
},

_Copier: {"": "_MessageTraverser;_visited",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.isJsIndexable(list, list[$.dispatchPropertyName])))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      copy[i] = this._dispatch$1(list[i]);
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = $.List_List(len);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    if (typeof len !== "number")
      throw $.iae(len);
    t2 = copy.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = new $.HashMap(0, null, null, null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new $._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    $.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  }
},

_Serializer: {"": "_MessageTraverser;_nextFreeRefId,_visited",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._serializeList$1($.toList$0$ax(map.get$keys())), this._serializeList$1($.toList$0$ax(map.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var len, result, i;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.isJsIndexable(list, list[$.dispatchPropertyName])))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      result[i] = this._dispatch$1(list[i]);
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = $.List_List(len);
    if (typeof len !== "number")
      throw $.iae(len);
    t2 = result.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  }
},

_Deserializer: {"": "Object;_deserialized",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = new $.HashMap(0, null, null, null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = $.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        $.throwExpression("Unexpected serialized object");
        return;
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.isJsIndexable(dartList, dartList[$.dispatchPropertyName]))
      return this._deserializeList$1$bailout(1, dartList, id);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = $.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw $.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = new $.HashMap(0, null, null, null, null);
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !$.isJsIndexable(keys, keys[$.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !$.isJsIndexable(values, values[$.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(2, 0, result, keys, 0, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, x, result, keys, t1, values) {
    switch (state0) {
      case 0:
        result = new $.HashMap(0, null, null, null, null);
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, len, i;
        state0 = 0;
        t1 = $.getInterceptor$asx(keys);
        len = t1.get$length(keys);
        if (typeof len !== "number")
          throw $.iae(len);
        t2 = $.getInterceptor$asx(values);
        i = 0;
        for (; i < len; ++i)
          result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle?",
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1.enqueue$3;
      t1.events._add$1(new $._IsolateEvent(t2, callback, "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(new $.TimerImpl_internalCallback(this, callback), 0), milliseconds);
    } else
      throw $.wrapException(new $.UnsupportedError("Timer greater than 0."));
  }
},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
  }
},

startRootIsolate: function(entry) {
  var rootContext, t1, t2;
  $globalState = $._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = new $._IsolateContext(null, null, null);
  t1 = $globalState;
  t2 = t1.nextIsolateId;
  t1.nextIsolateId = t2 + 1;
  rootContext.id = t2;
  rootContext.ports = new $.HashMap(0, null, null, null, null);
  rootContext.isolateStatics = new Isolate();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

_globalState: function() {
  return $globalState;
},

_Manager$: function(entry) {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
},

IsolateNatives_computeThisScript: function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.wrapException(new $.UnsupportedError("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, replyTo, context, t2, values;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : $[functionName];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = new $._IsolateContext(null, null, null);
      t1 = $globalState;
      t2 = t1.nextIsolateId;
      t1.nextIsolateId = t2 + 1;
      context.id = t2;
      context.ports = new $.HashMap(0, null, null, null, null);
      context.isolateStatics = new Isolate();
      t2 = $globalState.topEventLoop;
      t2.enqueue$3;
      t2.events._add$1(new $._IsolateEvent(context, new $.IsolateNatives__processWorkerMessage_closure(entryPoint, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        $.send$2$x(t1.$index(msg, "port"), t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      values = $.Primitives_getProperty(sender, "expando$values");
      t1.remove$1(t1, values == null ? null : $.Primitives_getProperty(values, t2._getKey$0()));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg]));
        t1.postMessage$1;
        self.postMessage(t2);
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.wrapException(t1.$index(msg, "msg"));
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg]));
    t1.postMessage$1;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.wrapException(new $._ExceptionImplementation(trace));
    }

},

IsolateNatives__spawnWorker: function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { $.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
},

ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  $.register$2$x($globalState.currentContext, t1._id, t1);
  return t1;
},

_waitForPendingPorts: function(message, callback) {
  var finder = new $._PendingSendPortFinder([], new $._MessageTraverserVisitedMap());
  finder._visited = new $._JsVisitedMap(null);
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports).then$1(new $._waitForPendingPorts_closure(callback));
},

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new $._JsSerializer(0, new $._MessageTraverserVisitedMap());
    t1._visited = new $._JsVisitedMap(null);
    return t1.traverse$1(message);
  } else {
    t1 = new $._JsCopier(new $._MessageTraverserVisitedMap());
    t1._visited = new $._JsVisitedMap(null);
    return t1.traverse$1(message);
  }
},

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return new $._JsDeserializer(null).deserialize$1(message);
  else
    return message;
},

TimerImpl$: function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
}}],
["_js_helper", "dart:_js_helper", , {
DartError: {"": "Object;",
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.stack == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.stack);
  }
},

_StackTrace: {"": "Object;_stack",
  toString$0: function(_) {
    var t1 = this._stack;
    return t1 != null ? t1 : "";
  }
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

BoundClosure: {"": "Closure;_self,_target,_receiver",
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (this === other)
      return true;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isBoundClosure)
      return false;
    return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this._self) + $.get$hashCode$(this._target) + $.get$hashCode$(this._receiver) & 0x3ffffff;
  },
  $isBoundClosure: true
},

Creates: {"": "Object;types"},

Returns: {"": "Object;types"},

JSName: {"": "Object;name"},

Null: {"": "Object;"},

TypeErrorImplementation: {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  }
},

FallThroughErrorImplementation: {"": "Object;",
  toString$0: function(_) {
    return "Switch case fall-through.";
  }
},

TypeImpl: {"": "Object;_typeName",
  toString$0: function(_) {
    return this._typeName;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this._typeName);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isTypeImpl && $.$eq(this._typeName, other._typeName);
  },
  $isTypeImpl: true
},

StringMatch: {"": "Object;start,str,pattern",
  $index: function(_, g) {
    if (!$.$eq(g, 0))
      $.throwExpression(new $.RangeError("value " + $.S(g)));
    return this.pattern;
  }
},

isJsIndexable: function(object, record) {
  var result;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  return typeof object === "object" && object !== null && !!$.getInterceptor(object).$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (typeof res !== "string")
    throw $.wrapException(new $.ArgumentError(value));
  return res;
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives_printString: function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
},

Primitives__throwFormatException: function(string) {
  throw $.wrapException(new $.FormatException(string));
},

Primitives_parseDouble: function(source, handleError) {
  var result, trimmed;
  if (typeof source !== "string")
    $.throwExpression(new $.ArgumentError(source));
  handleError = $.Primitives__throwFormatException$closure;
  if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
    return handleError.call$1(source);
  result = parseFloat(source);
  if (isNaN(result)) {
    trimmed = $.trim$0$s(source);
    if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
      return result;
    return handleError.call$1(source);
  }
  return result;
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback($.getInterceptor(object));
  if ($.$eq($name, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  if (t1.codeUnitAt$1($name, 0) === 36)
    $name = t1.substring$1($name, 1);
  t1 = $.getRuntimeTypeInfo(object);
  return $.S($name) + $.joinArguments(t1, 0);
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException(new $.ArgumentError(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException(new $.ArgumentError(object));
  object[key] = value;
},

iae: function(argument) {
  throw $.wrapException(new $.ArgumentError(argument));
},

ioore: function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    $.throwExpression(new $.ArgumentError(index));
  throw $.wrapException(new $.RangeError("value " + $.S(index)));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.C_NullThrownError;
  wrapper = new $.DartError();
  wrapper.dartException = ex;
  wrapper.toString = $.DartError_toStringWrapper$closure.call$0;
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.wrapException$closure);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
},

throwExpression: function(ex) {
  throw $.wrapException(ex);
},

DartError_toStringWrapper: function() {
  return $.toString$0(this);
},

unwrapException: function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return ex.dartException;
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") || t1.$eq(type, "called_non_callable") || t1.$eq(type, "non_object_property_call") || t1.$eq(type, "non_object_property_load");
    } else
      t1 = true;
    if (t1)
      return new $.NoSuchMethodError(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$eq(type, "undefined_method"))
      return new $.NoSuchMethodError("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number >> 16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") || $.JSString_methods.endsWith$1(message, "is undefined") || $.JSString_methods.endsWith$1(message, "is null or undefined") || $.JSString_methods.endsWith$1(message, "of undefined") || $.JSString_methods.endsWith$1(message, "of null"))
        return new $.NoSuchMethodError(null, message, [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return new $.NoSuchMethodError("", message, [], $.makeLiteralMap([]), null);
      }
    t1 = t1 ? message : "";
    return new $._ExceptionImplementation(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new $.StackOverflowError();
    return new $.ArgumentError(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new $.StackOverflowError();
  return ex;
},

getTraceFromException: function(exception) {
  if (exception == null)
    return;
  if (typeof exception !== "object")
    return;
  if ("stack" in exception)
    return new $._StackTrace(exception.stack);
  else
    return;
},

makeLiteralMap: function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.get$iterator$ax(keyValuePairs);
  result = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  for (; iterator.moveNext$0() === true;) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1, result;
  t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0)) {
    result = isolate.eval$1(new $.invokeClosure_closure(closure));
    $globalState.topEventLoop.run$0();
    return result;
  } else if (t1.$eq(numberOfArguments, 1)) {
    result = isolate.eval$1(new $.invokeClosure_closure0(closure, arg1));
    $globalState.topEventLoop.run$0();
    return result;
  } else if (t1.$eq(numberOfArguments, 2)) {
    result = isolate.eval$1(new $.invokeClosure_closure1(closure, arg1, arg2));
    $globalState.topEventLoop.run$0();
    return result;
  } else
    throw $.wrapException(new $._ExceptionImplementation("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($globalState.currentContext, $.invokeClosure$closure.call$5);
  closure.$identity = $function;
  return $function;
},

throwCyclicInit: function(staticName) {
  throw $.wrapException(new $.CyclicInitializationError("Cyclic initialization for static " + $.S(staticName)));
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

runtimeTypeToString: function(type) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array) {
    if (0 >= type.length)
      throw $.ioore(0);
    return type[0].builtin$cls + $.joinArguments(type, 1);
  } else
    return type.builtin$cls;
},

joinArguments: function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, t1;
  if (typeof types !== "string" && (typeof types !== "object" || types === null || types.constructor !== Array && !$.isJsIndexable(types, types[$.dispatchPropertyName])))
    return $.joinArguments$bailout(1, types, startIndex);
  buffer = new $.StringBuffer("");
  buffer._contents = "";
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    if (index < 0 || index >= types.length)
      throw $.ioore(index);
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    t1 = $.runtimeTypeToString(argument);
    buffer._contents = buffer._contents + t1;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
},

joinArguments$bailout: function(state0, types, startIndex) {
  var buffer, t1, index, firstArgument, allDynamic, t2, argument;
  if (types == null)
    return "";
  buffer = new $.StringBuffer("");
  buffer._contents = "";
  t1 = $.getInterceptor$asx(types);
  index = startIndex;
  firstArgument = true;
  allDynamic = true;
  while (true) {
    t2 = t1.get$length(types);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    if (!(index < t2))
      break;
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = t1.$index(types, index);
    if (argument != null)
      allDynamic = false;
    t2 = $.runtimeTypeToString(argument);
    buffer._contents = buffer._contents + t2;
    ++index;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
},

typeNameInChrome: function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
},

typeNameInSafari: function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
},

typeNameInWebKitCommon: function(tag) {
  var $name = tag;
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
},

typeNameInOpera: function(obj) {
  return $.constructorNameFallback(obj);
},

typeNameInFirefox: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
},

typeNameInIE: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
},

constructorNameFallback: function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.builtin$cls;
    if ($name != null)
      return $name;
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
},

alternateTag: function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
},

getFunctionForTypeNameOf: function() {
  if (typeof navigator !== "object")
    return $.typeNameInChrome$closure;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome$closure;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox$closure;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE$closure;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera$closure;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari$closure;
  else
    return $.constructorNameFallback$closure;
},

toStringForNativeObject: function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return "Instance of " + $._getTypeNameOf.call$1(obj);
},

hashCodeForNativeObject: function(object) {
  return $.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

defineNativeMethods: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, true);
},

defineNativeMethodsNonleaf: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, false);
},

defineNativeMethodsCommon: function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
},

defineNativeMethodsFinish: function() {
},

lookupInterceptor: function(hasOwnPropertyFunction, tag) {
  var map = $.interceptorsByTag;
  if (map == null)
    return;
  return hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
},

lookupDispatchRecord: function(obj) {
  var hasOwnPropertyFunction, tag, interceptor, secondTag, t1;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  tag = $._getTypeNameOf.call$1(obj);
  interceptor = $.lookupInterceptor(hasOwnPropertyFunction, tag);
  if (interceptor == null) {
    secondTag = $.alternateTag(obj, tag);
    if (secondTag != null)
      interceptor = $.lookupInterceptor(hasOwnPropertyFunction, secondTag);
  }
  if (interceptor == null)
    return;
  t1 = $.leafTags;
  if (t1 != null && t1[tag] === true)
    return $.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return $.makeDispatchRecord(interceptor, Object.getPrototypeOf(obj), null, null);
},

stringReplaceAllUnchecked: function(receiver, from, to) {
  var result, $length, i, t1;
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = new $.StringBuffer("");
      result._contents = "";
      $length = receiver.length;
      result._contents = result._contents + to;
      for (i = 0; i < $length; ++i) {
        t1 = receiver[i];
        result._contents = result._contents + t1;
        result._contents = result._contents + to;
      }
      return result._contents;
    }
  else
    return receiver.replace(new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
}}],
["box2d", "package:box2d/box2d.dart", , {
ContactFilter: {"": "Object;",
  shouldCollide$2: function(fixtureA, fixtureB) {
    var filterA, filterB, t1;
    filterA = fixtureA.get$filter();
    filterB = fixtureB.get$filter();
    t1 = filterA.groupIndex;
    if (t1 !== 0 && t1 === filterB.groupIndex)
      return t1 > 0;
    return (filterA.maskBits & filterB.categoryBits) >>> 0 !== 0 && (filterA.categoryBits & filterB.maskBits) >>> 0 !== 0;
  }
},

ContactImpulse: {"": "Object;normalImpulses,tangentImpulses"},

AxisAlignedBox: {"": "Object;lowerBound<,upperBound<",
  setFromCombination$2: function(boxOne, boxTwo) {
    var t1, t2, t3;
    t1 = this.lowerBound;
    t2 = boxOne.lowerBound;
    t2.get$x;
    t2 = t2._f;
    if (0 >= t2.length)
      throw $.ioore(0);
    t2 = t2[0];
    t3 = boxTwo.lowerBound;
    t3.get$x;
    t3 = t3._f;
    if (0 >= t3.length)
      throw $.ioore(0);
    t3 = $.min(t2, t3[0]);
    t1.set$x;
    t1 = t1._f;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1[0] = t3;
    t3 = this.lowerBound;
    t1 = boxOne.lowerBound;
    t1.get$y;
    t1 = t1._f;
    if (1 >= t1.length)
      throw $.ioore(1);
    t1 = t1[1];
    t2 = boxTwo.lowerBound;
    t2.get$y;
    t2 = t2._f;
    if (1 >= t2.length)
      throw $.ioore(1);
    t2 = $.min(t1, t2[1]);
    t3.set$y;
    t3 = t3._f;
    if (1 >= t3.length)
      throw $.ioore(1);
    t3[1] = t2;
    t2 = this.upperBound;
    t3 = boxOne.upperBound;
    t3.get$x;
    t3 = t3._f;
    if (0 >= t3.length)
      throw $.ioore(0);
    t3 = t3[0];
    t1 = boxTwo.upperBound;
    t1.get$x;
    t1 = t1._f;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1 = $.max(t3, t1[0]);
    t2.set$x;
    t2 = t2._f;
    if (0 >= t2.length)
      throw $.ioore(0);
    t2[0] = t1;
    t1 = this.upperBound;
    t2 = boxOne.upperBound;
    t2.get$y;
    t2 = t2._f;
    if (1 >= t2.length)
      throw $.ioore(1);
    t2 = t2[1];
    t3 = boxTwo.upperBound;
    t3.get$y;
    t3 = t3._f;
    if (1 >= t3.length)
      throw $.ioore(1);
    t3 = $.max(t2, t3[1]);
    t1.set$y;
    t1 = t1._f;
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t3;
  },
  get$center: function() {
    var c, t1, t2, t3, t4, t5;
    c = new $.Vector(new Float64Array(2));
    t1 = c._f;
    t2 = this.lowerBound._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t4;
    if (1 >= t3)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = this.upperBound;
    t5 = t1[0];
    t2 = t2._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t1[0] = t5 + t2[0];
    t5 = t1[1];
    if (1 >= t3)
      throw $.ioore(1);
    t1[1] = t5 + t2[1];
    t1[0] = t1[0] * 0.5;
    t1[1] = t1[1] * 0.5;
    return c;
  },
  contains$1: function(_, aabb) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.lowerBound;
    t1.get$x;
    t2 = t1._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = aabb.lowerBound;
    t5.get$x;
    t6 = t5._f;
    t7 = t6.length;
    if (0 >= t7)
      throw $.ioore(0);
    if (t4 > t6[0]) {
      t1.get$y;
      if (1 >= t3)
        throw $.ioore(1);
      t1 = t2[1];
      t5.get$y;
      if (1 >= t7)
        throw $.ioore(1);
      if (t1 > t6[1]) {
        t1 = this.upperBound;
        t1.get$y;
        t2 = t1._f;
        if (1 >= t2.length)
          throw $.ioore(1);
        t3 = t2[1];
        t4 = aabb.upperBound;
        t4.get$y;
        t5 = t4._f;
        if (1 >= t5.length)
          throw $.ioore(1);
        if (t3 < t5[1]) {
          t1.get$x;
          t1 = t2[0];
          t4.get$x;
          t5 = t1 < t5[0];
          t1 = t5;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  setFrom$1: function(other) {
    var t1, t2, t3, t4, t5;
    t1 = this.lowerBound;
    t2 = other.get$lowerBound();
    t1.setFrom$1;
    t1 = t1._f;
    t2 = t2._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t4;
    if (1 >= t3)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = this.upperBound;
    t1 = other.get$upperBound();
    t2.setFrom$1;
    t2 = t2._f;
    t1 = t1._f;
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = t2.length;
    if (0 >= t4)
      throw $.ioore(0);
    t2[0] = t3;
    if (1 >= t5)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t4)
      throw $.ioore(1);
    t2[1] = t1;
  },
  toString$0: function(_) {
    return $.S(this.lowerBound) + ", " + $.S(this.upperBound);
  }
},

BroadPhase: {"": "Object;_tree,proxyCount,moveBuffer,_pairBuffer,_pairCapacity,_pairCount,queryProxy",
  updatePairs$1: function(callback) {
    var t1, i, t2, t3, pairBuffer, compare, primaryPair, pair;
    this._pairCount = 0;
    for (t1 = this._tree, i = 0; t2 = this.moveBuffer, i < t2.length; ++i) {
      this.queryProxy = t2[i];
      t2 = this.queryProxy;
      if (t2 == null)
        continue;
      t1._query$4(this, t2.get$box(), t1._root, 1);
    }
    this.moveBuffer = $.List_List($);
    t2 = this._pairBuffer;
    t3 = this._pairCount;
    $.IterableMixinWorkaround__rangeCheck(t2, 0, t3);
    pairBuffer = $.List_List$from(new $.SubListIterable(t2, 0, t3), true);
    compare = new $.BroadPhase_updatePairs_closure();
    if (typeof pairBuffer !== "object" || pairBuffer === null || !!pairBuffer.immutable$list)
      $.throwExpression(new $.UnsupportedError("sort"));
    t2 = $.$sub$n($.get$length$asx(pairBuffer), 1);
    if ($.$le$n($.$sub$n(t2, 0), 32))
      $.Sort_insertionSort_(pairBuffer, 0, t2, compare);
    else
      $.Sort__dualPivotQuicksort(pairBuffer, 0, t2, compare);
    t2 = this._pairBuffer;
    t3 = this._pairCount;
    $.IterableMixinWorkaround_setRangeList(t2, 0, t3, pairBuffer, 0);
    for (i = 0; i < this._pairCount;) {
      t2 = this._pairBuffer;
      if (i < 0 || i >= t2.length)
        throw $.ioore(i);
      primaryPair = t2[i];
      callback.call$2(primaryPair.get$proxyA().get$userData(), primaryPair.get$proxyB().get$userData());
      ++i;
      for (; i < this._pairCount;) {
        t2 = this._pairBuffer;
        if (i >= t2.length)
          throw $.ioore(i);
        pair = t2[i];
        if (!$.$eq(pair.get$proxyA(), primaryPair.get$proxyA()) || !$.$eq(pair.get$proxyB(), primaryPair.get$proxyB()))
          break;
        ++i;
      }
    }
    t1.rebalance$1(4);
  },
  treeCallback$1: function(proxy) {
    var t1, t2, t3, oldBuffer, i, i0, t4, t5;
    t1 = $.getInterceptor(proxy);
    if (t1.$eq(proxy, this.queryProxy))
      return true;
    t2 = this._pairCount;
    t3 = this._pairCapacity;
    if (t2 === t3) {
      oldBuffer = this._pairBuffer;
      this._pairCapacity = t3 * 2;
      this._pairBuffer = $.List_List(this._pairCapacity);
      for (i = oldBuffer.length, t2 = this._pairBuffer, t3 = t2.length, i0 = 0; i0 < i; ++i0) {
        t4 = oldBuffer[i0];
        if (i0 >= t3)
          throw $.ioore(i0);
        t2[i0] = t4;
      }
      for (t4 = this._pairCapacity; i < t4; ++i) {
        if (i >= t3)
          throw $.ioore(i);
        t2[i] = new $.Pair(null, null);
      }
    }
    t1 = t1.get$key(proxy);
    t2 = this.queryProxy;
    t3 = $.get$key$x(t2);
    if (typeof t1 !== "number")
      throw t1.$lt();
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = this._pairBuffer;
    t5 = this._pairCount;
    if (t1 < t3) {
      if (t5 >>> 0 !== t5 || t5 >= t4.length)
        throw $.ioore(t5);
      t4[t5].set$proxyA(proxy);
      t1 = this._pairBuffer;
      t2 = this._pairCount;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw $.ioore(t2);
      t1[t2].set$proxyB(this.queryProxy);
    } else {
      if (t5 >>> 0 !== t5 || t5 >= t4.length)
        throw $.ioore(t5);
      t4[t5].set$proxyA(t2);
      t1 = this._pairBuffer;
      t2 = this._pairCount;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw $.ioore(t2);
      t1[t2].set$proxyB(proxy);
    }
    this._pairCount = this._pairCount + 1;
    return true;
  },
  BroadPhase$0: function() {
    var t1, t2, t3, i;
    this.moveBuffer = $.List_List($);
    this._pairBuffer = $.List_List(this._pairCapacity);
    for (t1 = this._pairCapacity, t2 = this._pairBuffer, t3 = t2.length, i = 0; i < t1; ++i) {
      if (i >= t3)
        throw $.ioore(i);
      t2[i] = new $.Pair(null, null);
    }
  }
},

BroadPhase_updatePairs_closure: {"": "Closure;",
  call$2: function(a, b) {
    return $.compareTo$1$ns(a, b);
  }
},

DynamicTree: {"": "Object;_root,_nodeCount,_lastLeaf,_insertionCount,_path,_nodeStack,_drawVectors,_nodeCounter,_tempVector,_tempBox,center<,deltaOne,deltaTwo",
  createProxy$2: function(box, userData) {
    var proxy, t1, t2, t3, t4, t5, iterationCount, height, tryCount;
    proxy = this._allocateNode$0();
    t1 = proxy.get$box().lowerBound;
    t2 = box.lowerBound;
    t2.get$x;
    t3 = t2._f;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t3[0];
    t1.set$x;
    t1 = t1._f;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1[0] = t5 - 0.1;
    t5 = proxy.get$box().lowerBound;
    t2.get$y;
    if (1 >= t4)
      throw $.ioore(1);
    t3 = t3[1];
    t5.set$y;
    t5 = t5._f;
    if (1 >= t5.length)
      throw $.ioore(1);
    t5[1] = t3 - 0.1;
    t3 = proxy.get$box().upperBound;
    t5 = box.upperBound;
    t5.get$x;
    t4 = t5._f;
    t2 = t4.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1 = t4[0];
    t3.set$x;
    t3 = t3._f;
    if (0 >= t3.length)
      throw $.ioore(0);
    t3[0] = t1 + 0.1;
    t1 = proxy.get$box().upperBound;
    t5.get$y;
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t4[1];
    t1.set$y;
    t1 = t1._f;
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t4 + 0.1;
    proxy.set$userData(userData);
    this._insertLeaf$1(proxy);
    iterationCount = $.JSNumber_methods.$shr(this._nodeCount, 4);
    height = this._computeHeight$1(this._root);
    tryCount = 0;
    while (true) {
      if (!(height > 64 && tryCount < 10))
        break;
      this.rebalance$1(iterationCount);
      height = this._computeHeight$1(this._root);
      ++tryCount;
    }
    return proxy;
  },
  moveProxy$3: function(argProxy, argBox, displacement) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = argProxy.get$box();
    if (t1.contains$1(t1, argBox))
      return false;
    this._removeLeaf$1(argProxy);
    t1 = argBox.lowerBound;
    t1.get$x;
    t2 = t1._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t1.set$x;
    t2[0] = t4 - 0.1;
    t1.get$y;
    if (1 >= t3)
      throw $.ioore(1);
    t3 = t2[1];
    t1.set$y;
    t2[1] = t3 - 0.1;
    t3 = argBox.upperBound;
    t3.get$x;
    t1 = t3._f;
    t4 = t1.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t1[0];
    t3.set$x;
    t1[0] = t5 + 0.1;
    t3.get$y;
    if (1 >= t4)
      throw $.ioore(1);
    t4 = t1[1];
    t3.set$y;
    t1[1] = t4 + 0.1;
    t4 = this._tempVector._f;
    t3 = displacement._f;
    t5 = t3.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t3[0];
    t7 = t4.length;
    if (0 >= t7)
      throw $.ioore(0);
    t4[0] = t6;
    if (1 >= t5)
      throw $.ioore(1);
    t3 = t3[1];
    if (1 >= t7)
      throw $.ioore(1);
    t4[1] = t3;
    t4[0] = t4[0] * 2;
    t4[1] = t4[1] * 2;
    t3 = t4[0];
    if (t3 < 0)
      t2[0] = t2[0] + t3;
    else
      t1[0] = t1[0] + t3;
    t3 = t4[1];
    if (t3 < 0)
      t2[1] = t2[1] + t3;
    else
      t1[1] = t1[1] + t3;
    t3 = argProxy.get$box();
    t4 = t3.lowerBound;
    t4.setFrom$1;
    t4 = t4._f;
    t5 = t2[0];
    t6 = t4.length;
    if (0 >= t6)
      throw $.ioore(0);
    t4[0] = t5;
    t2 = t2[1];
    if (1 >= t6)
      throw $.ioore(1);
    t4[1] = t2;
    t3 = t3.upperBound;
    t3.setFrom$1;
    t3 = t3._f;
    t2 = t1[0];
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t3[0] = t2;
    t1 = t1[1];
    if (1 >= t4)
      throw $.ioore(1);
    t3[1] = t1;
    this._insertLeaf$1(argProxy);
    return true;
  },
  _allocateNode$0: function() {
    var t1, i, t2, t3, node;
    t1 = this._nodeStack;
    if (t1._head === t1._tail)
      for (i = 0; i < 6; ++i) {
        t2 = new $.AxisAlignedBox(null, null);
        if (t2.lowerBound == null) {
          t3 = new $.Vector($.Float64List_Float64List(2));
          t3.Vector$zero$0();
          t2.lowerBound = t3;
        }
        if (t2.upperBound == null) {
          t3 = new $.Vector($.Float64List_Float64List(2));
          t3.Vector$zero$0();
          t2.upperBound = t3;
        }
        t1.addFirst$1(new $.DynamicTreeNode(t2, null, null, null, null, null, null));
      }
    node = t1.removeFirst$0();
    t1 = $.getInterceptor$x(node);
    t1.set$parent(node, null);
    node.set$childOne(null);
    node.set$childTwo(null);
    node.set$userData(null);
    t1.set$key(node, this._nodeCounter);
    this._nodeCounter = this._nodeCounter + 1;
    this._nodeCount = this._nodeCount + 1;
    return node;
  },
  _query$4: function(callback, argBox, node, count) {
    if (typeof count !== "number")
      return this._query$4$bailout(1, callback, argBox, node, count);
    if (node == null)
      return true;
    if ($.AxisAlignedBox_testOverlap(argBox, node.get$box()))
      if (node.get$isLeaf()) {
        if (callback.treeCallback$1(node) !== true)
          return false;
      } else {
        if (count < 64) {
          ++count;
          if (!this._query$4(callback, argBox, node.get$childOne(), count))
            return false;
        }
        if (count < 64)
          if (!this._query$4(callback, argBox, node.get$childTwo(), count + 1))
            return false;
      }
    return true;
  },
  _query$4$bailout: function(state0, callback, argBox, node, count) {
    var t1;
    if (node == null)
      return true;
    if ($.AxisAlignedBox_testOverlap(argBox, node.get$box()))
      if (node.get$isLeaf()) {
        if (callback.treeCallback$1(node) !== true)
          return false;
      } else {
        t1 = $.getInterceptor$n(count);
        if (t1.$lt(count, 64)) {
          count = t1.$add(count, 1);
          if (!this._query$4(callback, argBox, node.get$childOne(), count))
            return false;
        }
        t1 = $.getInterceptor$n(count);
        if (t1.$lt(count, 64)) {
          count = t1.$add(count, 1);
          if (!this._query$4(callback, argBox, node.get$childTwo(), count))
            return false;
        }
      }
    return true;
  },
  _insertLeaf$1: function(node) {
    var t1, t2, t3, t4, t5, t6, sibling, childOne, childTwo, t7, t8, t9, node1, node2, node10;
    this._insertionCount = this._insertionCount + 1;
    if (this._root == null) {
      this._root = node;
      $.set$parent$x(node, null);
      return;
    }
    t1 = node.get$box();
    t2 = new $.Vector($._TypedArrayFactoryProvider__F64(2))._f;
    t3 = t1.lowerBound._f;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t3[0];
    t6 = t2.length;
    if (0 >= t6)
      throw $.ioore(0);
    t2[0] = t5;
    if (1 >= t4)
      throw $.ioore(1);
    t3 = t3[1];
    if (1 >= t6)
      throw $.ioore(1);
    t2[1] = t3;
    t1 = t1.upperBound;
    t3 = t2[0];
    t1 = t1._f;
    t6 = t1.length;
    if (0 >= t6)
      throw $.ioore(0);
    t2[0] = t3 + t1[0];
    t3 = t2[1];
    if (1 >= t6)
      throw $.ioore(1);
    t2[1] = t3 + t1[1];
    t2[0] = t2[0] * 0.5;
    t2[1] = t2[1] * 0.5;
    t1 = this.center._f;
    t3 = t2[0];
    t6 = t1.length;
    if (0 >= t6)
      throw $.ioore(0);
    t1[0] = t3;
    t2 = t2[1];
    if (1 >= t6)
      throw $.ioore(1);
    t1[1] = t2;
    sibling = this._root;
    if (!sibling.get$isLeaf()) {
      t2 = this.deltaOne._f;
      t3 = this.deltaTwo._f;
      do {
        childOne = sibling.get$childOne();
        childTwo = sibling.get$childTwo();
        t4 = childOne.get$box();
        t5 = new $.Vector($._TypedArrayFactoryProvider__F64(2))._f;
        t6 = t4.lowerBound._f;
        t7 = t6.length;
        if (0 >= t7)
          throw $.ioore(0);
        t8 = t6[0];
        t9 = t5.length;
        if (0 >= t9)
          throw $.ioore(0);
        t5[0] = t8;
        if (1 >= t7)
          throw $.ioore(1);
        t6 = t6[1];
        if (1 >= t9)
          throw $.ioore(1);
        t5[1] = t6;
        t4 = t4.upperBound;
        t6 = t5[0];
        t4 = t4._f;
        t9 = t4.length;
        if (0 >= t9)
          throw $.ioore(0);
        t5[0] = t6 + t4[0];
        t6 = t5[1];
        if (1 >= t9)
          throw $.ioore(1);
        t5[1] = t6 + t4[1];
        t5[0] = t5[0] * 0.5;
        t5[1] = t5[1] * 0.5;
        t4 = t5[0];
        t6 = t2.length;
        if (0 >= t6)
          throw $.ioore(0);
        t2[0] = t4;
        t5 = t5[1];
        if (1 >= t6)
          throw $.ioore(1);
        t2[1] = t5;
        t5 = childTwo.get$box();
        t6 = new $.Vector($._TypedArrayFactoryProvider__F64(2))._f;
        t4 = t5.lowerBound._f;
        t9 = t4.length;
        if (0 >= t9)
          throw $.ioore(0);
        t7 = t4[0];
        t8 = t6.length;
        if (0 >= t8)
          throw $.ioore(0);
        t6[0] = t7;
        if (1 >= t9)
          throw $.ioore(1);
        t4 = t4[1];
        if (1 >= t8)
          throw $.ioore(1);
        t6[1] = t4;
        t5 = t5.upperBound;
        t4 = t6[0];
        t5 = t5._f;
        t8 = t5.length;
        if (0 >= t8)
          throw $.ioore(0);
        t6[0] = t4 + t5[0];
        t4 = t6[1];
        if (1 >= t8)
          throw $.ioore(1);
        t6[1] = t4 + t5[1];
        t6[0] = t6[0] * 0.5;
        t6[1] = t6[1] * 0.5;
        t5 = t6[0];
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t3[0] = t5;
        t6 = t6[1];
        if (1 >= t4)
          throw $.ioore(1);
        t3[1] = t6;
        t6 = t2.length;
        if (0 >= t6)
          throw $.ioore(0);
        t4 = t2[0];
        t5 = t1.length;
        if (0 >= t5)
          throw $.ioore(0);
        t2[0] = t4 - t1[0];
        if (1 >= t6)
          throw $.ioore(1);
        t6 = t2[1];
        if (1 >= t5)
          throw $.ioore(1);
        t2[1] = t6 - t1[1];
        t6 = Math.abs(t2[0]);
        t5 = t2.length;
        if (0 >= t5)
          throw $.ioore(0);
        t2[0] = t6;
        if (1 >= t5)
          throw $.ioore(1);
        t5 = Math.abs(t2[1]);
        if (1 >= t2.length)
          throw $.ioore(1);
        t2[1] = t5;
        t5 = t3.length;
        if (0 >= t5)
          throw $.ioore(0);
        t6 = t3[0];
        t4 = t1.length;
        if (0 >= t4)
          throw $.ioore(0);
        t3[0] = t6 - t1[0];
        if (1 >= t5)
          throw $.ioore(1);
        t5 = t3[1];
        if (1 >= t4)
          throw $.ioore(1);
        t3[1] = t5 - t1[1];
        t5 = Math.abs(t3[0]);
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t3[0] = t5;
        if (1 >= t4)
          throw $.ioore(1);
        t4 = Math.abs(t3[1]);
        if (1 >= t3.length)
          throw $.ioore(1);
        t3[1] = t4;
        t4 = t2.length;
        if (0 >= t4)
          throw $.ioore(0);
        t5 = t2[0];
        if (1 >= t4)
          throw $.ioore(1);
        sibling = t5 + t2[1] < t3[0] + t3[1] ? childOne : childTwo;
      } while (!sibling.get$isLeaf());
    }
    t1 = $.getInterceptor$x(sibling);
    node1 = t1.get$parent(sibling);
    node2 = this._allocateNode$0();
    $.set$parent$x(node2, node1);
    node2.set$userData(null);
    node2.get$box().setFromCombination$2(node.get$box(), sibling.get$box());
    if (node1 != null) {
      if ($.$eq(t1.get$parent(sibling).get$childOne(), sibling))
        node1.set$childOne(node2);
      else
        node1.set$childTwo(node2);
      node2.set$childOne(sibling);
      node2.set$childTwo(node);
      t1.set$parent(sibling, node2);
      $.set$parent$x(node, node2);
      do {
        t1 = node1.get$box();
        if (t1.contains$1(t1, node2.get$box()))
          break;
        node1.get$box().setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
        node10 = $.get$parent$x(node1);
        if (node10 != null) {
          node2 = node1;
          node1 = node10;
          continue;
        } else
          break;
      } while (true);
    } else {
      node2.set$childOne(sibling);
      node2.set$childTwo(node);
      t1.set$parent(sibling, node2);
      $.set$parent$x(node, node2);
      this._root = node2;
    }
  },
  _removeLeaf$1: function(argNode) {
    var t1, node2, node1, sibling, t2, t3, t4, t5, t6, t7;
    t1 = $.getInterceptor(argNode);
    if (t1.$eq(argNode, this._root)) {
      this._root = null;
      if ($.$eq(this._lastLeaf, argNode))
        this._lastLeaf = null;
      return;
    }
    node2 = t1.get$parent(argNode);
    node1 = $.get$parent$x(node2);
    sibling = $.$eq(node2.get$childOne(), argNode) ? node2.get$childTwo() : node2.get$childOne();
    if (node1 != null) {
      if ($.$eq(node1.get$childOne(), node2))
        node1.set$childOne(sibling);
      else
        node1.set$childTwo(sibling);
      $.set$parent$x(sibling, node1);
      this._nodeStack.addFirst$1(node2);
      this._nodeCount = this._nodeCount - 1;
      for (t1 = this._tempBox; node1 != null;) {
        t2 = node1.get$box();
        t3 = t1.lowerBound;
        t4 = t2.lowerBound;
        t3.setFrom$1;
        t3 = t3._f;
        t4 = t4._f;
        t5 = t4.length;
        if (0 >= t5)
          throw $.ioore(0);
        t6 = t4[0];
        t7 = t3.length;
        if (0 >= t7)
          throw $.ioore(0);
        t3[0] = t6;
        if (1 >= t5)
          throw $.ioore(1);
        t4 = t4[1];
        if (1 >= t7)
          throw $.ioore(1);
        t3[1] = t4;
        t4 = t1.upperBound;
        t2 = t2.upperBound;
        t4.setFrom$1;
        t4 = t4._f;
        t2 = t2._f;
        t3 = t2.length;
        if (0 >= t3)
          throw $.ioore(0);
        t7 = t2[0];
        t5 = t4.length;
        if (0 >= t5)
          throw $.ioore(0);
        t4[0] = t7;
        if (1 >= t3)
          throw $.ioore(1);
        t2 = t2[1];
        if (1 >= t5)
          throw $.ioore(1);
        t4[1] = t2;
        node1.get$box().setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
        if (t1.contains$1(t1, node1.get$box()))
          break;
        node1 = $.get$parent$x(node1);
      }
    } else {
      this._root = sibling;
      $.set$parent$x(sibling, null);
      this._nodeStack.addFirst$1(node2);
      this._nodeCount = this._nodeCount - 1;
    }
    if ($.$eq(this._lastLeaf, argNode))
      this._lastLeaf = this._root;
  },
  _computeHeight$1: function(node) {
    if (node == null)
      return 0;
    return 1 + $.max(this._computeHeight$1(node.get$childOne()), this._computeHeight$1(node.get$childTwo()));
  },
  rebalance$1: function(iterations) {
    var i, current, bit, t1, t2;
    if (this._root == null)
      return;
    for (i = 0; i < iterations; ++i) {
      current = this._root;
      for (bit = 0; t1 = current.get$isLeaf(), t2 = this._path, !t1;) {
        current = ($.JSNumber_methods.$shr(t2, bit) & 1) === 0 ? current.get$childOne() : current.get$childTwo();
        bit = bit + 1 & 31;
      }
      this._path = t2 + 1;
      this._removeLeaf$1(current);
      this._insertLeaf$1(current);
    }
  },
  DynamicTree$0: function() {
    var t1, t2, i, t3, t4, t5;
    for (t1 = this._drawVectors, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = new $.Vector(new Float64Array(2));
      t4 = t3._f;
      t5 = t4.length;
      if (0 >= t5)
        throw $.ioore(0);
      t4[0] = 0;
      if (1 >= t5)
        throw $.ioore(1);
      t4[1] = 0;
      t1[i] = t3;
    }
  }
},

DynamicTreeNode: {"": "Object;box<,parent*,next@,childOne@,childTwo@,userData@,key*",
  get$isLeaf: function() {
    return this.childOne == null;
  },
  toString$0: function(_) {
    var t1 = this.box;
    return $.S(t1.lowerBound) + ", " + $.S(t1.upperBound);
  }
},

Pair: {"": "Object;proxyA@,proxyB@",
  compareTo$1: function(_, pair2) {
    var t1, t2;
    t1 = $.get$key$x(this.proxyA);
    t2 = $.get$key$x(pair2.get$proxyA());
    if (typeof t1 !== "number")
      throw t1.$lt();
    if (typeof t2 !== "number")
      throw $.iae(t2);
    if (t1 < t2)
      return -1;
    if (t1 === t2) {
      t1 = $.get$key$x(this.proxyB);
      t2 = $.get$key$x(pair2.get$proxyB());
      if (typeof t1 !== "number")
        throw t1.$lt();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (t1 < t2)
        t1 = -1;
      else
        t1 = t1 === t2 ? 0 : 1;
      return t1;
    }
    return 1;
  }
},

Collision: {"": "Object;_pool,cache,input,output,results1,results2,incidentEdge<,localTangent,localNormal<,planePoint,tangent,normal<,normal1,v11,v12,clipPoints1,clipPoints2",
  testOverlap$4: function(shapeA, shapeB, transformA, transformB) {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    t1 = this.input;
    t1.proxyA.setFromShape$1(shapeA);
    t1.proxyB.setFromShape$1(shapeB);
    t2 = t1.transformA;
    t3 = t2.position._f;
    t4 = transformA.position._f;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    t7 = t3.length;
    if (0 >= t7)
      throw $.ioore(0);
    t3[0] = t6;
    if (1 >= t5)
      throw $.ioore(1);
    t4 = t4[1];
    if (1 >= t7)
      throw $.ioore(1);
    t3[1] = t4;
    t2 = t2.rotation;
    t4 = transformA.rotation;
    t3 = t2.col1._f;
    t7 = t4.col1._f;
    t5 = t7.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t7[0];
    t8 = t3.length;
    if (0 >= t8)
      throw $.ioore(0);
    t3[0] = t6;
    if (1 >= t5)
      throw $.ioore(1);
    t7 = t7[1];
    if (1 >= t8)
      throw $.ioore(1);
    t3[1] = t7;
    t2 = t2.col2._f;
    t4 = t4.col2._f;
    t7 = t4.length;
    if (0 >= t7)
      throw $.ioore(0);
    t3 = t4[0];
    t8 = t2.length;
    if (0 >= t8)
      throw $.ioore(0);
    t2[0] = t3;
    if (1 >= t7)
      throw $.ioore(1);
    t4 = t4[1];
    if (1 >= t8)
      throw $.ioore(1);
    t2[1] = t4;
    t4 = t1.transformB;
    t2 = t4.position._f;
    t8 = transformB.position._f;
    t7 = t8.length;
    if (0 >= t7)
      throw $.ioore(0);
    t3 = t8[0];
    t5 = t2.length;
    if (0 >= t5)
      throw $.ioore(0);
    t2[0] = t3;
    if (1 >= t7)
      throw $.ioore(1);
    t8 = t8[1];
    if (1 >= t5)
      throw $.ioore(1);
    t2[1] = t8;
    t4 = t4.rotation;
    t8 = transformB.rotation;
    t2 = t4.col1._f;
    t5 = t8.col1._f;
    t7 = t5.length;
    if (0 >= t7)
      throw $.ioore(0);
    t3 = t5[0];
    t6 = t2.length;
    if (0 >= t6)
      throw $.ioore(0);
    t2[0] = t3;
    if (1 >= t7)
      throw $.ioore(1);
    t5 = t5[1];
    if (1 >= t6)
      throw $.ioore(1);
    t2[1] = t5;
    t4 = t4.col2._f;
    t8 = t8.col2._f;
    t5 = t8.length;
    if (0 >= t5)
      throw $.ioore(0);
    t2 = t8[0];
    t6 = t4.length;
    if (0 >= t6)
      throw $.ioore(0);
    t4[0] = t2;
    if (1 >= t5)
      throw $.ioore(1);
    t8 = t8[1];
    if (1 >= t6)
      throw $.ioore(1);
    t4[1] = t8;
    t1.useRadii = true;
    t8 = this.cache;
    t8.count = 0;
    t4 = this.output;
    this._pool.distance.distance$3(t4, t8, t1);
    t4 = t4.distance;
    if (t4 == null)
      throw t4.$lt();
    return t4 < 0.000001192;
  },
  collideCircles$5: function(manifold, circle1, xfA, circle2, xfB) {
    var t1, v, t2, t3, t4, t5, t6, t7, t8, t9, t10, v1, t11, t12, t13, t14, t15, t16, t17, t18, t19, dx, dy, radius;
    manifold.set$pointCount(0);
    t1 = $.getInterceptor$x(circle1);
    v = t1.get$position(circle1);
    t2 = xfA.position._f;
    if (1 >= t2.length)
      throw $.ioore(1);
    t3 = t2[1];
    t4 = xfA.rotation;
    t5 = t4.col1._f;
    if (1 >= t5.length)
      throw $.ioore(1);
    t6 = t5[1];
    t7 = v._f;
    t8 = t7.length;
    if (0 >= t8)
      throw $.ioore(0);
    t9 = t7[0];
    t4 = t4.col2._f;
    if (1 >= t4.length)
      throw $.ioore(1);
    t10 = t4[1];
    if (1 >= t8)
      throw $.ioore(1);
    t7 = t7[1];
    t2 = t2[0];
    t5 = t5[0];
    t4 = t4[0];
    t8 = $.getInterceptor$x(circle2);
    v1 = t8.get$position(circle2);
    t11 = xfB.position._f;
    if (1 >= t11.length)
      throw $.ioore(1);
    t12 = t11[1];
    t13 = xfB.rotation;
    t14 = t13.col1._f;
    if (1 >= t14.length)
      throw $.ioore(1);
    t15 = t14[1];
    t16 = v1._f;
    t17 = t16.length;
    if (0 >= t17)
      throw $.ioore(0);
    t18 = t16[0];
    t13 = t13.col2._f;
    if (1 >= t13.length)
      throw $.ioore(1);
    t19 = t13[1];
    if (1 >= t17)
      throw $.ioore(1);
    t16 = t16[1];
    dx = t11[0] + t14[0] * t18 + t13[0] * t16 - (t2 + t5 * t9 + t4 * t7);
    dy = t12 + t15 * t18 + t19 * t16 - (t3 + t6 * t9 + t10 * t7);
    radius = $.$add$ns(circle1.get$radius(), circle2.get$radius());
    t2 = $.$mul$n(radius, radius);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    if (dx * dx + dy * dy > t2)
      return;
    t2 = $.getInterceptor$x(manifold);
    t2.set$type(manifold, 0);
    t3 = manifold.get$localPoint();
    t3 = t3._f;
    t1 = t1.get$position(circle1)._f;
    t4 = t1.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t1[0];
    t6 = t3.length;
    if (0 >= t6)
      throw $.ioore(0);
    t3[0] = t5;
    if (1 >= t4)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t6)
      throw $.ioore(1);
    t3[1] = t1;
    t1 = manifold.get$localNormal()._f;
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = 0;
    t1[0] = 0;
    manifold.set$pointCount(1);
    t1 = $.$index$asx(t2.get$points(manifold), 0).get$localPoint();
    t1 = t1._f;
    t8 = t8.get$position(circle2)._f;
    t3 = t8.length;
    if (0 >= t3)
      throw $.ioore(0);
    t6 = t8[0];
    t4 = t1.length;
    if (0 >= t4)
      throw $.ioore(0);
    t1[0] = t6;
    if (1 >= t3)
      throw $.ioore(1);
    t8 = t8[1];
    if (1 >= t4)
      throw $.ioore(1);
    t1[1] = t8;
    $.get$id$x($.$index$asx(t2.get$points(manifold), 0)).zero$0();
  },
  collidePolygonAndCircle$5: function(manifold, polygon, xfA, circle, xfB) {
    var t1, v, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, v1x, v1y, cLocaly, cLocalx, radius, vertexCount, vertices, normals, normalIndex, separation, i, vertex, norm, s, vertIndex2, v1, v2, mpoint, temp2X, temp2Y, temp4X, temp4Y, dx, dy, fcx, fcy;
    manifold.set$pointCount(0);
    t1 = $.getInterceptor$x(circle);
    v = t1.get$position(circle);
    t2 = xfB.position._f;
    if (1 >= t2.length)
      throw $.ioore(1);
    t3 = t2[1];
    t4 = xfB.rotation;
    t5 = t4.col1._f;
    if (1 >= t5.length)
      throw $.ioore(1);
    t6 = t5[1];
    t7 = v._f;
    t8 = t7.length;
    if (0 >= t8)
      throw $.ioore(0);
    t9 = t7[0];
    t4 = t4.col2._f;
    if (1 >= t4.length)
      throw $.ioore(1);
    t10 = t4[1];
    if (1 >= t8)
      throw $.ioore(1);
    t7 = t7[1];
    t2 = t2[0];
    t5 = t5[0];
    t4 = t4[0];
    t8 = xfA.position._f;
    t11 = t8.length;
    if (0 >= t11)
      throw $.ioore(0);
    v1x = t2 + t5 * t9 + t4 * t7 - t8[0];
    if (1 >= t11)
      throw $.ioore(1);
    v1y = t3 + t6 * t9 + t10 * t7 - t8[1];
    t8 = xfA.rotation;
    t7 = t8.col2._f;
    t10 = t7.length;
    if (0 >= t10)
      throw $.ioore(0);
    t9 = t7[0];
    if (1 >= t10)
      throw $.ioore(1);
    cLocaly = v1x * t9 + v1y * t7[1];
    t8 = t8.col1._f;
    t7 = t8.length;
    if (0 >= t7)
      throw $.ioore(0);
    t9 = t8[0];
    if (1 >= t7)
      throw $.ioore(1);
    cLocalx = v1x * t9 + v1y * t8[1];
    radius = $.$add$ns(polygon.get$radius(), circle.get$radius());
    if (typeof radius !== "number")
      return this.collidePolygonAndCircle$5$bailout(1, manifold, polygon, circle, radius, cLocaly, cLocalx, t1);
    vertexCount = polygon.get$vertexCount();
    vertices = polygon.get$vertices();
    normals = polygon.get$normals();
    for (t2 = vertices.length, t3 = normals.length, normalIndex = 0, separation = 1e-12, i = 0; i < vertexCount; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      vertex = vertices[i];
      t4 = $.getInterceptor$x(vertex);
      t5 = t4.get$x(vertex);
      if (typeof t5 !== "number")
        throw $.iae(t5);
      t4 = t4.get$y(vertex);
      if (typeof t4 !== "number")
        throw $.iae(t4);
      if (i >= t3)
        throw $.ioore(i);
      norm = normals[i];
      t6 = $.getInterceptor$x(norm);
      s = $.$add$ns($.$mul$n(t6.get$x(norm), cLocalx - t5), $.$mul$n(t6.get$y(norm), cLocaly - t4));
      t4 = $.getInterceptor$n(s);
      if (t4.$gt(s, radius))
        return;
      if (t4.$gt(s, separation)) {
        separation = s;
        normalIndex = i;
      }
    }
    vertIndex2 = normalIndex + 1;
    vertIndex2 = vertIndex2 < vertexCount ? vertIndex2 : 0;
    if (normalIndex < 0 || normalIndex >= t2)
      throw $.ioore(normalIndex);
    v1 = vertices[normalIndex];
    if (vertIndex2 < 0 || vertIndex2 >= t2)
      throw $.ioore(vertIndex2);
    v2 = vertices[vertIndex2];
    if ($.$lt$n(separation, 1.192e-7)) {
      manifold.set$pointCount(1);
      t2 = $.getInterceptor$x(manifold);
      t2.set$type(manifold, 1);
      if (normalIndex >= t3)
        throw $.ioore(normalIndex);
      norm = normals[normalIndex];
      t3 = manifold.get$localNormal();
      t4 = $.getInterceptor$x(norm);
      t5 = t4.get$x(norm);
      t3 = t3._f;
      if (0 >= t3.length)
        throw $.ioore(0);
      t3[0] = t5;
      t5 = manifold.get$localNormal();
      t4 = t4.get$y(norm);
      t5 = t5._f;
      if (1 >= t5.length)
        throw $.ioore(1);
      t5[1] = t4;
      t4 = manifold.get$localPoint();
      t5 = $.getInterceptor$x(v1);
      t3 = $.getInterceptor$x(v2);
      t6 = $.$mul$n($.$add$ns(t5.get$x(v1), t3.get$x(v2)), 0.5);
      t4 = t4._f;
      if (0 >= t4.length)
        throw $.ioore(0);
      t4[0] = t6;
      t6 = manifold.get$localPoint();
      t3 = $.$mul$n($.$add$ns(t5.get$y(v1), t3.get$y(v2)), 0.5);
      t6 = t6._f;
      if (1 >= t6.length)
        throw $.ioore(1);
      t6[1] = t3;
      mpoint = $.$index$asx(t2.get$points(manifold), 0);
      t2 = mpoint.get$localPoint();
      t3 = t1.get$position(circle)._f;
      if (0 >= t3.length)
        throw $.ioore(0);
      t3 = t3[0];
      t2 = t2._f;
      if (0 >= t2.length)
        throw $.ioore(0);
      t2[0] = t3;
      t3 = mpoint.get$localPoint();
      t1 = t1.get$position(circle)._f;
      if (1 >= t1.length)
        throw $.ioore(1);
      t1 = t1[1];
      t3 = t3._f;
      if (1 >= t3.length)
        throw $.ioore(1);
      t3[1] = t1;
      $.get$id$x(mpoint).zero$0();
      return;
    }
    t2 = $.getInterceptor$x(v1);
    t4 = t2.get$x(v1);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t5 = t2.get$y(v1);
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t6 = $.getInterceptor$x(v2);
    temp2X = $.$sub$n(t6.get$x(v2), t2.get$x(v1));
    temp2Y = $.$sub$n(t6.get$y(v2), t2.get$y(v1));
    if (typeof temp2X !== "number")
      throw $.iae(temp2X);
    if (typeof temp2Y !== "number")
      throw $.iae(temp2Y);
    t7 = t6.get$x(v2);
    if (typeof t7 !== "number")
      throw $.iae(t7);
    t8 = t6.get$y(v2);
    if (typeof t8 !== "number")
      throw $.iae(t8);
    temp4X = $.$sub$n(t2.get$x(v1), t6.get$x(v2));
    temp4Y = $.$sub$n(t2.get$y(v1), t6.get$y(v2));
    if (typeof temp4X !== "number")
      throw $.iae(temp4X);
    if (typeof temp4Y !== "number")
      throw $.iae(temp4Y);
    if ((cLocalx - t4) * temp2X + (cLocaly - t5) * temp2Y <= 0) {
      t3 = t2.get$x(v1);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      dx = cLocalx - t3;
      t3 = t2.get$y(v1);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      dy = cLocaly - t3;
      if (dx * dx + dy * dy > radius * radius)
        return;
      manifold.set$pointCount(1);
      t3 = $.getInterceptor$x(manifold);
      t3.set$type(manifold, 1);
      t4 = manifold.get$localNormal();
      t5 = t2.get$x(v1);
      if (typeof t5 !== "number")
        throw $.iae(t5);
      t4 = t4._f;
      if (0 >= t4.length)
        throw $.ioore(0);
      t4[0] = cLocalx - t5;
      t5 = manifold.get$localNormal();
      t2 = t2.get$y(v1);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t5 = t5._f;
      if (1 >= t5.length)
        throw $.ioore(1);
      t5[1] = cLocaly - t2;
      manifold.get$localNormal().normalize$0();
      t2 = manifold.get$localPoint()._f;
      t5 = v1.get$_f();
      if (0 >= t5.length)
        throw $.ioore(0);
      t5 = t5[0];
      t4 = t2.length;
      if (0 >= t4)
        throw $.ioore(0);
      t2[0] = t5;
      t5 = v1.get$_f();
      if (1 >= t5.length)
        throw $.ioore(1);
      t5 = t5[1];
      if (1 >= t4)
        throw $.ioore(1);
      t2[1] = t5;
      t5 = $.$index$asx(t3.get$points(manifold), 0).get$localPoint();
      t5 = t5._f;
      t1 = t1.get$position(circle)._f;
      t2 = t1.length;
      if (0 >= t2)
        throw $.ioore(0);
      t4 = t1[0];
      t6 = t5.length;
      if (0 >= t6)
        throw $.ioore(0);
      t5[0] = t4;
      if (1 >= t2)
        throw $.ioore(1);
      t1 = t1[1];
      if (1 >= t6)
        throw $.ioore(1);
      t5[1] = t1;
      $.get$id$x($.$index$asx(t3.get$points(manifold), 0)).zero$0();
    } else if ((cLocalx - t7) * temp4X + (cLocaly - t8) * temp4Y <= 0) {
      t2 = t6.get$x(v2);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      dx = cLocalx - t2;
      t2 = t6.get$y(v2);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      dy = cLocaly - t2;
      if (dx * dx + dy * dy > radius * radius)
        return;
      manifold.set$pointCount(1);
      t2 = $.getInterceptor$x(manifold);
      t2.set$type(manifold, 1);
      t3 = manifold.get$localNormal();
      t4 = t6.get$x(v2);
      if (typeof t4 !== "number")
        throw $.iae(t4);
      t3 = t3._f;
      if (0 >= t3.length)
        throw $.ioore(0);
      t3[0] = cLocalx - t4;
      t4 = manifold.get$localNormal();
      t6 = t6.get$y(v2);
      if (typeof t6 !== "number")
        throw $.iae(t6);
      t4 = t4._f;
      if (1 >= t4.length)
        throw $.ioore(1);
      t4[1] = cLocaly - t6;
      manifold.get$localNormal().normalize$0();
      t6 = manifold.get$localPoint()._f;
      t4 = v2.get$_f();
      if (0 >= t4.length)
        throw $.ioore(0);
      t4 = t4[0];
      t3 = t6.length;
      if (0 >= t3)
        throw $.ioore(0);
      t6[0] = t4;
      t4 = v2.get$_f();
      if (1 >= t4.length)
        throw $.ioore(1);
      t4 = t4[1];
      if (1 >= t3)
        throw $.ioore(1);
      t6[1] = t4;
      t4 = $.$index$asx(t2.get$points(manifold), 0).get$localPoint();
      t4 = t4._f;
      t1 = t1.get$position(circle)._f;
      t6 = t1.length;
      if (0 >= t6)
        throw $.ioore(0);
      t3 = t1[0];
      t5 = t4.length;
      if (0 >= t5)
        throw $.ioore(0);
      t4[0] = t3;
      if (1 >= t6)
        throw $.ioore(1);
      t1 = t1[1];
      if (1 >= t5)
        throw $.ioore(1);
      t4[1] = t1;
      $.get$id$x($.$index$asx(t2.get$points(manifold), 0)).zero$0();
    } else {
      fcx = $.$mul$n($.$add$ns(t2.get$x(v1), t6.get$x(v2)), 0.5);
      fcy = $.$mul$n($.$add$ns(t2.get$y(v1), t6.get$y(v2)), 0.5);
      if (typeof fcx !== "number")
        throw $.iae(fcx);
      if (typeof fcy !== "number")
        throw $.iae(fcy);
      if (normalIndex >= t3)
        throw $.ioore(normalIndex);
      norm = normals[normalIndex];
      t2 = $.getInterceptor$x(norm);
      t3 = t2.get$x(norm);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t2 = t2.get$y(norm);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if ((cLocalx - fcx) * t3 + (cLocaly - fcy) * t2 > radius)
        return;
      manifold.set$pointCount(1);
      t2 = $.getInterceptor$x(manifold);
      t2.set$type(manifold, 1);
      t3 = manifold.get$localNormal();
      t4 = normals[normalIndex];
      t3 = t3._f;
      t5 = t4.get$_f();
      if (0 >= t5.length)
        throw $.ioore(0);
      t5 = t5[0];
      t6 = t3.length;
      if (0 >= t6)
        throw $.ioore(0);
      t3[0] = t5;
      t4 = t4.get$_f();
      if (1 >= t4.length)
        throw $.ioore(1);
      t4 = t4[1];
      if (1 >= t6)
        throw $.ioore(1);
      t3[1] = t4;
      t4 = manifold.get$localPoint()._f;
      if (0 >= t4.length)
        throw $.ioore(0);
      t4[0] = fcx;
      t4 = manifold.get$localPoint()._f;
      if (1 >= t4.length)
        throw $.ioore(1);
      t4[1] = fcy;
      t4 = $.$index$asx(t2.get$points(manifold), 0).get$localPoint();
      t4 = t4._f;
      t1 = t1.get$position(circle)._f;
      t3 = t1.length;
      if (0 >= t3)
        throw $.ioore(0);
      t6 = t1[0];
      t5 = t4.length;
      if (0 >= t5)
        throw $.ioore(0);
      t4[0] = t6;
      if (1 >= t3)
        throw $.ioore(1);
      t1 = t1[1];
      if (1 >= t5)
        throw $.ioore(1);
      t4[1] = t1;
      $.get$id$x($.$index$asx(t2.get$points(manifold), 0)).zero$0();
    }
  },
  collidePolygonAndCircle$5$bailout: function(state0, manifold, polygon, circle, radius, cLocaly, cLocalx, t1) {
    var vertexCount, vertices, normals, t2, t3, normalIndex, separation, i, vertex, t4, t5, norm, t6, s, vertIndex2, v1, v2, mpoint, temp2X, temp2Y, t7, t8, temp4X, temp4Y, dx, dy, fcx, fcy;
    vertexCount = polygon.get$vertexCount();
    vertices = polygon.get$vertices();
    normals = polygon.get$normals();
    for (t2 = vertices.length, t3 = normals.length, normalIndex = 0, separation = 1e-12, i = 0; i < vertexCount; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      vertex = vertices[i];
      t4 = $.getInterceptor$x(vertex);
      t5 = t4.get$x(vertex);
      if (typeof t5 !== "number")
        throw $.iae(t5);
      t4 = t4.get$y(vertex);
      if (typeof t4 !== "number")
        throw $.iae(t4);
      if (i >= t3)
        throw $.ioore(i);
      norm = normals[i];
      t6 = $.getInterceptor$x(norm);
      s = $.$add$ns($.$mul$n(t6.get$x(norm), cLocalx - t5), $.$mul$n(t6.get$y(norm), cLocaly - t4));
      t4 = $.getInterceptor$n(s);
      if (t4.$gt(s, radius))
        return;
      if (t4.$gt(s, separation)) {
        separation = s;
        normalIndex = i;
      }
    }
    vertIndex2 = normalIndex + 1;
    vertIndex2 = vertIndex2 < vertexCount ? vertIndex2 : 0;
    if (normalIndex < 0 || normalIndex >= t2)
      throw $.ioore(normalIndex);
    v1 = vertices[normalIndex];
    if (vertIndex2 < 0 || vertIndex2 >= t2)
      throw $.ioore(vertIndex2);
    v2 = vertices[vertIndex2];
    if ($.$lt$n(separation, 1.192e-7)) {
      manifold.set$pointCount(1);
      t2 = $.getInterceptor$x(manifold);
      t2.set$type(manifold, 1);
      if (normalIndex >= t3)
        throw $.ioore(normalIndex);
      norm = normals[normalIndex];
      t3 = manifold.get$localNormal();
      t4 = $.getInterceptor$x(norm);
      t5 = t4.get$x(norm);
      t3 = t3._f;
      if (0 >= t3.length)
        throw $.ioore(0);
      t3[0] = t5;
      t5 = manifold.get$localNormal();
      t4 = t4.get$y(norm);
      t5 = t5._f;
      if (1 >= t5.length)
        throw $.ioore(1);
      t5[1] = t4;
      t4 = manifold.get$localPoint();
      t5 = $.getInterceptor$x(v1);
      t3 = $.getInterceptor$x(v2);
      t6 = $.$mul$n($.$add$ns(t5.get$x(v1), t3.get$x(v2)), 0.5);
      t4 = t4._f;
      if (0 >= t4.length)
        throw $.ioore(0);
      t4[0] = t6;
      t6 = manifold.get$localPoint();
      t3 = $.$mul$n($.$add$ns(t5.get$y(v1), t3.get$y(v2)), 0.5);
      t6 = t6._f;
      if (1 >= t6.length)
        throw $.ioore(1);
      t6[1] = t3;
      mpoint = $.$index$asx(t2.get$points(manifold), 0);
      t2 = mpoint.get$localPoint();
      t3 = t1.get$position(circle)._f;
      if (0 >= t3.length)
        throw $.ioore(0);
      t3 = t3[0];
      t2 = t2._f;
      if (0 >= t2.length)
        throw $.ioore(0);
      t2[0] = t3;
      t3 = mpoint.get$localPoint();
      t1 = t1.get$position(circle)._f;
      if (1 >= t1.length)
        throw $.ioore(1);
      t1 = t1[1];
      t3 = t3._f;
      if (1 >= t3.length)
        throw $.ioore(1);
      t3[1] = t1;
      $.get$id$x(mpoint).zero$0();
      return;
    }
    t2 = $.getInterceptor$x(v1);
    t4 = t2.get$x(v1);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t5 = t2.get$y(v1);
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t6 = $.getInterceptor$x(v2);
    temp2X = $.$sub$n(t6.get$x(v2), t2.get$x(v1));
    temp2Y = $.$sub$n(t6.get$y(v2), t2.get$y(v1));
    if (typeof temp2X !== "number")
      throw $.iae(temp2X);
    if (typeof temp2Y !== "number")
      throw $.iae(temp2Y);
    t7 = t6.get$x(v2);
    if (typeof t7 !== "number")
      throw $.iae(t7);
    t8 = t6.get$y(v2);
    if (typeof t8 !== "number")
      throw $.iae(t8);
    temp4X = $.$sub$n(t2.get$x(v1), t6.get$x(v2));
    temp4Y = $.$sub$n(t2.get$y(v1), t6.get$y(v2));
    if (typeof temp4X !== "number")
      throw $.iae(temp4X);
    if (typeof temp4Y !== "number")
      throw $.iae(temp4Y);
    if ((cLocalx - t4) * temp2X + (cLocaly - t5) * temp2Y <= 0) {
      t3 = t2.get$x(v1);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      dx = cLocalx - t3;
      t3 = t2.get$y(v1);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      dy = cLocaly - t3;
      t3 = $.$mul$n(radius, radius);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      if (dx * dx + dy * dy > t3)
        return;
      manifold.set$pointCount(1);
      t3 = $.getInterceptor$x(manifold);
      t3.set$type(manifold, 1);
      t4 = manifold.get$localNormal();
      t5 = t2.get$x(v1);
      if (typeof t5 !== "number")
        throw $.iae(t5);
      t4 = t4._f;
      if (0 >= t4.length)
        throw $.ioore(0);
      t4[0] = cLocalx - t5;
      t5 = manifold.get$localNormal();
      t2 = t2.get$y(v1);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t5 = t5._f;
      if (1 >= t5.length)
        throw $.ioore(1);
      t5[1] = cLocaly - t2;
      manifold.get$localNormal().normalize$0();
      t2 = manifold.get$localPoint()._f;
      t5 = v1.get$_f();
      if (0 >= t5.length)
        throw $.ioore(0);
      t5 = t5[0];
      t4 = t2.length;
      if (0 >= t4)
        throw $.ioore(0);
      t2[0] = t5;
      t5 = v1.get$_f();
      if (1 >= t5.length)
        throw $.ioore(1);
      t5 = t5[1];
      if (1 >= t4)
        throw $.ioore(1);
      t2[1] = t5;
      t5 = $.$index$asx(t3.get$points(manifold), 0).get$localPoint();
      t5 = t5._f;
      t1 = t1.get$position(circle)._f;
      t2 = t1.length;
      if (0 >= t2)
        throw $.ioore(0);
      t4 = t1[0];
      t6 = t5.length;
      if (0 >= t6)
        throw $.ioore(0);
      t5[0] = t4;
      if (1 >= t2)
        throw $.ioore(1);
      t1 = t1[1];
      if (1 >= t6)
        throw $.ioore(1);
      t5[1] = t1;
      $.get$id$x($.$index$asx(t3.get$points(manifold), 0)).zero$0();
    } else if ((cLocalx - t7) * temp4X + (cLocaly - t8) * temp4Y <= 0) {
      t2 = t6.get$x(v2);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      dx = cLocalx - t2;
      t2 = t6.get$y(v2);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      dy = cLocaly - t2;
      t2 = $.$mul$n(radius, radius);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (dx * dx + dy * dy > t2)
        return;
      manifold.set$pointCount(1);
      t2 = $.getInterceptor$x(manifold);
      t2.set$type(manifold, 1);
      t3 = manifold.get$localNormal();
      t4 = t6.get$x(v2);
      if (typeof t4 !== "number")
        throw $.iae(t4);
      t3 = t3._f;
      if (0 >= t3.length)
        throw $.ioore(0);
      t3[0] = cLocalx - t4;
      t4 = manifold.get$localNormal();
      t6 = t6.get$y(v2);
      if (typeof t6 !== "number")
        throw $.iae(t6);
      t4 = t4._f;
      if (1 >= t4.length)
        throw $.ioore(1);
      t4[1] = cLocaly - t6;
      manifold.get$localNormal().normalize$0();
      t6 = manifold.get$localPoint()._f;
      t4 = v2.get$_f();
      if (0 >= t4.length)
        throw $.ioore(0);
      t4 = t4[0];
      t3 = t6.length;
      if (0 >= t3)
        throw $.ioore(0);
      t6[0] = t4;
      t4 = v2.get$_f();
      if (1 >= t4.length)
        throw $.ioore(1);
      t4 = t4[1];
      if (1 >= t3)
        throw $.ioore(1);
      t6[1] = t4;
      t4 = $.$index$asx(t2.get$points(manifold), 0).get$localPoint();
      t4 = t4._f;
      t1 = t1.get$position(circle)._f;
      t6 = t1.length;
      if (0 >= t6)
        throw $.ioore(0);
      t3 = t1[0];
      t5 = t4.length;
      if (0 >= t5)
        throw $.ioore(0);
      t4[0] = t3;
      if (1 >= t6)
        throw $.ioore(1);
      t1 = t1[1];
      if (1 >= t5)
        throw $.ioore(1);
      t4[1] = t1;
      $.get$id$x($.$index$asx(t2.get$points(manifold), 0)).zero$0();
    } else {
      fcx = $.$mul$n($.$add$ns(t2.get$x(v1), t6.get$x(v2)), 0.5);
      fcy = $.$mul$n($.$add$ns(t2.get$y(v1), t6.get$y(v2)), 0.5);
      if (typeof fcx !== "number")
        throw $.iae(fcx);
      if (typeof fcy !== "number")
        throw $.iae(fcy);
      if (normalIndex >= t3)
        throw $.ioore(normalIndex);
      norm = normals[normalIndex];
      t2 = $.getInterceptor$x(norm);
      t3 = t2.get$x(norm);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t2 = t2.get$y(norm);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (typeof radius !== "number")
        throw $.iae(radius);
      if ((cLocalx - fcx) * t3 + (cLocaly - fcy) * t2 > radius)
        return;
      manifold.set$pointCount(1);
      t2 = $.getInterceptor$x(manifold);
      t2.set$type(manifold, 1);
      t3 = manifold.get$localNormal();
      t4 = normals[normalIndex];
      t3 = t3._f;
      t5 = t4.get$_f();
      if (0 >= t5.length)
        throw $.ioore(0);
      t5 = t5[0];
      t6 = t3.length;
      if (0 >= t6)
        throw $.ioore(0);
      t3[0] = t5;
      t4 = t4.get$_f();
      if (1 >= t4.length)
        throw $.ioore(1);
      t4 = t4[1];
      if (1 >= t6)
        throw $.ioore(1);
      t3[1] = t4;
      t4 = manifold.get$localPoint()._f;
      if (0 >= t4.length)
        throw $.ioore(0);
      t4[0] = fcx;
      t4 = manifold.get$localPoint()._f;
      if (1 >= t4.length)
        throw $.ioore(1);
      t4[1] = fcy;
      t4 = $.$index$asx(t2.get$points(manifold), 0).get$localPoint();
      t4 = t4._f;
      t1 = t1.get$position(circle)._f;
      t3 = t1.length;
      if (0 >= t3)
        throw $.ioore(0);
      t6 = t1[0];
      t5 = t4.length;
      if (0 >= t5)
        throw $.ioore(0);
      t4[0] = t6;
      if (1 >= t3)
        throw $.ioore(1);
      t1 = t1[1];
      if (1 >= t5)
        throw $.ioore(1);
      t4[1] = t1;
      $.get$id$x($.$index$asx(t2.get$points(manifold), 0)).zero$0();
    }
  },
  edgeSeparation$5: function(poly1, xf1, edge1, poly2, xf2) {
    var vertices1, normals1, count2, vertices2, R, v, t1, t2, t3, t4, t5, t6, t7, normal1Worldy, normal1Worldx, R1, normal1x, normal1y, index, minDot, i, a, dot, v3, t8, t9, t10, t11, t12, t13, v4, t14, t15, t16, t17, t18, t19, t20;
    poly1.get$vertexCount();
    vertices1 = poly1.get$vertices();
    normals1 = poly1.get$normals();
    count2 = poly2.get$vertexCount();
    vertices2 = poly2.get$vertices();
    R = xf1.rotation;
    if (edge1 < 0 || edge1 >= normals1.length)
      throw $.ioore(edge1);
    v = normals1[edge1];
    t1 = R.col1._f;
    if (1 >= t1.length)
      throw $.ioore(1);
    t2 = t1[1];
    t3 = $.getInterceptor$x(v);
    t4 = t3.get$x(v);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t5 = R.col2._f;
    if (1 >= t5.length)
      throw $.ioore(1);
    t6 = t5[1];
    t7 = t3.get$y(v);
    if (typeof t7 !== "number")
      throw $.iae(t7);
    normal1Worldy = t2 * t4 + t6 * t7;
    if (0 >= t1.length)
      throw $.ioore(0);
    t7 = t1[0];
    t6 = t3.get$x(v);
    if (typeof t6 !== "number")
      throw $.iae(t6);
    if (0 >= t5.length)
      throw $.ioore(0);
    t4 = t5[0];
    t3 = t3.get$y(v);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    normal1Worldx = t7 * t6 + t4 * t3;
    R1 = xf2.rotation;
    t3 = R1.col1._f;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t6 = t3[0];
    if (1 >= t4)
      throw $.ioore(1);
    normal1x = normal1Worldx * t6 + normal1Worldy * t3[1];
    t6 = R1.col2._f;
    t4 = t6.length;
    if (0 >= t4)
      throw $.ioore(0);
    t7 = t6[0];
    if (1 >= t4)
      throw $.ioore(1);
    normal1y = normal1Worldx * t7 + normal1Worldy * t6[1];
    for (t2 = vertices2.length, index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      a = vertices2[i];
      t4 = $.getInterceptor$x(a);
      t7 = t4.get$x(a);
      if (typeof t7 !== "number")
        return this.edgeSeparation$5$bailout(1, t5, xf1, edge1, normal1Worldy, xf2, index, minDot, i, normal1x, vertices2, normal1y, vertices1, a, t4, t7, t6, t3, normal1Worldx, count2, t1, t2);
      t7 *= normal1x;
      t4 = t4.get$y(a);
      if (typeof t4 !== "number")
        return this.edgeSeparation$5$bailout(2, t5, xf1, edge1, normal1Worldy, xf2, index, minDot, i, normal1x, vertices2, normal1y, vertices1, 0, t4, t7, t6, t3, normal1Worldx, count2, t1, t2);
      dot = t7 + t4 * normal1y;
      if (dot < minDot) {
        minDot = dot;
        index = i;
      }
    }
    if (edge1 >= vertices1.length)
      throw $.ioore(edge1);
    v3 = vertices1[edge1];
    t4 = xf1.position._f;
    if (1 >= t4.length)
      throw $.ioore(1);
    t7 = t4[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t8 = t1[1];
    t9 = $.getInterceptor$x(v3);
    t10 = t9.get$x(v3);
    if (typeof t10 !== "number")
      throw $.iae(t10);
    if (1 >= t5.length)
      throw $.ioore(1);
    t11 = t5[1];
    t12 = t9.get$y(v3);
    if (typeof t12 !== "number")
      throw $.iae(t12);
    if (0 >= t4.length)
      throw $.ioore(0);
    t4 = t4[0];
    if (0 >= t1.length)
      throw $.ioore(0);
    t1 = t1[0];
    t13 = t9.get$x(v3);
    if (typeof t13 !== "number")
      throw $.iae(t13);
    if (0 >= t5.length)
      throw $.ioore(0);
    t5 = t5[0];
    t9 = t9.get$y(v3);
    if (typeof t9 !== "number")
      throw $.iae(t9);
    if (index < 0 || index >= t2)
      throw $.ioore(index);
    v4 = vertices2[index];
    t2 = xf2.position._f;
    if (1 >= t2.length)
      throw $.ioore(1);
    t14 = t2[1];
    if (1 >= t3.length)
      throw $.ioore(1);
    t15 = t3[1];
    t16 = $.getInterceptor$x(v4);
    t17 = t16.get$x(v4);
    if (typeof t17 !== "number")
      throw $.iae(t17);
    if (1 >= t6.length)
      throw $.ioore(1);
    t18 = t6[1];
    t19 = t16.get$y(v4);
    if (typeof t19 !== "number")
      throw $.iae(t19);
    if (0 >= t2.length)
      throw $.ioore(0);
    t2 = t2[0];
    if (0 >= t3.length)
      throw $.ioore(0);
    t3 = t3[0];
    t20 = t16.get$x(v4);
    if (typeof t20 !== "number")
      throw $.iae(t20);
    if (0 >= t6.length)
      throw $.ioore(0);
    t6 = t6[0];
    t16 = t16.get$y(v4);
    if (typeof t16 !== "number")
      throw $.iae(t16);
    return (t2 + t3 * t20 + t6 * t16 - (t4 + t1 * t13 + t5 * t9)) * normal1Worldx + (t14 + t15 * t17 + t18 * t19 - (t7 + t8 * t10 + t11 * t12)) * normal1Worldy;
  },
  edgeSeparation$5$bailout: function(state0, t5, xf1, edge1, normal1Worldy, xf2, index, minDot, i, normal1x, vertices2, normal1y, vertices1, a, t4, t7, t6, t3, normal1Worldx, count2, t1, t2) {
    switch (state0) {
      case 0:
        poly1.get$vertexCount();
        vertices1 = poly1.get$vertices();
        normals1 = poly1.get$normals();
        count2 = poly2.get$vertexCount();
        vertices2 = poly2.get$vertices();
        R = xf1.rotation;
        if (edge1 < 0 || edge1 >= normals1.length)
          throw $.ioore(edge1);
        v = normals1[edge1];
        t1 = R.col1._f;
        if (1 >= t1.length)
          throw $.ioore(1);
        t2 = t1[1];
        t3 = $.getInterceptor$x(v);
        t4 = t3.get$x(v);
        if (typeof t4 !== "number")
          throw $.iae(t4);
        t5 = R.col2._f;
        if (1 >= t5.length)
          throw $.ioore(1);
        t6 = t5[1];
        t7 = t3.get$y(v);
        if (typeof t7 !== "number")
          throw $.iae(t7);
        normal1Worldy = t2 * t4 + t6 * t7;
        if (0 >= t1.length)
          throw $.ioore(0);
        t7 = t1[0];
        t6 = t3.get$x(v);
        if (typeof t6 !== "number")
          throw $.iae(t6);
        if (0 >= t5.length)
          throw $.ioore(0);
        t4 = t5[0];
        t3 = t3.get$y(v);
        if (typeof t3 !== "number")
          throw $.iae(t3);
        normal1Worldx = t7 * t6 + t4 * t3;
        R1 = xf2.rotation;
        t3 = R1.col1._f;
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t6 = t3[0];
        if (1 >= t4)
          throw $.ioore(1);
        normal1x = normal1Worldx * t6 + normal1Worldy * t3[1];
        t6 = R1.col2._f;
        t4 = t6.length;
        if (0 >= t4)
          throw $.ioore(0);
        t7 = t6[0];
        if (1 >= t4)
          throw $.ioore(1);
        normal1y = normal1Worldx * t7 + normal1Worldy * t6[1];
        t2 = vertices2.length;
        index = 0;
        minDot = 99999999999999;
        i = 0;
      default:
        var normals1, R, v, R1, dot, v3, t8, t9, t10, t11, t12, t13, v4, t14, t15, t16, t17, t18, t19, t20;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < count2))
                  break L0;
                if (i >= t2)
                  throw $.ioore(i);
                a = vertices2[i];
                t4 = $.getInterceptor$x(a);
                t7 = t4.get$x(a);
              case 1:
                state0 = 0;
                t7 = $.$mul$n(t7, normal1x);
                t4 = t4.get$y(a);
              case 2:
                state0 = 0;
                dot = $.$add$ns(t7, $.$mul$n(t4, normal1y));
                if ($.$lt$n(dot, minDot)) {
                  minDot = dot;
                  index = i;
                }
                ++i;
            }
        if (edge1 >= vertices1.length)
          throw $.ioore(edge1);
        v3 = vertices1[edge1];
        t4 = xf1.position._f;
        if (1 >= t4.length)
          throw $.ioore(1);
        t7 = t4[1];
        if (1 >= t1.length)
          throw $.ioore(1);
        t8 = t1[1];
        t9 = $.getInterceptor$x(v3);
        t10 = t9.get$x(v3);
        if (typeof t10 !== "number")
          throw $.iae(t10);
        if (1 >= t5.length)
          throw $.ioore(1);
        t11 = t5[1];
        t12 = t9.get$y(v3);
        if (typeof t12 !== "number")
          throw $.iae(t12);
        if (0 >= t4.length)
          throw $.ioore(0);
        t4 = t4[0];
        if (0 >= t1.length)
          throw $.ioore(0);
        t1 = t1[0];
        t13 = t9.get$x(v3);
        if (typeof t13 !== "number")
          throw $.iae(t13);
        if (0 >= t5.length)
          throw $.ioore(0);
        t5 = t5[0];
        t9 = t9.get$y(v3);
        if (typeof t9 !== "number")
          throw $.iae(t9);
        if (index < 0 || index >= t2)
          throw $.ioore(index);
        v4 = vertices2[index];
        t2 = xf2.position._f;
        if (1 >= t2.length)
          throw $.ioore(1);
        t14 = t2[1];
        if (1 >= t3.length)
          throw $.ioore(1);
        t15 = t3[1];
        t16 = $.getInterceptor$x(v4);
        t17 = t16.get$x(v4);
        if (typeof t17 !== "number")
          throw $.iae(t17);
        if (1 >= t6.length)
          throw $.ioore(1);
        t18 = t6[1];
        t19 = t16.get$y(v4);
        if (typeof t19 !== "number")
          throw $.iae(t19);
        if (0 >= t2.length)
          throw $.ioore(0);
        t2 = t2[0];
        if (0 >= t3.length)
          throw $.ioore(0);
        t3 = t3[0];
        t20 = t16.get$x(v4);
        if (typeof t20 !== "number")
          throw $.iae(t20);
        if (0 >= t6.length)
          throw $.ioore(0);
        t6 = t6[0];
        t16 = t16.get$y(v4);
        if (typeof t16 !== "number")
          throw $.iae(t16);
        return (t2 + t3 * t20 + t6 * t16 - (t4 + t1 * t13 + t5 * t9)) * normal1Worldx + (t14 + t15 * t17 + t18 * t19 - (t7 + t8 * t10 + t11 * t12)) * normal1Worldy;
    }
  },
  findMaxSeparation$5: function(results, poly1, xf1, poly2, xf2) {
    var count1, normals1, v, t1, t2, t3, t4, t5, t6, t7, t8, t9, v1, t10, t11, t12, t13, t14, t15, t16, t17, dx, dy, dLocal1x, dLocal1y, edge, maxDot, i, norm, dot, s, prevEdge, sPrev, nextEdge, sNext, bestSeparation, bestEdge, increment, edge0;
    count1 = poly1.get$vertexCount();
    normals1 = poly1.get$normals();
    v = poly2.get$centroid();
    t1 = xf2.position._f;
    if (1 >= t1.length)
      throw $.ioore(1);
    t2 = t1[1];
    t3 = xf2.rotation;
    t4 = t3.col1._f;
    if (1 >= t4.length)
      throw $.ioore(1);
    t5 = t4[1];
    t6 = v._f;
    t7 = t6.length;
    if (0 >= t7)
      throw $.ioore(0);
    t8 = t6[0];
    t3 = t3.col2._f;
    if (1 >= t3.length)
      throw $.ioore(1);
    t9 = t3[1];
    if (1 >= t7)
      throw $.ioore(1);
    t6 = t6[1];
    t1 = t1[0];
    t4 = t4[0];
    t3 = t3[0];
    v1 = poly1.get$centroid();
    t7 = xf1.position._f;
    if (1 >= t7.length)
      throw $.ioore(1);
    t10 = t7[1];
    t11 = xf1.rotation;
    t12 = t11.col1._f;
    if (1 >= t12.length)
      throw $.ioore(1);
    t13 = t12[1];
    t14 = v1._f;
    t15 = t14.length;
    if (0 >= t15)
      throw $.ioore(0);
    t16 = t14[0];
    t11 = t11.col2._f;
    if (1 >= t11.length)
      throw $.ioore(1);
    t17 = t11[1];
    if (1 >= t15)
      throw $.ioore(1);
    t14 = t14[1];
    t7 = t7[0];
    t12 = t12[0];
    t11 = t11[0];
    dx = t1 + t4 * t8 + t3 * t6 - (t7 + t12 * t16 + t11 * t14);
    dy = t2 + t5 * t8 + t9 * t6 - (t10 + t13 * t16 + t17 * t14);
    dLocal1x = dx * t12 + dy * t13;
    dLocal1y = dx * t11 + dy * t17;
    for (t1 = normals1.length, edge = 0, maxDot = 1e-12, i = 0; i < count1; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      norm = normals1[i];
      t2 = $.getInterceptor$x(norm);
      dot = $.$add$ns($.$mul$n(t2.get$x(norm), dLocal1x), $.$mul$n(t2.get$y(norm), dLocal1y));
      if ($.$gt$n(dot, maxDot)) {
        maxDot = dot;
        edge = i;
      }
    }
    s = this.edgeSeparation$5(poly1, xf1, edge, poly2, xf2);
    prevEdge = edge - 1;
    prevEdge = prevEdge >= 0 ? prevEdge : count1 - 1;
    sPrev = this.edgeSeparation$5(poly1, xf1, prevEdge, poly2, xf2);
    nextEdge = edge + 1;
    nextEdge = nextEdge < count1 ? nextEdge : 0;
    sNext = this.edgeSeparation$5(poly1, xf1, nextEdge, poly2, xf2);
    if (sPrev > s && sPrev > sNext) {
      bestSeparation = sPrev;
      bestEdge = prevEdge;
      increment = -1;
    } else {
      if (sNext > s)
        ;
      else {
        results.edgeIndex = edge;
        results.separation = s;
        return;
      }
      bestSeparation = sNext;
      bestEdge = nextEdge;
      increment = 1;
    }
    for (t1 = increment === -1, edge = count1 - 1; true; bestSeparation = s, bestEdge = edge0) {
      if (t1) {
        edge0 = bestEdge - 1;
        edge0 = edge0 >= 0 ? edge0 : edge;
      } else {
        edge0 = bestEdge + 1;
        edge0 = edge0 < count1 ? edge0 : 0;
      }
      s = this.edgeSeparation$5(poly1, xf1, edge0, poly2, xf2);
      if (s > bestSeparation)
        ;
      else
        break;
    }
    results.edgeIndex = bestEdge;
    results.separation = bestSeparation;
  },
  findIncidentEdge$6: function(c, poly1, xf1, edge1, poly2, xf2) {
    var normals1, count2, vertices2, normals2, t1, t2, index, minDot, i, t3, t4, t5, t6, t7, dot, i2;
    poly1.get$vertexCount();
    normals1 = poly1.get$normals();
    count2 = poly2.get$vertexCount();
    vertices2 = poly2.get$vertices();
    normals2 = poly2.get$normals();
    if (edge1 < 0 || edge1 >= normals1.length)
      throw $.ioore(edge1);
    t1 = this.normal1;
    $.Matrix22_mulMatrixAndVectorToOut(xf1.rotation, normals1[edge1], t1);
    $.Matrix22_mulTransMatrixAndVectorToOut(xf2.rotation, t1, t1);
    for (t2 = normals2.length, index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t3 = normals2[i];
      t4 = t1.get$x(t1);
      t5 = $.getInterceptor$x(t3);
      t6 = t5.get$x(t3);
      if (typeof t6 !== "number")
        throw $.iae(t6);
      t7 = t1.get$y(t1);
      t3 = t5.get$y(t3);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      dot = t4 * t6 + t7 * t3;
      if (dot < minDot) {
        minDot = dot;
        index = i;
      }
    }
    i2 = index + 1;
    i2 = i2 < count2 ? i2 : 0;
    t1 = vertices2.length;
    if (index < 0 || index >= t1)
      throw $.ioore(index);
    t2 = vertices2[index];
    t3 = c.length;
    if (0 >= t3)
      throw $.ioore(0);
    $.Transform_mulToOut(xf2, t2, c[0].get$v());
    $.get$id$x(c[0]).get$features().referenceEdge = edge1;
    $.get$id$x(c[0]).get$features().incidentEdge = index;
    $.get$id$x(c[0]).get$features().incidentVertex = 0;
    if (i2 < 0 || i2 >= t1)
      throw $.ioore(i2);
    t1 = vertices2[i2];
    if (1 >= t3)
      throw $.ioore(1);
    $.Transform_mulToOut(xf2, t1, c[1].get$v());
    $.get$id$x(c[1]).get$features().referenceEdge = edge1;
    $.get$id$x(c[1]).get$features().incidentEdge = i2;
    $.get$id$x(c[1]).get$features().incidentVertex = 1;
  },
  collidePolygons$5: function(manifold, polyA, xfA, polyB, xfB) {
    var totalRadius, t1, t2, t3, t4, edge1, xf2, xf1, poly2, poly1, flip, count1, vertices1, t5, t6, t7, t8, t9, t10, t11, frontOffset, t12, t13, t14, t15, np, pointCount, i, cp;
    manifold.set$pointCount(0);
    totalRadius = $.$add$ns(polyA.get$radius(), polyB.get$radius());
    t1 = this.results1;
    this.findMaxSeparation$5(t1, polyA, xfA, polyB, xfB);
    t2 = t1.separation;
    if (typeof totalRadius !== "number")
      throw $.iae(totalRadius);
    if (t2 > totalRadius)
      return;
    t2 = this.results2;
    this.findMaxSeparation$5(t2, polyB, xfB, polyA, xfA);
    t3 = t2.separation;
    if (t3 > totalRadius)
      return;
    t4 = $.getInterceptor$x(manifold);
    if (t3 > 0.98 * t1.separation + 0.001) {
      edge1 = t2.edgeIndex;
      t4.set$type(manifold, 2);
      xf2 = xfA;
      xf1 = xfB;
      poly2 = polyA;
      poly1 = polyB;
      flip = 1;
    } else {
      edge1 = t1.edgeIndex;
      t4.set$type(manifold, 1);
      xf2 = xfB;
      xf1 = xfA;
      poly2 = polyB;
      poly1 = polyA;
      flip = 0;
    }
    t1 = this.incidentEdge;
    this.findIncidentEdge$6(t1, poly1, xf1, edge1, poly2, xf2);
    count1 = poly1.get$vertexCount();
    vertices1 = poly1.get$vertices();
    t2 = this.v11;
    t3 = vertices1.length;
    if (edge1 < 0 || edge1 >= t3)
      throw $.ioore(edge1);
    t4 = vertices1[edge1];
    t5 = t2._f;
    t6 = t4.get$_f();
    if (0 >= t6.length)
      throw $.ioore(0);
    t6 = t6[0];
    t7 = t5.length;
    if (0 >= t7)
      throw $.ioore(0);
    t5[0] = t6;
    t4 = t4.get$_f();
    if (1 >= t4.length)
      throw $.ioore(1);
    t4 = t4[1];
    if (1 >= t7)
      throw $.ioore(1);
    t5[1] = t4;
    t4 = this.v12;
    t6 = edge1 + 1;
    if (t6 < count1) {
      if (t6 >= t3)
        throw $.ioore(t6);
      t3 = vertices1[t6];
    } else {
      if (0 >= t3)
        throw $.ioore(0);
      t3 = vertices1[0];
    }
    t6 = t4._f;
    t7 = t3.get$_f();
    if (0 >= t7.length)
      throw $.ioore(0);
    t7 = t7[0];
    t8 = t6.length;
    if (0 >= t8)
      throw $.ioore(0);
    t6[0] = t7;
    t3 = t3.get$_f();
    if (1 >= t3.length)
      throw $.ioore(1);
    t3 = t3[1];
    if (1 >= t8)
      throw $.ioore(1);
    t6[1] = t3;
    t3 = this.localTangent;
    t8 = t3._f;
    t7 = t6[0];
    t9 = t8.length;
    if (0 >= t9)
      throw $.ioore(0);
    t8[0] = t7;
    t7 = t6[1];
    if (1 >= t9)
      throw $.ioore(1);
    t8[1] = t7;
    t8[0] = t8[0] - t5[0];
    t8[1] = t8[1] - t5[1];
    t3.normalize$0();
    t8 = this.localNormal;
    $.Vector_crossVectorAndNumToOut(t3, 1, t8);
    t7 = this.planePoint._f;
    t9 = t5.length;
    if (0 >= t9)
      throw $.ioore(0);
    t10 = t5[0];
    t11 = t7.length;
    if (0 >= t11)
      throw $.ioore(0);
    t7[0] = t10;
    if (1 >= t9)
      throw $.ioore(1);
    t5 = t5[1];
    if (1 >= t11)
      throw $.ioore(1);
    t7[1] = t5;
    t5 = t7[0];
    t11 = t6.length;
    if (0 >= t11)
      throw $.ioore(0);
    t7[0] = t5 + t6[0];
    t5 = t7[1];
    if (1 >= t11)
      throw $.ioore(1);
    t7[1] = t5 + t6[1];
    t7[0] = t7[0] * 0.5;
    t7[1] = t7[1] * 0.5;
    t6 = this.tangent;
    $.Matrix22_mulMatrixAndVectorToOut(xf1.rotation, t3, t6);
    t3 = this.normal;
    $.Vector_crossVectorAndNumToOut(t6, 1, t3);
    $.Transform_mulToOut(xf1, t2, t2);
    $.Transform_mulToOut(xf1, t4, t4);
    frontOffset = t3.get$x(t3) * t2.get$x(t2) + t3.get$y(t3) * t2.get$y(t2);
    t5 = t6.get$x(t6);
    t11 = t2.get$x(t2);
    t9 = t6.get$y(t6);
    t2 = t2.get$y(t2);
    t10 = t6.get$x(t6);
    t12 = t4.get$x(t4);
    t13 = t6.get$y(t6);
    t4 = t4.get$y(t4);
    t14 = t6._f;
    t15 = t14.length;
    if (0 >= t15)
      throw $.ioore(0);
    t14[0] = -t14[0];
    if (1 >= t15)
      throw $.ioore(1);
    t14[1] = -t14[1];
    t15 = this.clipPoints1;
    np = $.Collision_clipSegmentToLine(t15, t1, t6, -(t5 * t11 + t9 * t2) + totalRadius);
    t2 = t14.length;
    if (0 >= t2)
      throw $.ioore(0);
    t14[0] = -t14[0];
    if (1 >= t2)
      throw $.ioore(1);
    t14[1] = -t14[1];
    if (np < 2)
      return;
    t1 = this.clipPoints2;
    if ($.Collision_clipSegmentToLine(t1, t15, t6, t10 * t12 + t13 * t4 + totalRadius) < 2)
      return;
    t2 = manifold.get$localNormal()._f;
    t8 = t8._f;
    t4 = t8.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t8[0];
    t6 = t2.length;
    if (0 >= t6)
      throw $.ioore(0);
    t2[0] = t5;
    if (1 >= t4)
      throw $.ioore(1);
    t8 = t8[1];
    if (1 >= t6)
      throw $.ioore(1);
    t2[1] = t8;
    t8 = manifold.get$localPoint()._f;
    t2 = t7.length;
    if (0 >= t2)
      throw $.ioore(0);
    t6 = t7[0];
    t4 = t8.length;
    if (0 >= t4)
      throw $.ioore(0);
    t8[0] = t6;
    if (1 >= t2)
      throw $.ioore(1);
    t7 = t7[1];
    if (1 >= t4)
      throw $.ioore(1);
    t8[1] = t7;
    for (t2 = $.getInterceptor$x(manifold), t4 = t1.length, pointCount = 0, i = 0; i < 2; ++i) {
      if (i >= t4)
        throw $.ioore(i);
      t5 = t1[i].v;
      if (t3.get$x(t3) * t5.get$x(t5) + t3.get$y(t3) * t5.get$y(t5) - frontOffset <= totalRadius) {
        cp = $.$index$asx(t2.get$points(manifold), pointCount);
        $.Transform_mulTransToOut(xf2, t1[i].v, cp.get$localPoint());
        t5 = $.getInterceptor$x(cp);
        t5.get$id(cp).setFrom$1(t1[i].id);
        t5.get$id(cp).get$features().flip = flip;
        ++pointCount;
      }
    }
    manifold.set$pointCount(pointCount);
  },
  Collision$_construct$1: function(pool) {
    var t1, t2, t3, t4, t5;
    t1 = this.incidentEdge;
    t2 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
    t3 = t2._f;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t3[0] = 0;
    if (1 >= t4)
      throw $.ioore(1);
    t3[1] = 0;
    t3 = t1.length;
    if (0 >= t3)
      throw $.ioore(0);
    t1[0] = new $.ClipVertex(t2, new $.ContactID(new $.Features(0, 0, 0, 0)));
    t2 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
    t4 = t2._f;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t4[0] = 0;
    if (1 >= t5)
      throw $.ioore(1);
    t4[1] = 0;
    if (1 >= t3)
      throw $.ioore(1);
    t1[1] = new $.ClipVertex(t2, new $.ContactID(new $.Features(0, 0, 0, 0)));
    t2 = this.clipPoints1;
    t1 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
    t3 = t1._f;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t3[0] = 0;
    if (1 >= t4)
      throw $.ioore(1);
    t3[1] = 0;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t2[0] = new $.ClipVertex(t1, new $.ContactID(new $.Features(0, 0, 0, 0)));
    t1 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
    t4 = t1._f;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t4[0] = 0;
    if (1 >= t5)
      throw $.ioore(1);
    t4[1] = 0;
    if (1 >= t3)
      throw $.ioore(1);
    t2[1] = new $.ClipVertex(t1, new $.ContactID(new $.Features(0, 0, 0, 0)));
    t1 = this.clipPoints2;
    t2 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
    t3 = t2._f;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t3[0] = 0;
    if (1 >= t4)
      throw $.ioore(1);
    t3[1] = 0;
    t3 = t1.length;
    if (0 >= t3)
      throw $.ioore(0);
    t1[0] = new $.ClipVertex(t2, new $.ContactID(new $.Features(0, 0, 0, 0)));
    t2 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
    t4 = t2._f;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t4[0] = 0;
    if (1 >= t5)
      throw $.ioore(1);
    t4[1] = 0;
    if (1 >= t3)
      throw $.ioore(1);
    t1[1] = new $.ClipVertex(t2, new $.ContactID(new $.Features(0, 0, 0, 0)));
  }
},

ClipVertex: {"": "Object;v<,id>",
  setFrom$1: function(cv) {
    var t1, t2, t3, t4, t5;
    t1 = this.v;
    t1 = t1._f;
    t2 = cv.get$v()._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t4;
    if (1 >= t3)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = this.id;
    t2 = t2.features;
    t1 = $.get$id$x(cv).get$features();
    t2.referenceEdge = t1.referenceEdge;
    t2.incidentEdge = t1.incidentEdge;
    t2.incidentVertex = t1.incidentVertex;
    t2.flip = t1.flip;
  }
},

EdgeResults: {"": "Object;separation,edgeIndex"},

ContactID: {"": "Object;features<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = other.get$features();
    return t1.$eq(t1, this.features);
  },
  setFrom$1: function(other) {
    var t1, t2;
    t1 = this.features;
    t2 = other.get$features();
    t1.referenceEdge = t2.referenceEdge;
    t1.incidentEdge = t2.incidentEdge;
    t1.incidentVertex = t2.incidentVertex;
    t1.flip = t2.flip;
  },
  isEqual$1: function(other) {
    var t1 = other.get$features();
    return t1.$eq(t1, this.features);
  },
  zero$0: function() {
    var t1 = this.features;
    t1.referenceEdge = 0;
    t1.incidentEdge = 0;
    t1.incidentVertex = 0;
    t1.flip = 0;
  }
},

Distance: {"": "Object;calls,iters,maxIters,simplex,saveA,saveB,closestPoint,searchDirection,temp,normal<",
  distance$3: function(output, cache, input) {
    var proxyA, proxyB, transformA, transformB, t1, vertices, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, iter, saveCount, i, t14, t15, vertex, t16, t17, t18, duplicate, rA, rB;
    this.calls = this.calls + 1;
    proxyA = input.get$proxyA();
    proxyB = input.get$proxyB();
    transformA = input.get$transformA();
    transformB = input.get$transformB();
    t1 = this.simplex;
    t1.readCache$5(cache, proxyA, transformA, proxyB, transformB);
    vertices = t1.vertices;
    t2 = this.closestPoint;
    t1.getClosestPoint$1(t2);
    t3 = t2._f;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    if (1 >= t4)
      throw $.ioore(1);
    for (t4 = this.saveB, t5 = t4.length, t6 = this.saveA, t7 = t6.length, t8 = vertices.length, t9 = transformA.rotation, t10 = this.searchDirection, t11 = t10._f, t12 = this.temp, t13 = transformB.rotation, iter = 0; iter < this.maxIters;) {
      saveCount = t1.count;
      if (typeof saveCount !== "number")
        throw $.iae(saveCount);
      i = 0;
      for (; i < saveCount; ++i) {
        if (i >= t8)
          throw $.ioore(i);
        t14 = vertices[i].get$indexA();
        if (i >= t7)
          throw $.ioore(i);
        t6[i] = t14;
        t14 = vertices[i].get$indexB();
        if (i >= t5)
          throw $.ioore(i);
        t4[i] = t14;
      }
      switch (saveCount) {
        case 1:
          break;
        case 2:
          t1.solve2$0();
          break;
        case 3:
          t1.solve3$0();
          break;
        default:
          return;
      }
      if ($.$eq(t1.count, 3))
        break;
      t1.getClosestPoint$1(t2);
      t14 = t3.length;
      if (0 >= t14)
        throw $.ioore(0);
      if (1 >= t14)
        throw $.ioore(1);
      t1.getSearchDirection$1(t10);
      t14 = t11.length;
      if (0 >= t14)
        throw $.ioore(0);
      t15 = t11[0];
      if (1 >= t14)
        throw $.ioore(1);
      t14 = t11[1];
      if (t15 * t15 + t14 * t14 < 1.4208639999999999e-14)
        break;
      t14 = t1.count;
      if (t14 >>> 0 !== t14 || t14 >= t8)
        throw $.ioore(t14);
      vertex = vertices[t14];
      t11[0] = -t15;
      t11[1] = -t11[1];
      $.Matrix22_mulTransMatrixAndVectorToOut(t9, t10, t12);
      vertex.set$indexA(proxyA.getSupport$1(t12));
      t15 = proxyA.get$vertices();
      t14 = vertex.get$indexA();
      if (t14 >>> 0 !== t14 || t14 >= t15.length)
        throw $.ioore(t14);
      $.Transform_mulToOut(transformA, t15[t14], vertex.get$wA());
      t14 = t11.length;
      if (0 >= t14)
        throw $.ioore(0);
      t11[0] = -t11[0];
      if (1 >= t14)
        throw $.ioore(1);
      t11[1] = -t11[1];
      $.Matrix22_mulTransMatrixAndVectorToOut(t13, t10, t12);
      vertex.set$indexB(proxyB.getSupport$1(t12));
      t14 = proxyB.get$vertices();
      t15 = vertex.get$indexB();
      if (t15 >>> 0 !== t15 || t15 >= t14.length)
        throw $.ioore(t15);
      $.Transform_mulToOut(transformB, t14[t15], vertex.get$wB());
      t15 = vertex.get$w();
      t15 = t15._f;
      t14 = vertex.get$wB()._f;
      t16 = t14.length;
      if (0 >= t16)
        throw $.ioore(0);
      t17 = t14[0];
      t18 = t15.length;
      if (0 >= t18)
        throw $.ioore(0);
      t15[0] = t17;
      if (1 >= t16)
        throw $.ioore(1);
      t14 = t14[1];
      if (1 >= t18)
        throw $.ioore(1);
      t15[1] = t14;
      t14 = vertex.get$wA();
      t18 = t15[0];
      t14 = t14._f;
      t16 = t14.length;
      if (0 >= t16)
        throw $.ioore(0);
      t15[0] = t18 - t14[0];
      t18 = t15[1];
      if (1 >= t16)
        throw $.ioore(1);
      t15[1] = t18 - t14[1];
      ++iter;
      this.iters = this.iters + 1;
      for (i = 0; duplicate = false, i < saveCount; ++i) {
        t14 = vertex.get$indexA();
        if (i >= t7)
          throw $.ioore(i);
        if ($.$eq(t14, t6[i])) {
          t14 = vertex.get$indexB();
          if (i >= t5)
            throw $.ioore(i);
          t14 = $.$eq(t14, t4[i]);
        } else
          t14 = false;
        if (t14) {
          duplicate = true;
          break;
        }
      }
      if (duplicate)
        break;
      t1.count = $.$add$ns(t1.count, 1);
    }
    this.maxIters = $.max(this.maxIters, iter);
    t1.getWitnessPoints$2(output.get$pointA(), output.get$pointB());
    t2 = $.MathBox_distanceSquared(output.get$pointA(), output.get$pointB());
    output.set$distance(Math.sqrt(t2));
    output.set$iterations(iter);
    t1.writeCache$1(cache);
    if (input.get$useRadii()) {
      rA = proxyA.get$radius();
      rB = proxyB.get$radius();
      t1 = output.get$distance();
      t2 = $.getInterceptor$ns(rA);
      t3 = t2.$add(rA, rB);
      if (typeof t1 !== "number")
        throw t1.$gt();
      if (typeof t3 !== "number")
        throw $.iae(t3);
      if (t1 > t3 && t1 > 1.192e-7) {
        t2 = t2.$add(rA, rB);
        if (typeof t2 !== "number")
          throw $.iae(t2);
        output.set$distance(t1 - t2);
        t2 = this.normal;
        t1 = t2._f;
        t3 = output.get$pointB()._f;
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t5 = t3[0];
        t6 = t1.length;
        if (0 >= t6)
          throw $.ioore(0);
        t1[0] = t5;
        if (1 >= t4)
          throw $.ioore(1);
        t3 = t3[1];
        if (1 >= t6)
          throw $.ioore(1);
        t1[1] = t3;
        t3 = output.get$pointA();
        t6 = t1[0];
        t3 = t3._f;
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t1[0] = t6 - t3[0];
        t6 = t1[1];
        if (1 >= t4)
          throw $.ioore(1);
        t1[1] = t6 - t3[1];
        t2.normalize$0();
        t12 = t12._f;
        t2 = t1.length;
        if (0 >= t2)
          throw $.ioore(0);
        t3 = t1[0];
        t6 = t12.length;
        if (0 >= t6)
          throw $.ioore(0);
        t12[0] = t3;
        if (1 >= t2)
          throw $.ioore(1);
        t2 = t1[1];
        if (1 >= t6)
          throw $.ioore(1);
        t12[1] = t2;
        t2 = t12[0];
        if (typeof rA !== "number")
          throw $.iae(rA);
        t12[0] = t2 * rA;
        t12[1] = t12[1] * rA;
        t2 = output.get$pointA()._f;
        t6 = t2.length;
        if (0 >= t6)
          throw $.ioore(0);
        t2[0] = t2[0] + t12[0];
        if (1 >= t6)
          throw $.ioore(1);
        t2[1] = t2[1] + t12[1];
        t12[0] = t1[0];
        t12[1] = t1[1];
        t1 = t12[0];
        if (typeof rB !== "number")
          throw $.iae(rB);
        t12[0] = t1 * rB;
        t12[1] = t12[1] * rB;
        t1 = output.get$pointB()._f;
        t2 = t1.length;
        if (0 >= t2)
          throw $.ioore(0);
        t1[0] = t1[0] - t12[0];
        if (1 >= t2)
          throw $.ioore(1);
        t1[1] = t1[1] - t12[1];
      } else {
        t1 = output.get$pointA();
        t2 = output.get$pointB();
        t1 = t1._f;
        t3 = t1.length;
        if (0 >= t3)
          throw $.ioore(0);
        t4 = t1[0];
        t2 = t2._f;
        t5 = t2.length;
        if (0 >= t5)
          throw $.ioore(0);
        t1[0] = t4 + t2[0];
        if (1 >= t3)
          throw $.ioore(1);
        t3 = t1[1];
        if (1 >= t5)
          throw $.ioore(1);
        t1[1] = t3 + t2[1];
        t1[0] = t1[0] * 0.5;
        t1[1] = t1[1] * 0.5;
        t1 = output.get$pointB();
        t1 = t1._f;
        t2 = output.get$pointA()._f;
        t3 = t2.length;
        if (0 >= t3)
          throw $.ioore(0);
        t5 = t2[0];
        t4 = t1.length;
        if (0 >= t4)
          throw $.ioore(0);
        t1[0] = t5;
        if (1 >= t3)
          throw $.ioore(1);
        t2 = t2[1];
        if (1 >= t4)
          throw $.ioore(1);
        t1[1] = t2;
        output.set$distance(0);
      }
    }
  },
  get$distance: function() {
    return new $.BoundClosure$3(this, "distance$3", null);
  }
},

DistanceInput: {"": "Object;proxyA@,proxyB@,transformA<,transformB<,useRadii<"},

DistanceOutput: {"": "Object;pointA<,pointB<,distance@,iterations?"},

DistanceProxy: {"": "Object;vertices<,count@,radius@",
  setFromShape$1: function(shape) {
    var t1, t2, i, t3, t4;
    t1 = $.getInterceptor$x(shape);
    t2 = t1.get$type(shape);
    if (typeof t2 !== "number")
      return this.setFromShape$1$bailout(1, shape, t1, t2);
    if (t2 === 0) {
      t2 = this.vertices;
      if (0 >= t2.length)
        throw $.ioore(0);
      t2[0].setFrom$1(t1.get$position(shape));
      this.count = 1;
      this.radius = shape.get$radius();
    } else if (t2 === 1) {
      this.count = shape.get$vertexCount();
      this.radius = shape.get$radius();
      t1 = this.vertices;
      t2 = t1.length;
      i = 0;
      while (true) {
        t3 = this.count;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        if (!(i < t3))
          break;
        if (i >= t2)
          throw $.ioore(i);
        t3 = t1[i];
        t4 = shape.get$vertices();
        if (i >= t4.length)
          throw $.ioore(i);
        t3.setFrom$1(t4[i]);
        ++i;
      }
    }
  },
  setFromShape$1$bailout: function(state0, shape, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$x(shape);
        t2 = t1.get$type(shape);
      case 1:
        state0 = 0;
      case 2:
        var i, t3, t4;
        if (state0 === 0 && $.$eq(t2, 0)) {
          t2 = this.vertices;
          if (0 >= t2.length)
            throw $.ioore(0);
          t2[0].setFrom$1(t1.get$position(shape));
          this.count = 1;
          this.radius = shape.get$radius();
        } else
          switch (state0) {
            case 0:
              t1 = t1.get$type(shape);
            case 2:
              state0 = 0;
              if ($.$eq(t1, 1)) {
                this.count = shape.get$vertexCount();
                this.radius = shape.get$radius();
                t1 = this.vertices;
                t2 = t1.length;
                i = 0;
                while (true) {
                  t3 = this.count;
                  if (typeof t3 !== "number")
                    throw $.iae(t3);
                  if (!(i < t3))
                    break;
                  if (i >= t2)
                    throw $.ioore(i);
                  t3 = t1[i];
                  t4 = shape.get$vertices();
                  if (i >= t4.length)
                    throw $.ioore(i);
                  t3.setFrom$1(t4[i]);
                  ++i;
                }
              }
          }
    }
  },
  getSupport$1: function(direction) {
    var t1, t2, t3, t4, bestValue, bestIndex, i, value;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = $.getInterceptor$x(t3);
    bestValue = $.$add$ns($.$mul$n(t4.get$x(t3), direction.get$x(direction)), $.$mul$n(t4.get$y(t3), direction.get$y(direction)));
    if (typeof bestValue !== "number")
      return this.getSupport$1$bailout(1, direction, t1, t2, bestValue);
    bestIndex = 0;
    i = 1;
    while (true) {
      t3 = this.count;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      if (!(i < t3))
        break;
      if (i >= t2)
        throw $.ioore(i);
      t3 = t1[i];
      t4 = $.getInterceptor$x(t3);
      value = $.$add$ns($.$mul$n(t4.get$x(t3), direction.get$x(direction)), $.$mul$n(t4.get$y(t3), direction.get$y(direction)));
      if ($.$gt$n(value, bestValue)) {
        bestValue = value;
        bestIndex = i;
      }
      ++i;
    }
    return bestIndex;
  },
  getSupport$1$bailout: function(state0, direction, t1, t2, bestValue) {
    var bestIndex, i, t3, t4, value;
    bestIndex = 0;
    i = 1;
    while (true) {
      t3 = this.count;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      if (!(i < t3))
        break;
      if (i >= t2)
        throw $.ioore(i);
      t3 = t1[i];
      t4 = $.getInterceptor$x(t3);
      value = $.$add$ns($.$mul$n(t4.get$x(t3), direction.get$x(direction)), $.$mul$n(t4.get$y(t3), direction.get$y(direction)));
      if ($.$gt$n(value, bestValue)) {
        bestValue = value;
        bestIndex = i;
      }
      ++i;
    }
    return bestIndex;
  },
  DistanceProxy$0: function() {
    var t1, t2, i, t3, t4, t5;
    for (t1 = this.vertices, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = new $.Vector(new Float64Array(2));
      t4 = t3._f;
      t5 = t4.length;
      if (0 >= t5)
        throw $.ioore(0);
      t4[0] = 0;
      if (1 >= t5)
        throw $.ioore(1);
      t4[1] = 0;
      t1[i] = t3;
    }
  }
},

Features: {"": "Object;referenceEdge<,incidentEdge<,incidentVertex<,flip<",
  setFrom$1: function(f) {
    this.referenceEdge = f.get$referenceEdge();
    this.incidentEdge = f.get$incidentEdge();
    this.incidentVertex = f.get$incidentVertex();
    this.flip = f.get$flip();
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return this.referenceEdge === other.get$referenceEdge() && this.incidentEdge === other.get$incidentEdge() && this.incidentVertex === other.get$incidentVertex() && this.flip === other.get$flip();
  },
  toString$0: function(_) {
    return "Features: (" + this.flip + ", " + $.S(this.incidentEdge) + ", " + this.incidentVertex + " " + this.referenceEdge + ")";
  }
},

Manifold: {"": "Object;points>,localNormal<,localPoint<,type*,pointCount@",
  setFrom$1: function(other) {
    var t1, t2, t3, i, t4, t5;
    t1 = this.points;
    t2 = t1.length;
    t3 = $.getInterceptor$x(other);
    i = 0;
    while (true) {
      t4 = other.get$pointCount();
      if (typeof t4 !== "number")
        throw $.iae(t4);
      if (!(i < t4))
        break;
      if (i >= t2)
        throw $.ioore(i);
      t1[i].setFrom$1($.$index$asx(t3.get$points(other), i));
      ++i;
    }
    this.type = t3.get$type(other);
    t1 = this.localNormal._f;
    t2 = other.get$localNormal()._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t4;
    if (1 >= t3)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = this.localPoint._f;
    t1 = other.get$localPoint()._f;
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = t2.length;
    if (0 >= t4)
      throw $.ioore(0);
    t2[0] = t3;
    if (1 >= t5)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t4)
      throw $.ioore(1);
    t2[1] = t1;
    this.pointCount = other.get$pointCount();
  },
  Manifold$0: function() {
    var t1, t2, i, t3, t4, t5;
    for (t1 = this.points, t2 = t1.length, i = 0; i < 2; ++i) {
      t3 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
      t4 = t3._f;
      t5 = t4.length;
      if (0 >= t5)
        throw $.ioore(0);
      t4[0] = 0;
      if (1 >= t5)
        throw $.ioore(1);
      t4[1] = 0;
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = new $.ManifoldPoint(t3, 0, 0, new $.ContactID(new $.Features(0, 0, 0, 0)));
    }
  }
},

ManifoldPoint: {"": "Object;localPoint<,normalImpulse@,tangentImpulse@,id>",
  setFrom$1: function(other) {
    var t1, t2, t3, t4, t5;
    t1 = this.localPoint._f;
    t2 = other.get$localPoint()._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t4;
    if (1 >= t3)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t2;
    this.normalImpulse = other.get$normalImpulse();
    this.tangentImpulse = other.get$tangentImpulse();
    t2 = this.id.features;
    t1 = $.get$id$x(other).get$features();
    t2.referenceEdge = t1.referenceEdge;
    t2.incidentEdge = t1.incidentEdge;
    t2.incidentVertex = t1.incidentVertex;
    t2.flip = t1.flip;
  }
},

CircleShape: {"": "Shape;position>,type,radius",
  computeAxisAlignedBox$2: function(argBox, argTransform) {
    var p, t1, t2, t3, t4, t5, t6;
    p = new $.Vector(new Float64Array(2));
    t1 = p._f;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = 0;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = 0;
    $.Matrix22_mulMatrixAndVectorToOut(argTransform.rotation, this.position, p);
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = argTransform.position._f;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t3 + t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t2 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t2 + t4[1];
    t4 = argBox.lowerBound;
    t2 = t1[0];
    t5 = this.radius;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t3 = t1[1];
    t4.setCoords$2;
    t4 = t4._f;
    t6 = t4.length;
    if (0 >= t6)
      throw $.ioore(0);
    t4[0] = t2 - t5;
    if (1 >= t6)
      throw $.ioore(1);
    t4[1] = t3 - t5;
    t3 = argBox.upperBound;
    t4 = t1[0];
    t1 = t1[1];
    t3.setCoords$2;
    t3 = t3._f;
    t6 = t3.length;
    if (0 >= t6)
      throw $.ioore(0);
    t3[0] = t4 + t5;
    if (1 >= t6)
      throw $.ioore(1);
    t3[1] = t1 + t5;
  },
  clone$0: function(_) {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    t1 = this.type;
    t2 = this.radius;
    t3 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
    t4 = t3._f;
    t5 = this.position._f;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7 = t5[0];
    t8 = t4.length;
    if (0 >= t8)
      throw $.ioore(0);
    t4[0] = t7;
    if (1 >= t6)
      throw $.ioore(1);
    t5 = t5[1];
    if (1 >= t8)
      throw $.ioore(1);
    t4[1] = t5;
    return new $.CircleShape(t3, t1, t2);
  },
  computeMass$2: function(massData, density) {
    var t1, t2, t3, t4, t5, t6;
    if (density == null)
      throw density.$mul();
    t1 = this.radius;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    massData.mass = density * 3.141592653589793 * t1 * t1;
    t1 = this.position;
    t2 = massData.center._f;
    t3 = t1._f;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t3[0];
    t6 = t2.length;
    if (0 >= t6)
      throw $.ioore(0);
    t2[0] = t5;
    if (1 >= t4)
      throw $.ioore(1);
    t3 = t3[1];
    if (1 >= t6)
      throw $.ioore(1);
    t2[1] = t3;
    t3 = massData.mass;
    t2 = this.radius;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    massData.inertia = $.$mul$n(t3, 0.5 * t2 * t2 + (t1.get$x(t1) * t1.get$x(t1) + t1.get$y(t1) * t1.get$y(t1)));
  }
},

MassData: {"": "Object;mass@,center<,inertia<",
  setFrom$1: function(md) {
    var t1, t2, t3, t4, t5;
    this.mass = md.get$mass();
    this.inertia = md.get$inertia();
    t1 = this.center;
    t1 = t1._f;
    t2 = md.get$center()._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t4;
    if (1 >= t3)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t2;
  }
},

PolygonShape: {"": "Shape;centroid<,vertices<,normals<,vertexCount<,type,radius",
  getSupport$1: function(d) {
    var t1, t2, t3, t4, bestValue, bestIndex, i, value;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = $.getInterceptor$x(t3);
    bestValue = $.$add$ns($.$mul$n(t4.get$x(t3), d.get$x(d)), $.$mul$n(t4.get$y(t3), d.get$y(d)));
    if (typeof bestValue !== "number")
      return this.getSupport$1$bailout(1, d, t2, t1, bestValue);
    for (bestIndex = 0, i = 1; i < this.vertexCount; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t3 = t1[i];
      t4 = $.getInterceptor$x(t3);
      value = $.$add$ns($.$mul$n(t4.get$x(t3), d.get$x(d)), $.$mul$n(t4.get$y(t3), d.get$y(d)));
      if ($.$gt$n(value, bestValue)) {
        bestValue = value;
        bestIndex = i;
      }
    }
    return bestIndex;
  },
  getSupport$1$bailout: function(state0, d, t2, t1, bestValue) {
    var bestIndex, i, t3, t4, value;
    for (bestIndex = 0, i = 1; i < this.vertexCount; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t3 = t1[i];
      t4 = $.getInterceptor$x(t3);
      value = $.$add$ns($.$mul$n(t4.get$x(t3), d.get$x(d)), $.$mul$n(t4.get$y(t3), d.get$y(d)));
      if ($.$gt$n(value, bestValue)) {
        bestValue = value;
        bestIndex = i;
      }
    }
    return bestIndex;
  },
  clone$0: function(_) {
    return $.PolygonShape$copy(this);
  },
  setAsBox$2: function(hx, hy) {
    var t1, t2, t3, t4;
    this.vertexCount = 4;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = -hx;
    t4 = -hy;
    t1[0].setCoords$2(t3, t4);
    if (1 >= t2)
      throw $.ioore(1);
    t1[1].setCoords$2(hx, t4);
    if (2 >= t2)
      throw $.ioore(2);
    t1[2].setCoords$2(hx, hy);
    if (3 >= t2)
      throw $.ioore(3);
    t1[3].setCoords$2(t3, hy);
    t3 = this.normals;
    t1 = t3.length;
    if (0 >= t1)
      throw $.ioore(0);
    t3[0].setCoords$2(0, -1);
    if (1 >= t1)
      throw $.ioore(1);
    t3[1].setCoords$2(1, 0);
    if (2 >= t1)
      throw $.ioore(2);
    t3[2].setCoords$2(0, 1);
    if (3 >= t1)
      throw $.ioore(3);
    t3[3].setCoords$2(-1, 0);
    t3 = this.centroid._f;
    if (1 >= t3.length)
      throw $.ioore(1);
    t3[1] = 0;
    t3[0] = 0;
  },
  computeAxisAlignedBox$2: function(argAabb, argXf) {
    var lower, t1, t2, upper, t3, v, t4, t5, t6, t7, i, t8;
    lower = new $.Vector(new Float64Array(2));
    t1 = lower._f;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = 0;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = 0;
    upper = new $.Vector(new Float64Array(2));
    t2 = upper._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t2[0] = 0;
    if (1 >= t3)
      throw $.ioore(1);
    t2[1] = 0;
    v = new $.Vector(new Float64Array(2));
    t3 = v._f;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t3[0] = 0;
    if (1 >= t4)
      throw $.ioore(1);
    t3[1] = 0;
    t3 = this.vertices;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    $.Transform_mulToOut(argXf, t3[0], lower);
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t1[0];
    t7 = t2.length;
    if (0 >= t7)
      throw $.ioore(0);
    t2[0] = t6;
    if (1 >= t5)
      throw $.ioore(1);
    t5 = t1[1];
    if (1 >= t7)
      throw $.ioore(1);
    t2[1] = t5;
    for (i = 1; i < this.vertexCount; ++i) {
      if (i >= t4)
        throw $.ioore(i);
      $.Transform_mulToOut(argXf, t3[i], v);
      $.Vector_minToOut(lower, v, lower);
      $.Vector_maxToOut(upper, v, upper);
    }
    t3 = argAabb.lowerBound;
    t4 = t1.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t1[0];
    t6 = this.radius;
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t3.set$x;
    t7 = t3._f;
    t8 = t7.length;
    if (0 >= t8)
      throw $.ioore(0);
    t7[0] = t5 - t6;
    if (1 >= t4)
      throw $.ioore(1);
    t1 = t1[1];
    t3.set$y;
    if (1 >= t8)
      throw $.ioore(1);
    t7[1] = t1 - t6;
    t1 = argAabb.upperBound;
    t7 = t2.length;
    if (0 >= t7)
      throw $.ioore(0);
    t8 = t2[0];
    t1.set$x;
    t3 = t1._f;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t3[0] = t8 + t6;
    if (1 >= t7)
      throw $.ioore(1);
    t2 = t2[1];
    t1.set$y;
    if (1 >= t4)
      throw $.ioore(1);
    t3[1] = t2 + t6;
  },
  computeMass$2: function(massData, density) {
    var t1, t2, t3, t4, t5, t6, area, I, i, t7, p2, p3, t8, D, triangleArea, t9, t10, t11, t12, t13, t14, px, py, ex1, ey1, ex2, ey2;
    if (this.vertexCount === 2) {
      t1 = massData.center;
      t2 = this.vertices;
      t3 = t2.length;
      if (0 >= t3)
        throw $.ioore(0);
      t4 = t2[0];
      t1 = t1._f;
      t5 = t4.get$_f();
      if (0 >= t5.length)
        throw $.ioore(0);
      t5 = t5[0];
      t6 = t1.length;
      if (0 >= t6)
        throw $.ioore(0);
      t1[0] = t5;
      t4 = t4.get$_f();
      if (1 >= t4.length)
        throw $.ioore(1);
      t4 = t4[1];
      if (1 >= t6)
        throw $.ioore(1);
      t1[1] = t4;
      if (1 >= t3)
        throw $.ioore(1);
      t2 = t2[1];
      t3 = t1[0];
      t4 = t2.get$_f();
      if (0 >= t4.length)
        throw $.ioore(0);
      t1[0] = t3 + t4[0];
      t4 = t1[1];
      t2 = t2.get$_f();
      if (1 >= t2.length)
        throw $.ioore(1);
      t1[1] = t4 + t2[1];
      t1[0] = t1[0] * 0.5;
      t1[1] = t1[1] * 0.5;
      massData.mass = 0;
      massData.inertia = 0;
      return;
    }
    t1 = new $.Vector(new Float64Array(2))._f;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = 0;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = 0;
    t1[1] = 0;
    t1[0] = 0;
    t2 = new $.Vector(new Float64Array(2))._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t2[0] = 0;
    if (1 >= t3)
      throw $.ioore(1);
    t2[1] = 0;
    t2[1] = 0;
    t2[0] = 0;
    t3 = new $.Vector(new Float64Array(2))._f;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t3[0] = 0;
    if (1 >= t4)
      throw $.ioore(1);
    t3[1] = 0;
    t4 = new $.Vector(new Float64Array(2))._f;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t4[0] = 0;
    if (1 >= t5)
      throw $.ioore(1);
    t4[1] = 0;
    for (t5 = this.vertices, t6 = t5.length, area = 0, I = 0, i = 0; t7 = this.vertexCount, i < t7;) {
      if (i >= t6)
        throw $.ioore(i);
      p2 = t5[i];
      ++i;
      if (i < t7) {
        if (i >= t6)
          throw $.ioore(i);
        p3 = t5[i];
      } else {
        if (0 >= t6)
          throw $.ioore(0);
        p3 = t5[0];
      }
      t7 = p2.get$_f();
      if (0 >= t7.length)
        throw $.ioore(0);
      t7 = t7[0];
      t8 = t3.length;
      if (0 >= t8)
        throw $.ioore(0);
      t3[0] = t7;
      t7 = p2.get$_f();
      if (1 >= t7.length)
        throw $.ioore(1);
      t7 = t7[1];
      if (1 >= t8)
        throw $.ioore(1);
      t3[1] = t7;
      t7 = t3[0];
      t8 = t2.length;
      if (0 >= t8)
        throw $.ioore(0);
      t3[0] = t7 - t2[0];
      t7 = t3[1];
      if (1 >= t8)
        throw $.ioore(1);
      t3[1] = t7 - t2[1];
      t7 = p3.get$_f();
      if (0 >= t7.length)
        throw $.ioore(0);
      t7 = t7[0];
      t8 = t4.length;
      if (0 >= t8)
        throw $.ioore(0);
      t4[0] = t7;
      t7 = p3.get$_f();
      if (1 >= t7.length)
        throw $.ioore(1);
      t7 = t7[1];
      if (1 >= t8)
        throw $.ioore(1);
      t4[1] = t7;
      t4[0] = t4[0] - t2[0];
      t4[1] = t4[1] - t2[1];
      D = t3[0] * t4[1] - t3[1] * t4[0];
      triangleArea = 0.5 * D;
      area += triangleArea;
      if (0 >= t1.length)
        throw $.ioore(0);
      t7 = t1[0];
      t8 = triangleArea * 0.3333333333333333;
      t9 = t2[0];
      t10 = $.getInterceptor$x(p2);
      t11 = t10.get$x(p2);
      if (typeof t11 !== "number")
        throw $.iae(t11);
      t12 = $.getInterceptor$x(p3);
      t13 = t12.get$x(p3);
      if (typeof t13 !== "number")
        throw $.iae(t13);
      t14 = t1.length;
      if (0 >= t14)
        throw $.ioore(0);
      t1[0] = t7 + t8 * (t9 + t11 + t13);
      if (1 >= t14)
        throw $.ioore(1);
      t14 = t1[1];
      if (1 >= t2.length)
        throw $.ioore(1);
      t13 = t2[1];
      t10 = t10.get$y(p2);
      if (typeof t10 !== "number")
        throw $.iae(t10);
      t12 = t12.get$y(p3);
      if (typeof t12 !== "number")
        throw $.iae(t12);
      if (1 >= t1.length)
        throw $.ioore(1);
      t1[1] = t14 + t8 * (t13 + t10 + t12);
      t12 = t2.length;
      if (0 >= t12)
        throw $.ioore(0);
      px = t2[0];
      if (1 >= t12)
        throw $.ioore(1);
      py = t2[1];
      t12 = t3.length;
      if (0 >= t12)
        throw $.ioore(0);
      ex1 = t3[0];
      if (1 >= t12)
        throw $.ioore(1);
      ey1 = t3[1];
      t12 = t4.length;
      if (0 >= t12)
        throw $.ioore(0);
      ex2 = t4[0];
      if (1 >= t12)
        throw $.ioore(1);
      ey2 = t4[1];
      I += D * (0.3333333333333333 * (0.25 * (ex1 * ex1 + ex2 * ex1 + ex2 * ex2) + (px * ex1 + px * ex2)) + 0.5 * px * px + (0.3333333333333333 * (0.25 * (ey1 * ey1 + ey2 * ey1 + ey2 * ey2) + (py * ey1 + py * ey2)) + 0.5 * py * py));
    }
    if (density == null)
      throw density.$mul();
    massData.mass = density * area;
    t2 = 1 / area;
    t3 = t1.length;
    if (0 >= t3)
      throw $.ioore(0);
    t1[0] = t1[0] * t2;
    if (1 >= t3)
      throw $.ioore(1);
    t1[1] = t1[1] * t2;
    t2 = massData.center._f;
    t3 = t1[0];
    t4 = t2.length;
    if (0 >= t4)
      throw $.ioore(0);
    t2[0] = t3;
    t1 = t1[1];
    if (1 >= t4)
      throw $.ioore(1);
    t2[1] = t1;
    massData.inertia = I * density;
  },
  PolygonShape$0: function() {
    var t1, t2, i, t3, t4, t5;
    for (t1 = this.vertices, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = new $.Vector(new Float64Array(2));
      t4 = t3._f;
      t5 = t4.length;
      if (0 >= t5)
        throw $.ioore(0);
      t4[0] = 0;
      if (1 >= t5)
        throw $.ioore(1);
      t4[1] = 0;
      t1[i] = t3;
    }
    for (t1 = this.normals, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = new $.Vector(new Float64Array(2));
      t4 = t3._f;
      t5 = t4.length;
      if (0 >= t5)
        throw $.ioore(0);
      t4[0] = 0;
      if (1 >= t5)
        throw $.ioore(1);
      t4[1] = 0;
      t1[i] = t3;
    }
  },
  PolygonShape$copy$1: function(other) {
    var t1, t2, t3, t4, i, t5, t6, t7, t8, t9;
    for (t1 = other.vertices, t2 = t1.length, t3 = this.vertices, t4 = t3.length, i = 0; i < t2; ++i) {
      t5 = t1[i];
      t6 = new $.Vector(new Float64Array(2));
      t7 = t6._f;
      t8 = t5.get$_f();
      if (0 >= t8.length)
        throw $.ioore(0);
      t8 = t8[0];
      t9 = t7.length;
      if (0 >= t9)
        throw $.ioore(0);
      t7[0] = t8;
      t5 = t5.get$_f();
      if (1 >= t5.length)
        throw $.ioore(1);
      t5 = t5[1];
      if (1 >= t9)
        throw $.ioore(1);
      t7[1] = t5;
      if (i >= t4)
        throw $.ioore(i);
      t3[i] = t6;
    }
    for (t1 = other.normals, t2 = t1.length, t3 = this.normals, t4 = t3.length, i = 0; i < t2; ++i) {
      t5 = t1[i];
      t6 = new $.Vector(new Float64Array(2));
      t7 = t6._f;
      t8 = t5.get$_f();
      if (0 >= t8.length)
        throw $.ioore(0);
      t8 = t8[0];
      t9 = t7.length;
      if (0 >= t9)
        throw $.ioore(0);
      t7[0] = t8;
      t5 = t5.get$_f();
      if (1 >= t5.length)
        throw $.ioore(1);
      t5 = t5[1];
      if (1 >= t9)
        throw $.ioore(1);
      t7[1] = t5;
      if (i >= t4)
        throw $.ioore(i);
      t3[i] = t6;
    }
  }
},

Shape: {"": "Object;type*,radius@"},

Simplex: {"": "Object;v1,v2,v3,vertices<,count@,e13,e23,e12,case2,case22,case3,case33",
  readCache$5: function(cache, proxyA, transformA, proxyB, transformB) {
    var t1, t2, i, t3, v, t4, wALocal, wBLocal, t5, t6, t7, metric1, metric2;
    this.count = cache.get$count();
    t1 = this.vertices;
    t2 = t1.length;
    i = 0;
    while (true) {
      t3 = this.count;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      if (!(i < t3))
        break;
      if (i >= t2)
        throw $.ioore(i);
      v = t1[i];
      v.set$indexA($.$index$asx(cache.get$indexA(), i));
      v.set$indexB($.$index$asx(cache.get$indexB(), i));
      t3 = proxyA.get$vertices();
      t4 = v.get$indexA();
      if (t4 >>> 0 !== t4 || t4 >= t3.length)
        throw $.ioore(t4);
      wALocal = t3[t4];
      t4 = proxyB.get$vertices();
      t3 = v.get$indexB();
      if (t3 >>> 0 !== t3 || t3 >= t4.length)
        throw $.ioore(t3);
      wBLocal = t4[t3];
      $.Transform_mulToOut(transformA, wALocal, v.get$wA());
      $.Transform_mulToOut(transformB, wBLocal, v.get$wB());
      t3 = v.get$w();
      t3 = t3._f;
      t4 = v.get$wB()._f;
      t5 = t4.length;
      if (0 >= t5)
        throw $.ioore(0);
      t6 = t4[0];
      t7 = t3.length;
      if (0 >= t7)
        throw $.ioore(0);
      t3[0] = t6;
      if (1 >= t5)
        throw $.ioore(1);
      t4 = t4[1];
      if (1 >= t7)
        throw $.ioore(1);
      t3[1] = t4;
      t4 = v.get$wA();
      t7 = t3[0];
      t4 = t4._f;
      t5 = t4.length;
      if (0 >= t5)
        throw $.ioore(0);
      t3[0] = t7 - t4[0];
      t7 = t3[1];
      if (1 >= t5)
        throw $.ioore(1);
      t3[1] = t7 - t4[1];
      v.set$a(0);
      ++i;
    }
    if (t3 > 1) {
      metric1 = cache.get$metric();
      metric2 = this.getMetric$0();
      if (metric2 < 0.5 * metric1 || 2 * metric1 < metric2 || metric2 < 1.192e-7)
        this.count = 0;
    }
    if ($.$eq(this.count, 0)) {
      if (0 >= t2)
        throw $.ioore(0);
      v = t1[0];
      v.set$indexA(0);
      v.set$indexB(0);
      t1 = proxyA.get$vertices();
      if (0 >= t1.length)
        throw $.ioore(0);
      wALocal = t1[0];
      t1 = proxyB.get$vertices();
      if (0 >= t1.length)
        throw $.ioore(0);
      wBLocal = t1[0];
      $.Transform_mulToOut(transformA, wALocal, v.get$wA());
      $.Transform_mulToOut(transformB, wBLocal, v.get$wB());
      t1 = v.get$w();
      t1 = t1._f;
      t2 = v.get$wB()._f;
      t3 = t2.length;
      if (0 >= t3)
        throw $.ioore(0);
      t4 = t2[0];
      t5 = t1.length;
      if (0 >= t5)
        throw $.ioore(0);
      t1[0] = t4;
      if (1 >= t3)
        throw $.ioore(1);
      t2 = t2[1];
      if (1 >= t5)
        throw $.ioore(1);
      t1[1] = t2;
      t2 = v.get$wA();
      t5 = t1[0];
      t2 = t2._f;
      t3 = t2.length;
      if (0 >= t3)
        throw $.ioore(0);
      t1[0] = t5 - t2[0];
      t5 = t1[1];
      if (1 >= t3)
        throw $.ioore(1);
      t1[1] = t5 - t2[1];
      this.count = 1;
    }
  },
  writeCache$1: function(cache) {
    var t1, t2, i, t3;
    cache.set$metric(this.getMetric$0());
    cache.set$count(this.count);
    t1 = this.vertices;
    t2 = t1.length;
    i = 0;
    while (true) {
      t3 = this.count;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      if (!(i < t3))
        break;
      t3 = cache.get$indexA();
      if (i >= t2)
        throw $.ioore(i);
      $.$indexSet$ax(t3, i, t1[i].get$indexA());
      $.$indexSet$ax(cache.get$indexB(), i, t1[i].get$indexB());
      ++i;
    }
  },
  getSearchDirection$1: function(out) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = out._f;
    switch (this.count) {
      case 1:
        t2 = this.v1.w._f;
        t3 = t2.length;
        if (0 >= t3)
          throw $.ioore(0);
        t4 = t2[0];
        t5 = t1.length;
        if (0 >= t5)
          throw $.ioore(0);
        t1[0] = t4;
        if (1 >= t3)
          throw $.ioore(1);
        t2 = t2[1];
        if (1 >= t5)
          throw $.ioore(1);
        t1[1] = t2;
        t1[0] = -t1[0];
        t1[1] = -t1[1];
        return;
      case 2:
        t2 = this.e12;
        t3 = t2._f;
        t4 = this.v2.w._f;
        t5 = t4.length;
        if (0 >= t5)
          throw $.ioore(0);
        t6 = t4[0];
        t7 = t3.length;
        if (0 >= t7)
          throw $.ioore(0);
        t3[0] = t6;
        if (1 >= t5)
          throw $.ioore(1);
        t4 = t4[1];
        if (1 >= t7)
          throw $.ioore(1);
        t3[1] = t4;
        t4 = t3[0];
        t7 = this.v1.w._f;
        t5 = t7.length;
        if (0 >= t5)
          throw $.ioore(0);
        t3[0] = t4 - t7[0];
        t4 = t3[1];
        if (1 >= t5)
          throw $.ioore(1);
        t3[1] = t4 - t7[1];
        t4 = t7[0];
        t5 = t1.length;
        if (0 >= t5)
          throw $.ioore(0);
        t1[0] = t4;
        t7 = t7[1];
        if (1 >= t5)
          throw $.ioore(1);
        t1[1] = t7;
        t1[0] = -t1[0];
        t1[1] = -t1[1];
        if (t3[0] * t1[1] - t3[1] * t1[0] > 0)
          $.Vector_crossNumAndVectorToOut(1, t2, out);
        else
          $.Vector_crossVectorAndNumToOut(t2, 1, out);
        break;
      default:
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = 0;
        t1[0] = 0;
        return;
    }
  },
  getClosestPoint$1: function(out) {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    t1 = out._f;
    switch (this.count) {
      case 0:
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = 0;
        t1[0] = 0;
        return;
      case 1:
        t2 = this.v1.w._f;
        t3 = t2.length;
        if (0 >= t3)
          throw $.ioore(0);
        t4 = t2[0];
        t5 = t1.length;
        if (0 >= t5)
          throw $.ioore(0);
        t1[0] = t4;
        if (1 >= t3)
          throw $.ioore(1);
        t2 = t2[1];
        if (1 >= t5)
          throw $.ioore(1);
        t1[1] = t2;
        return;
      case 2:
        t2 = this.v2;
        t3 = this.case22._f;
        t4 = t2.w._f;
        t5 = t4.length;
        if (0 >= t5)
          throw $.ioore(0);
        t6 = t4[0];
        t7 = t3.length;
        if (0 >= t7)
          throw $.ioore(0);
        t3[0] = t6;
        if (1 >= t5)
          throw $.ioore(1);
        t4 = t4[1];
        if (1 >= t7)
          throw $.ioore(1);
        t3[1] = t4;
        t2 = t2.a;
        t4 = t3[0];
        if (typeof t2 !== "number")
          throw $.iae(t2);
        t3[0] = t4 * t2;
        t3[1] = t3[1] * t2;
        t2 = this.v1;
        t4 = this.case2._f;
        t7 = t2.w._f;
        t5 = t7.length;
        if (0 >= t5)
          throw $.ioore(0);
        t6 = t7[0];
        t8 = t4.length;
        if (0 >= t8)
          throw $.ioore(0);
        t4[0] = t6;
        if (1 >= t5)
          throw $.ioore(1);
        t7 = t7[1];
        if (1 >= t8)
          throw $.ioore(1);
        t4[1] = t7;
        t2 = t2.a;
        t7 = t4[0];
        if (typeof t2 !== "number")
          throw $.iae(t2);
        t4[0] = t7 * t2;
        t4[1] = t4[1] * t2;
        t4[0] = t4[0] + t3[0];
        t4[1] = t4[1] + t3[1];
        t3 = t4[0];
        t2 = t1.length;
        if (0 >= t2)
          throw $.ioore(0);
        t1[0] = t3;
        t4 = t4[1];
        if (1 >= t2)
          throw $.ioore(1);
        t1[1] = t4;
        return;
      case 3:
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = 0;
        t1[0] = 0;
        return;
      default:
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = 0;
        t1[0] = 0;
        return;
    }
  },
  getWitnessPoints$2: function(pA, pB) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9;
    switch (this.count) {
      case 0:
        break;
      case 1:
        t1 = this.v1;
        t2 = pA._f;
        t3 = t1.wA._f;
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t5 = t3[0];
        t6 = t2.length;
        if (0 >= t6)
          throw $.ioore(0);
        t2[0] = t5;
        if (1 >= t4)
          throw $.ioore(1);
        t3 = t3[1];
        if (1 >= t6)
          throw $.ioore(1);
        t2[1] = t3;
        t3 = pB._f;
        t1 = t1.wB._f;
        t2 = t1.length;
        if (0 >= t2)
          throw $.ioore(0);
        t6 = t1[0];
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t3[0] = t6;
        if (1 >= t2)
          throw $.ioore(1);
        t1 = t1[1];
        if (1 >= t4)
          throw $.ioore(1);
        t3[1] = t1;
        break;
      case 2:
        t1 = this.v1;
        t2 = this.case2._f;
        t3 = t1.wA._f;
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t5 = t3[0];
        t6 = t2.length;
        if (0 >= t6)
          throw $.ioore(0);
        t2[0] = t5;
        if (1 >= t4)
          throw $.ioore(1);
        t3 = t3[1];
        if (1 >= t6)
          throw $.ioore(1);
        t2[1] = t3;
        t3 = t1.a;
        t6 = t2[0];
        if (typeof t3 !== "number")
          throw $.iae(t3);
        t2[0] = t6 * t3;
        t2[1] = t2[1] * t3;
        t6 = this.v2;
        t4 = pA._f;
        t5 = t6.wA._f;
        t7 = t5.length;
        if (0 >= t7)
          throw $.ioore(0);
        t8 = t5[0];
        t9 = t4.length;
        if (0 >= t9)
          throw $.ioore(0);
        t4[0] = t8;
        if (1 >= t7)
          throw $.ioore(1);
        t5 = t5[1];
        if (1 >= t9)
          throw $.ioore(1);
        t4[1] = t5;
        t5 = t6.a;
        t9 = t4[0];
        if (typeof t5 !== "number")
          throw $.iae(t5);
        t4[0] = t9 * t5;
        t4[1] = t4[1] * t5;
        t4[0] = t4[0] + t2[0];
        t4[1] = t4[1] + t2[1];
        t1 = t1.wB._f;
        t4 = t1.length;
        if (0 >= t4)
          throw $.ioore(0);
        t2[0] = t1[0];
        if (1 >= t4)
          throw $.ioore(1);
        t2[1] = t1[1];
        t2[0] = t2[0] * t3;
        t2[1] = t2[1] * t3;
        t3 = pB._f;
        t6 = t6.wB._f;
        t1 = t6.length;
        if (0 >= t1)
          throw $.ioore(0);
        t4 = t6[0];
        t9 = t3.length;
        if (0 >= t9)
          throw $.ioore(0);
        t3[0] = t4;
        if (1 >= t1)
          throw $.ioore(1);
        t6 = t6[1];
        if (1 >= t9)
          throw $.ioore(1);
        t3[1] = t6;
        t3[0] = t3[0] * t5;
        t3[1] = t3[1] * t5;
        t3[0] = t3[0] + t2[0];
        t3[1] = t3[1] + t2[1];
        break;
      case 3:
        t1 = this.v1;
        t2 = pA._f;
        t3 = t1.wA._f;
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t5 = t3[0];
        t6 = t2.length;
        if (0 >= t6)
          throw $.ioore(0);
        t2[0] = t5;
        if (1 >= t4)
          throw $.ioore(1);
        t3 = t3[1];
        if (1 >= t6)
          throw $.ioore(1);
        t2[1] = t3;
        t1 = t1.a;
        t3 = t2[0];
        if (typeof t1 !== "number")
          throw $.iae(t1);
        t2[0] = t3 * t1;
        t2[1] = t2[1] * t1;
        t1 = this.v2;
        t3 = this.case3._f;
        t6 = t1.wA._f;
        t4 = t6.length;
        if (0 >= t4)
          throw $.ioore(0);
        t5 = t6[0];
        t7 = t3.length;
        if (0 >= t7)
          throw $.ioore(0);
        t3[0] = t5;
        if (1 >= t4)
          throw $.ioore(1);
        t6 = t6[1];
        if (1 >= t7)
          throw $.ioore(1);
        t3[1] = t6;
        t1 = t1.a;
        t6 = t3[0];
        if (typeof t1 !== "number")
          throw $.iae(t1);
        t3[0] = t6 * t1;
        t3[1] = t3[1] * t1;
        t1 = this.v3;
        t6 = this.case33._f;
        t7 = t1.wA._f;
        t4 = t7.length;
        if (0 >= t4)
          throw $.ioore(0);
        t5 = t7[0];
        t8 = t6.length;
        if (0 >= t8)
          throw $.ioore(0);
        t6[0] = t5;
        if (1 >= t4)
          throw $.ioore(1);
        t7 = t7[1];
        if (1 >= t8)
          throw $.ioore(1);
        t6[1] = t7;
        t1 = t1.a;
        t7 = t6[0];
        if (typeof t1 !== "number")
          throw $.iae(t1);
        t6[0] = t7 * t1;
        t6[1] = t6[1] * t1;
        t2[0] = t2[0] + t3[0];
        t2[1] = t2[1] + t3[1];
        t2[0] = t2[0] + t6[0];
        t2[1] = t2[1] + t6[1];
        t6 = pB._f;
        t3 = t2[0];
        t1 = t6.length;
        if (0 >= t1)
          throw $.ioore(0);
        t6[0] = t3;
        t2 = t2[1];
        if (1 >= t1)
          throw $.ioore(1);
        t6[1] = t2;
        break;
      default:
        break;
    }
  },
  getMetric$0: function() {
    var t1, t2, t3, t4, t5, t6, t7;
    switch (this.count) {
      case 0:
        return 0;
      case 1:
        return 0;
      case 2:
        t1 = $.MathBox_distanceSquared(this.v1.w, this.v2.w);
        return Math.sqrt(t1);
      case 3:
        t1 = this.case3._f;
        t2 = this.v2.w._f;
        t3 = t2.length;
        if (0 >= t3)
          throw $.ioore(0);
        t4 = t2[0];
        t5 = t1.length;
        if (0 >= t5)
          throw $.ioore(0);
        t1[0] = t4;
        if (1 >= t3)
          throw $.ioore(1);
        t2 = t2[1];
        if (1 >= t5)
          throw $.ioore(1);
        t1[1] = t2;
        t2 = t1[0];
        t5 = this.v1.w._f;
        t3 = t5.length;
        if (0 >= t3)
          throw $.ioore(0);
        t1[0] = t2 - t5[0];
        t2 = t1[1];
        if (1 >= t3)
          throw $.ioore(1);
        t1[1] = t2 - t5[1];
        t2 = this.case33._f;
        t3 = this.v3.w._f;
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t6 = t3[0];
        t7 = t2.length;
        if (0 >= t7)
          throw $.ioore(0);
        t2[0] = t6;
        if (1 >= t4)
          throw $.ioore(1);
        t3 = t3[1];
        if (1 >= t7)
          throw $.ioore(1);
        t2[1] = t3;
        t2[0] = t2[0] - t5[0];
        t2[1] = t2[1] - t5[1];
        return t1[0] * t2[1] - t1[1] * t2[0];
      default:
        return 0;
    }
  },
  solve2$0: function() {
    var t1, w1, t2, w2, t3, t4, t5, t6, t7, t8, d12_2, d12_1, inv_d12;
    t1 = this.v1;
    w1 = t1.w;
    t2 = this.v2;
    w2 = t2.w;
    t3 = this.e12;
    t4 = t3._f;
    t5 = w2._f;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7 = t5[0];
    t8 = t4.length;
    if (0 >= t8)
      throw $.ioore(0);
    t4[0] = t7;
    if (1 >= t6)
      throw $.ioore(1);
    t5 = t5[1];
    if (1 >= t8)
      throw $.ioore(1);
    t4[1] = t5;
    t5 = t4[0];
    t8 = w1._f;
    t6 = t8.length;
    if (0 >= t6)
      throw $.ioore(0);
    t4[0] = t5 - t8[0];
    t5 = t4[1];
    if (1 >= t6)
      throw $.ioore(1);
    t4[1] = t5 - t8[1];
    d12_2 = -(w1.get$x(w1) * t3.get$x(t3) + w1.get$y(w1) * t3.get$y(t3));
    if (d12_2 <= 0) {
      t1.a = 1;
      this.count = 1;
      return;
    }
    d12_1 = w2.get$x(w2) * t3.get$x(t3) + w2.get$y(w2) * t3.get$y(t3);
    if (d12_1 <= 0) {
      t2.a = 1;
      this.count = 1;
      t1.setFrom$1(t2);
      return;
    }
    inv_d12 = 1 / (d12_1 + d12_2);
    t1.a = d12_1 * inv_d12;
    t2.a = d12_2 * inv_d12;
    this.count = 2;
  },
  solve3$0: function() {
    var t1, w1, t2, w2, t3, w3, t4, t5, t6, t7, t8, t9, w2e12, d12_2, t10, t11, t12, w3e13, d13_2, t13, w3e23, d23_2, n123, d123_1, d123_2, d123_3, inv_d12, inv_d13, inv_d23, inv_d123;
    t1 = this.v1;
    w1 = t1.w;
    t2 = this.v2;
    w2 = t2.w;
    t3 = this.v3;
    w3 = t3.w;
    t4 = this.e12;
    t5 = t4._f;
    t6 = w2._f;
    t7 = t6.length;
    if (0 >= t7)
      throw $.ioore(0);
    t8 = t6[0];
    t9 = t5.length;
    if (0 >= t9)
      throw $.ioore(0);
    t5[0] = t8;
    if (1 >= t7)
      throw $.ioore(1);
    t7 = t6[1];
    if (1 >= t9)
      throw $.ioore(1);
    t5[1] = t7;
    t7 = t5[0];
    t9 = w1._f;
    t8 = t9.length;
    if (0 >= t8)
      throw $.ioore(0);
    t5[0] = t7 - t9[0];
    t7 = t5[1];
    if (1 >= t8)
      throw $.ioore(1);
    t5[1] = t7 - t9[1];
    w2e12 = w2.get$x(w2) * t4.get$x(t4) + w2.get$y(w2) * t4.get$y(t4);
    d12_2 = -(w1.get$x(w1) * t4.get$x(t4) + w1.get$y(w1) * t4.get$y(t4));
    t4 = this.e13;
    t7 = t4._f;
    t8 = w3._f;
    t10 = t8.length;
    if (0 >= t10)
      throw $.ioore(0);
    t11 = t8[0];
    t12 = t7.length;
    if (0 >= t12)
      throw $.ioore(0);
    t7[0] = t11;
    if (1 >= t10)
      throw $.ioore(1);
    t10 = t8[1];
    if (1 >= t12)
      throw $.ioore(1);
    t7[1] = t10;
    t10 = t7[0];
    t12 = t9.length;
    if (0 >= t12)
      throw $.ioore(0);
    t7[0] = t10 - t9[0];
    t10 = t7[1];
    if (1 >= t12)
      throw $.ioore(1);
    t7[1] = t10 - t9[1];
    w3e13 = w3.get$x(w3) * t4.get$x(t4) + w3.get$y(w3) * t4.get$y(t4);
    d13_2 = -(w1.get$x(w1) * t4.get$x(t4) + w1.get$y(w1) * t4.get$y(t4));
    t4 = this.e23;
    t10 = t4._f;
    t12 = t8.length;
    if (0 >= t12)
      throw $.ioore(0);
    t11 = t8[0];
    t13 = t10.length;
    if (0 >= t13)
      throw $.ioore(0);
    t10[0] = t11;
    if (1 >= t12)
      throw $.ioore(1);
    t12 = t8[1];
    if (1 >= t13)
      throw $.ioore(1);
    t10[1] = t12;
    t12 = t10[0];
    t13 = t6.length;
    if (0 >= t13)
      throw $.ioore(0);
    t10[0] = t12 - t6[0];
    t12 = t10[1];
    if (1 >= t13)
      throw $.ioore(1);
    t10[1] = t12 - t6[1];
    w3e23 = w3.get$x(w3) * t4.get$x(t4) + w3.get$y(w3) * t4.get$y(t4);
    d23_2 = -(w2.get$x(w2) * t4.get$x(t4) + w2.get$y(w2) * t4.get$y(t4));
    t4 = t5.length;
    if (0 >= t4)
      throw $.ioore(0);
    t12 = t5[0];
    if (1 >= t7.length)
      throw $.ioore(1);
    t10 = t7[1];
    if (1 >= t4)
      throw $.ioore(1);
    n123 = t12 * t10 - t5[1] * t7[0];
    t7 = t6.length;
    if (0 >= t7)
      throw $.ioore(0);
    t5 = t6[0];
    if (1 >= t8.length)
      throw $.ioore(1);
    t10 = t8[1];
    if (1 >= t7)
      throw $.ioore(1);
    t6 = t6[1];
    t8 = t8[0];
    d123_1 = n123 * (t5 * t10 - t6 * t8);
    if (1 >= t9.length)
      throw $.ioore(1);
    t7 = t9[1];
    t9 = t9[0];
    d123_2 = n123 * (t8 * t7 - t10 * t9);
    d123_3 = n123 * (t9 * t6 - t7 * t5);
    if (d12_2 <= 0 && d13_2 <= 0) {
      t1.a = 1;
      this.count = 1;
      return;
    }
    if (w2e12 > 0 && d12_2 > 0 && d123_3 <= 0) {
      inv_d12 = 1 / (w2e12 + d12_2);
      t1.a = w2e12 * inv_d12;
      t2.a = d12_2 * inv_d12;
      this.count = 2;
      return;
    }
    if (w3e13 > 0 && d13_2 > 0 && d123_2 <= 0) {
      inv_d13 = 1 / (w3e13 + d13_2);
      t1.a = w3e13 * inv_d13;
      t3.a = d13_2 * inv_d13;
      this.count = 2;
      t2.setFrom$1(t3);
      return;
    }
    if (w2e12 <= 0 && d23_2 <= 0) {
      t2.a = 1;
      this.count = 1;
      t1.setFrom$1(t2);
      return;
    }
    if (w3e13 <= 0 && w3e23 <= 0) {
      t3.a = 1;
      this.count = 1;
      t1.setFrom$1(t3);
      return;
    }
    if (w3e23 > 0 && d23_2 > 0 && d123_1 <= 0) {
      inv_d23 = 1 / (w3e23 + d23_2);
      t2.a = w3e23 * inv_d23;
      t3.a = d23_2 * inv_d23;
      this.count = 2;
      t1.setFrom$1(t3);
      return;
    }
    inv_d123 = 1 / (d123_1 + d123_2 + d123_3);
    t1.a = d123_1 * inv_d123;
    t2.a = d123_2 * inv_d123;
    t3.a = d123_3 * inv_d123;
    this.count = 3;
  },
  Simplex$0: function() {
    var t1, t2;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = this.v1;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = this.v2;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = this.v3;
  }
},

SimplexCache: {"": "Object;metric@,count@,indexA<,indexB<",
  setFrom$1: function(sc) {
    var t1, t2;
    t1 = this.indexA;
    t2 = $.getInterceptor$asx(t1);
    t2.setRange$3(t1, 0, t2.get$length(t1), sc.get$indexA());
    t1 = this.indexB;
    t2 = $.getInterceptor$asx(t1);
    t2.setRange$3(t1, 0, t2.get$length(t1), sc.get$indexB());
    this.metric = sc.get$metric();
    this.count = sc.get$count();
  }
},

SimplexCache_closure: {"": "Closure;",
  call$1: function(i) {
    return 2147483647;
  }
},

SimplexCache_closure0: {"": "Closure;",
  call$1: function(i) {
    return 2147483647;
  }
},

SimplexVertex: {"": "Object;wA<,wB<,w<,a@,indexA@,indexB@",
  setFrom$1: function(sv) {
    var t1, t2, t3, t4, t5;
    t1 = this.wA._f;
    t2 = sv.get$wA()._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t4;
    if (1 >= t3)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = this.wB._f;
    t1 = sv.get$wB()._f;
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = t2.length;
    if (0 >= t4)
      throw $.ioore(0);
    t2[0] = t3;
    if (1 >= t5)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t4)
      throw $.ioore(1);
    t2[1] = t1;
    t1 = this.w._f;
    t2 = sv.get$w()._f;
    t4 = t2.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t2[0];
    t3 = t1.length;
    if (0 >= t3)
      throw $.ioore(0);
    t1[0] = t5;
    if (1 >= t4)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t3)
      throw $.ioore(1);
    t1[1] = t2;
    this.a = sv.get$a();
    this.indexA = sv.get$indexA();
    this.indexB = sv.get$indexB();
  },
  toString$0: function(_) {
    return "wA: " + $.S(this.wA) + ", wB: " + $.S(this.wB) + ", w: " + $.S(this.w);
  }
},

TimeOfImpact: {"": "Object;cache,distanceInput,xfA,xfB,distanceOutput,fcn,indexes,sweepA<,sweepB<,pool",
  timeOfImpact$2: function(output, input) {
    var t1, proxyA, proxyB, t2, t3, t4, truncated, d, tMax, t5, target, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, iter, t16, t20, pushBackIter, done, s2, s1, a2, a1, rootIterCount, t, s;
    t1 = $.TimeOfImpact_toiCalls;
    if (typeof t1 !== "number")
      return this.timeOfImpact$2$bailout(1, output, input, t1);
    $.TimeOfImpact_toiCalls = t1 + 1;
    t1 = $.getInterceptor$x(output);
    t1.set$state(output, 0);
    output.set$t(input.get$tMax());
    proxyA = input.get$proxyA();
    proxyB = input.get$proxyB();
    t2 = this.sweepA;
    t2.setFrom$1(input.get$sweepA());
    t3 = this.sweepB;
    t3.setFrom$1(input.get$sweepB());
    t4 = t2.angleZero;
    if (typeof t4 !== "number")
      throw t4.$div();
    t4 = Math.floor(t4 / 6.283185307179586);
    if (isNaN(t4))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t4 == Infinity || t4 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t4 < 0 ? $.JSNumber_methods.ceilToDouble$0(t4) : $.JSNumber_methods.floorToDouble$0(t4);
    d = 6.283185307179586 * (truncated == -0.0 ? 0 : truncated);
    t4 = t2.angleZero;
    if (typeof t4 !== "number")
      return this.timeOfImpact$2$bailout(2, output, input, t1, t4, d, t2, t3, proxyA, proxyB);
    t2.angleZero = t4 - d;
    t4 = t2.angle;
    if (typeof t4 !== "number")
      return this.timeOfImpact$2$bailout(3, output, input, t1, t4, d, t2, t3, proxyA, proxyB);
    t2.angle = t4 - d;
    t4 = t3.angleZero;
    if (typeof t4 !== "number")
      throw t4.$div();
    t4 = Math.floor(t4 / 6.283185307179586);
    if (isNaN(t4))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t4 == Infinity || t4 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t4 < 0 ? $.JSNumber_methods.ceilToDouble$0(t4) : $.JSNumber_methods.floorToDouble$0(t4);
    d = 6.283185307179586 * (truncated == -0.0 ? 0 : truncated);
    t4 = t3.angleZero;
    if (typeof t4 !== "number")
      return this.timeOfImpact$2$bailout(4, output, input, t1, t4, d, t2, t3, proxyA, proxyB);
    t3.angleZero = t4 - d;
    t4 = t3.angle;
    if (typeof t4 !== "number")
      return this.timeOfImpact$2$bailout(5, output, input, t1, t4, d, t2, t3, proxyA, proxyB);
    t3.angle = t4 - d;
    tMax = input.get$tMax();
    if (typeof tMax !== "number")
      return this.timeOfImpact$2$bailout(6, output, input, t1, 0, 0, t2, t3, proxyA, proxyB, tMax);
    t4 = proxyA.get$radius();
    if (typeof t4 !== "number")
      return this.timeOfImpact$2$bailout(7, output, input, t1, t4, 0, t2, t3, proxyA, proxyB, tMax);
    t5 = proxyB.get$radius();
    if (typeof t5 !== "number")
      return this.timeOfImpact$2$bailout(8, output, input, t1, t4, 0, t2, t3, proxyA, proxyB, tMax, t5);
    target = $.max(0.005, t4 + t5 - 0.015);
    t5 = this.cache;
    t5.count = 0;
    t4 = this.distanceInput;
    t4.proxyA = input.get$proxyA();
    t4.proxyB = input.get$proxyB();
    t4.useRadii = false;
    for (t6 = this.fcn, t7 = this.indexes, t8 = t7.length, t9 = target + 0.00125, t10 = target - 0.00125, t11 = this.distanceOutput, t12 = this.xfA, t13 = this.xfB, t14 = this.pool, t15 = 0, iter = 0; true;) {
      t2.getTransform$2(t12, t15);
      t3.getTransform$2(t13, t15);
      t4.transformA = t12;
      t4.transformB = t13;
      t14.distance.distance$3(t11, t5, t4);
      t16 = t11.distance;
      if (t16 == null)
        throw t16.$le();
      if (t16 <= 0) {
        t1.set$state(output, 2);
        output.set$t(0);
        break;
      }
      if (t16 < t9) {
        t1.set$state(output, 3);
        output.set$t(t15);
        break;
      }
      t6.initialize$6(t6, t5, proxyA, t2, proxyB, t3, t15);
      for (t20 = tMax, pushBackIter = 0; done = false, true;) {
        s2 = t6.findMinSeparation$2(t7, t20);
        if (typeof s2 !== "number")
          return this.timeOfImpact$2$bailout(9, output, 0, t1, t4, 0, t2, t3, proxyA, proxyB, tMax, t5, s2, t6, t7, t11, t12, t13, t8, t14, t15, iter, t10, t20, t9, pushBackIter, target);
        if (s2 > t9) {
          t1.set$state(output, 4);
          output.set$t(tMax);
          done = true;
          break;
        }
        if (s2 > t10) {
          t15 = t20;
          done = false;
          break;
        }
        if (0 >= t8)
          throw $.ioore(0);
        t16 = t7[0];
        if (1 >= t8)
          throw $.ioore(1);
        s1 = t6.evaluate$3(t16, t7[1], t15);
        if (typeof s1 !== "number")
          return this.timeOfImpact$2$bailout(10, output, 0, t1, t4, 0, t2, t3, proxyA, proxyB, tMax, t5, s2, t6, t7, t11, t12, t13, t8, t14, t15, iter, t10, t20, t9, pushBackIter, target, s1);
        if (s1 < t10) {
          t1.set$state(output, 1);
          output.set$t(t15);
          done = true;
          break;
        }
        if (s1 <= t9) {
          t1.set$state(output, 3);
          output.set$t(t15);
          done = true;
          break;
        }
        for (a2 = t20, a1 = t15, rootIterCount = 0; true;) {
          t = (rootIterCount & 1) === 1 ? a1 + (target - s1) * (a2 - a1) / (s2 - s1) : 0.5 * (a1 + a2);
          s = t6.evaluate$3(t7[0], t7[1], t);
          if (typeof s !== "number")
            return this.timeOfImpact$2$bailout(11, output, 0, t1, t4, 0, t2, t3, proxyA, proxyB, tMax, t5, s2, t6, t7, t11, t12, t13, t8, t14, t15, iter, t10, t20, t9, pushBackIter, target, s1, rootIterCount, a1, a2, t, s);
          if ($.JSNumber_methods.abs$0(s - target) < 0.00125) {
            t20 = t;
            break;
          }
          if (s > target) {
            a1 = t;
            s1 = s;
          } else {
            a2 = t;
            s2 = s;
          }
          ++rootIterCount;
          t16 = $.TimeOfImpact_toiRootIters;
          if (typeof t16 !== "number")
            return this.timeOfImpact$2$bailout(12, output, 0, t1, t4, 0, t2, t3, proxyA, proxyB, tMax, t5, s2, t6, t7, t11, t12, t13, t8, t14, t15, iter, t10, t20, t9, pushBackIter, target, s1, rootIterCount, a1, a2, 0, 0, t16);
          $.TimeOfImpact_toiRootIters = t16 + 1;
          if (rootIterCount === 50)
            break;
        }
        $.TimeOfImpact_toiMaxRootIters = $.max($.TimeOfImpact_toiMaxRootIters, rootIterCount);
        ++pushBackIter;
        if (pushBackIter === 8) {
          done = false;
          break;
        }
      }
      ++iter;
      t16 = $.TimeOfImpact_toiIters;
      if (typeof t16 !== "number")
        return this.timeOfImpact$2$bailout(13, output, 0, t1, t4, 0, t2, t3, proxyA, proxyB, tMax, t5, 0, t6, t7, t11, t12, t13, t8, t14, t15, iter, t10, 0, t9, 0, target, 0, 0, 0, 0, 0, 0, t16, done);
      $.TimeOfImpact_toiIters = t16 + 1;
      if (done)
        break;
      if (iter === 1000) {
        t1.set$state(output, 1);
        output.set$t(t15);
        break;
      }
    }
    $.TimeOfImpact_toiMaxIters = $.max($.TimeOfImpact_toiMaxIters, iter);
  },
  timeOfImpact$2$bailout: function(state0, output, input, t1, t4, d, t2, t3, proxyA, proxyB, tMax, t5, s2, t6, t7, t11, t12, t13, t8, t14, t15, iter, t10, t20, t9, pushBackIter, target, s1, rootIterCount, a1, a2, t, s, t16, done) {
    switch (state0) {
      case 0:
        t1 = $.TimeOfImpact_toiCalls;
      case 1:
        state0 = 0;
        $.TimeOfImpact_toiCalls = $.$add$ns(t1, 1);
        t1 = $.getInterceptor$x(output);
        t1.set$state(output, 0);
        output.set$t(input.get$tMax());
        proxyA = input.get$proxyA();
        proxyB = input.get$proxyB();
        t2 = this.sweepA;
        t2.setFrom$1(input.get$sweepA());
        t3 = this.sweepB;
        t3.setFrom$1(input.get$sweepB());
        t4 = t2.angleZero;
        if (typeof t4 !== "number")
          throw t4.$div();
        t4 = Math.floor(t4 / 6.283185307179586);
        if (isNaN(t4))
          $.throwExpression(new $.UnsupportedError("NaN"));
        if (t4 == Infinity || t4 == -Infinity)
          $.throwExpression(new $.UnsupportedError("Infinity"));
        truncated = t4 < 0 ? $.JSNumber_methods.ceilToDouble$0(t4) : $.JSNumber_methods.floorToDouble$0(t4);
        d = 6.283185307179586 * (truncated == -0.0 ? 0 : truncated);
        t4 = t2.angleZero;
      case 2:
        state0 = 0;
        t2.angleZero = $.$sub$n(t4, d);
        t4 = t2.angle;
      case 3:
        state0 = 0;
        t2.angle = $.$sub$n(t4, d);
        t4 = t3.angleZero;
        if (typeof t4 !== "number")
          throw t4.$div();
        t4 = Math.floor(t4 / 6.283185307179586);
        if (isNaN(t4))
          $.throwExpression(new $.UnsupportedError("NaN"));
        if (t4 == Infinity || t4 == -Infinity)
          $.throwExpression(new $.UnsupportedError("Infinity"));
        truncated = t4 < 0 ? $.JSNumber_methods.ceilToDouble$0(t4) : $.JSNumber_methods.floorToDouble$0(t4);
        d = 6.283185307179586 * (truncated == -0.0 ? 0 : truncated);
        t4 = t3.angleZero;
      case 4:
        state0 = 0;
        t3.angleZero = $.$sub$n(t4, d);
        t4 = t3.angle;
      case 5:
        state0 = 0;
        t3.angle = $.$sub$n(t4, d);
        tMax = input.get$tMax();
      case 6:
        state0 = 0;
        t4 = proxyA.get$radius();
      case 7:
        state0 = 0;
        t5 = proxyB.get$radius();
      case 8:
        state0 = 0;
        target = $.max(0.005, $.$sub$n($.$add$ns(t4, t5), 0.015));
        t5 = this.cache;
        t5.count = 0;
        t4 = this.distanceInput;
        t4.proxyA = input.get$proxyA();
        t4.proxyB = input.get$proxyB();
        t4.useRadii = false;
        t6 = this.fcn;
        t7 = this.indexes;
        t8 = t7.length;
        t9 = target + 0.00125;
        t10 = target - 0.00125;
        t11 = this.distanceOutput;
        t12 = this.xfA;
        t13 = this.xfB;
        t14 = this.pool;
        t15 = 0;
        iter = 0;
      default:
        var truncated, t17, t18;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!true)
                  break L0;
                t2.getTransform$2(t12, t15);
                t3.getTransform$2(t13, t15);
                t4.transformA = t12;
                t4.transformB = t13;
                t14.distance.distance$3(t11, t5, t4);
                t16 = t11.distance;
                if (t16 == null)
                  throw t16.$le();
                if (t16 <= 0) {
                  t1.set$state(output, 2);
                  output.set$t(0);
                  break L0;
                }
                if (t16 < t9) {
                  t1.set$state(output, 3);
                  output.set$t(t15);
                  break L0;
                }
                t6.initialize$6(t6, t5, proxyA, t2, proxyB, t3, t15);
                t20 = tMax;
                pushBackIter = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        done = false;
                        if (!true)
                          break L1;
                        s2 = t6.findMinSeparation$2(t7, t20);
                      case 9:
                        state0 = 0;
                        t16 = $.getInterceptor$n(s2);
                        if (t16.$gt(s2, t9)) {
                          t1.set$state(output, 4);
                          output.set$t(tMax);
                          done = true;
                          break L1;
                        }
                        if (t16.$gt(s2, t10)) {
                          t15 = t20;
                          done = false;
                          break L1;
                        }
                        if (0 >= t8)
                          throw $.ioore(0);
                        t16 = t7[0];
                        if (1 >= t8)
                          throw $.ioore(1);
                        s1 = t6.evaluate$3(t16, t7[1], t15);
                      case 10:
                        state0 = 0;
                        t16 = $.getInterceptor$n(s1);
                        if (t16.$lt(s1, t10)) {
                          t1.set$state(output, 1);
                          output.set$t(t15);
                          done = true;
                          break L1;
                        }
                        if (t16.$le(s1, t9)) {
                          t1.set$state(output, 3);
                          output.set$t(t15);
                          done = true;
                          break L1;
                        }
                        a2 = t20;
                        a1 = t15;
                        rootIterCount = 0;
                      default:
                        L2:
                          while (true)
                            switch (state0) {
                              case 0:
                                if (!true)
                                  break L2;
                                t16 = $.getInterceptor$ns(a1);
                                if ((rootIterCount & 1) === 1) {
                                  if (typeof s1 !== "number")
                                    throw $.iae(s1);
                                  t17 = $.$sub$n(a2, a1);
                                  if (typeof t17 !== "number")
                                    throw $.iae(t17);
                                  t18 = $.$sub$n(s2, s1);
                                  if (typeof t18 !== "number")
                                    throw $.iae(t18);
                                  t = t16.$add(a1, (target - s1) * t17 / t18);
                                } else {
                                  t16 = t16.$add(a1, a2);
                                  if (typeof t16 !== "number")
                                    throw $.iae(t16);
                                  t = 0.5 * t16;
                                }
                                s = t6.evaluate$3(t7[0], t7[1], t);
                              case 11:
                                state0 = 0;
                                t16 = $.getInterceptor$n(s);
                                if ($.abs$0$n(t16.$sub(s, target)) < 0.00125) {
                                  t20 = t;
                                  break L2;
                                }
                                if (t16.$gt(s, target)) {
                                  a1 = t;
                                  s1 = s;
                                } else {
                                  a2 = t;
                                  s2 = s;
                                }
                                ++rootIterCount;
                                t16 = $.TimeOfImpact_toiRootIters;
                              case 12:
                                state0 = 0;
                                $.TimeOfImpact_toiRootIters = $.$add$ns(t16, 1);
                                if (rootIterCount === 50)
                                  break L2;
                            }
                        $.TimeOfImpact_toiMaxRootIters = $.max($.TimeOfImpact_toiMaxRootIters, rootIterCount);
                        ++pushBackIter;
                        if (pushBackIter === 8) {
                          done = false;
                          break L1;
                        }
                    }
                ++iter;
                t16 = $.TimeOfImpact_toiIters;
              case 13:
                state0 = 0;
                $.TimeOfImpact_toiIters = $.$add$ns(t16, 1);
                if (done)
                  break L0;
                if (iter === 1000) {
                  t1.set$state(output, 1);
                  output.set$t(t15);
                  break L0;
                }
            }
        $.TimeOfImpact_toiMaxIters = $.max($.TimeOfImpact_toiMaxIters, iter);
    }
  },
  TimeOfImpact$_construct$1: function(argPool) {
    var t1, t2;
    t1 = this.indexes;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = 0;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = 0;
    $.TimeOfImpact_toiCalls = 0;
    $.TimeOfImpact_toiIters = 0;
    $.TimeOfImpact_toiMaxIters = 0;
    $.TimeOfImpact_toiRootIters = 0;
    $.TimeOfImpact_toiMaxRootIters = 0;
  }
},

SeparationFunction: {"": "Object;proxyA@,proxyB@,type*,localPoint<,axis,sweepA<,sweepB<,localPointA,localPointB,pointA<,pointB<,localPointA1,localPointA2,normal<,localPointB1,localPointB2,axisA,axisB,temp,xfa,xfb",
  initialize$6: function(_, cache, argProxyA, argSweepA, argProxyB, argSweepB, t1) {
    var count, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, s;
    this.proxyA = argProxyA;
    this.proxyB = argProxyB;
    count = cache.count;
    if (typeof count !== "number")
      return this.initialize$6$bailout(1, cache, count, argSweepA, argSweepB, t1);
    this.sweepA = argSweepA;
    this.sweepB = argSweepB;
    t2 = this.xfa;
    this.sweepA.getTransform$2(t2, t1);
    t3 = this.xfb;
    this.sweepB.getTransform$2(t3, t1);
    if (count === 1) {
      this.type = 0;
      t1 = this.localPointA;
      t4 = this.proxyA.get$vertices();
      t5 = cache.indexA;
      if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !$.isJsIndexable(t5, t5[$.dispatchPropertyName])))
        return this.initialize$6$bailout(2, cache, 0, 0, 0, t1, t4, t5, t2, t3);
      if (0 >= t5.length)
        throw $.ioore(0);
      t5 = t5[0];
      if (t5 >>> 0 !== t5 || t5 >= t4.length)
        throw $.ioore(t5);
      t5 = t4[t5];
      t4 = t1._f;
      t6 = t5.get$_f();
      if (0 >= t6.length)
        throw $.ioore(0);
      t6 = t6[0];
      t7 = t4.length;
      if (0 >= t7)
        throw $.ioore(0);
      t4[0] = t6;
      t5 = t5.get$_f();
      if (1 >= t5.length)
        throw $.ioore(1);
      t5 = t5[1];
      if (1 >= t7)
        throw $.ioore(1);
      t4[1] = t5;
      t5 = this.localPointB;
      t4 = this.proxyB.get$vertices();
      t7 = cache.indexB;
      if (typeof t7 !== "string" && (typeof t7 !== "object" || t7 === null || t7.constructor !== Array && !$.isJsIndexable(t7, t7[$.dispatchPropertyName])))
        return this.initialize$6$bailout(3, 0, 0, 0, 0, t1, t4, t5, t2, t3, t7);
      if (0 >= t7.length)
        throw $.ioore(0);
      t7 = t7[0];
      if (t7 >>> 0 !== t7 || t7 >= t4.length)
        throw $.ioore(t7);
      t7 = t4[t7];
      t4 = t5._f;
      t6 = t7.get$_f();
      if (0 >= t6.length)
        throw $.ioore(0);
      t6 = t6[0];
      t8 = t4.length;
      if (0 >= t8)
        throw $.ioore(0);
      t4[0] = t6;
      t7 = t7.get$_f();
      if (1 >= t7.length)
        throw $.ioore(1);
      t7 = t7[1];
      if (1 >= t8)
        throw $.ioore(1);
      t4[1] = t7;
      t7 = this.pointA;
      $.Transform_mulToOut(t2, t1, t7);
      t1 = this.pointB;
      $.Transform_mulToOut(t3, t5, t1);
      t5 = this.axis;
      t3 = t5._f;
      t1 = t1._f;
      t2 = t1.length;
      if (0 >= t2)
        throw $.ioore(0);
      t4 = t1[0];
      t8 = t3.length;
      if (0 >= t8)
        throw $.ioore(0);
      t3[0] = t4;
      if (1 >= t2)
        throw $.ioore(1);
      t1 = t1[1];
      if (1 >= t8)
        throw $.ioore(1);
      t3[1] = t1;
      t1 = t3[0];
      t7 = t7._f;
      t8 = t7.length;
      if (0 >= t8)
        throw $.ioore(0);
      t3[0] = t1 - t7[0];
      t1 = t3[1];
      if (1 >= t8)
        throw $.ioore(1);
      t3[1] = t1 - t7[1];
      return t5.normalize$0();
    } else {
      t1 = cache.indexA;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
        return this.initialize$6$bailout(4, cache, 0, 0, 0, t1, 0, 0, t2, t3);
      t4 = $.getInterceptor(t1);
      t5 = t1.length;
      if (0 >= t5)
        throw $.ioore(0);
      t6 = t1[0];
      if (1 >= t5)
        throw $.ioore(1);
      t6 = $.$eq(t6, t1[1]);
      t5 = cache.indexB;
      if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !$.isJsIndexable(t5, t5[$.dispatchPropertyName])))
        return this.initialize$6$bailout(5, 0, 0, 0, 0, t1, t4, t6, t2, t3, 0, t5);
      t4 = this.pointA;
      t7 = this.localPoint;
      t8 = this.normal;
      t9 = this.axis;
      t10 = this.pointB;
      t11 = this.temp;
      t12 = t7._f;
      t13 = t11._f;
      t14 = t10._f;
      t15 = t4._f;
      if (t6) {
        this.type = 2;
        t6 = this.proxyB;
        t16 = t6.get$vertices();
        t17 = t5.length;
        if (0 >= t17)
          throw $.ioore(0);
        t18 = t5[0];
        if (t18 >>> 0 !== t18 || t18 >= t16.length)
          throw $.ioore(t18);
        t18 = t16[t18];
        t16 = this.localPointB1._f;
        t19 = t18.get$_f();
        if (0 >= t19.length)
          throw $.ioore(0);
        t19 = t19[0];
        t20 = t16.length;
        if (0 >= t20)
          throw $.ioore(0);
        t16[0] = t19;
        t18 = t18.get$_f();
        if (1 >= t18.length)
          throw $.ioore(1);
        t18 = t18[1];
        if (1 >= t20)
          throw $.ioore(1);
        t16[1] = t18;
        t6 = t6.get$vertices();
        if (1 >= t17)
          throw $.ioore(1);
        t5 = t5[1];
        if (t5 >>> 0 !== t5 || t5 >= t6.length)
          throw $.ioore(t5);
        t5 = t6[t5];
        t6 = this.localPointB2._f;
        t17 = t5.get$_f();
        if (0 >= t17.length)
          throw $.ioore(0);
        t17 = t17[0];
        t18 = t6.length;
        if (0 >= t18)
          throw $.ioore(0);
        t6[0] = t17;
        t5 = t5.get$_f();
        if (1 >= t5.length)
          throw $.ioore(1);
        t5 = t5[1];
        if (1 >= t18)
          throw $.ioore(1);
        t6[1] = t5;
        t5 = t6[0];
        t18 = t13.length;
        if (0 >= t18)
          throw $.ioore(0);
        t13[0] = t5;
        t5 = t6[1];
        if (1 >= t18)
          throw $.ioore(1);
        t13[1] = t5;
        t13[0] = t13[0] - t16[0];
        t13[1] = t13[1] - t16[1];
        $.Vector_crossVectorAndNumToOut(t11, 1, t9);
        t9.normalize$0();
        $.Matrix22_mulMatrixAndVectorToOut(t3.rotation, t9, t8);
        t5 = t16.length;
        if (0 >= t5)
          throw $.ioore(0);
        t18 = t16[0];
        t17 = t12.length;
        if (0 >= t17)
          throw $.ioore(0);
        t12[0] = t18;
        if (1 >= t5)
          throw $.ioore(1);
        t16 = t16[1];
        if (1 >= t17)
          throw $.ioore(1);
        t12[1] = t16;
        t16 = t12[0];
        t17 = t6.length;
        if (0 >= t17)
          throw $.ioore(0);
        t12[0] = t16 + t6[0];
        t16 = t12[1];
        if (1 >= t17)
          throw $.ioore(1);
        t12[1] = t16 + t6[1];
        t12[0] = t12[0] * 0.5;
        t12[1] = t12[1] * 0.5;
        $.Transform_mulToOut(t3, t7, t10);
        t10 = this.localPointA;
        t7 = this.proxyA.get$vertices();
        if (0 >= t1.length)
          throw $.ioore(0);
        t1 = t1[0];
        if (t1 >>> 0 !== t1 || t1 >= t7.length)
          throw $.ioore(t1);
        t1 = t7[t1];
        t7 = t10._f;
        t3 = t1.get$_f();
        if (0 >= t3.length)
          throw $.ioore(0);
        t3 = t3[0];
        t12 = t7.length;
        if (0 >= t12)
          throw $.ioore(0);
        t7[0] = t3;
        t1 = t1.get$_f();
        if (1 >= t1.length)
          throw $.ioore(1);
        t1 = t1[1];
        if (1 >= t12)
          throw $.ioore(1);
        t7[1] = t1;
        $.Transform_mulToOut(t2, t10, t4);
        t4 = t15.length;
        if (0 >= t4)
          throw $.ioore(0);
        t10 = t15[0];
        t2 = t13.length;
        if (0 >= t2)
          throw $.ioore(0);
        t13[0] = t10;
        if (1 >= t4)
          throw $.ioore(1);
        t15 = t15[1];
        if (1 >= t2)
          throw $.ioore(1);
        t13[1] = t15;
        t15 = t13[0];
        t2 = t14.length;
        if (0 >= t2)
          throw $.ioore(0);
        t13[0] = t15 - t14[0];
        t15 = t13[1];
        if (1 >= t2)
          throw $.ioore(1);
        t13[1] = t15 - t14[1];
        s = t11.get$x(t11) * t8.get$x(t8) + t11.get$y(t11) * t8.get$y(t8);
        if (s < 0) {
          t1 = t9._f;
          t2 = t1.length;
          if (0 >= t2)
            throw $.ioore(0);
          t1[0] = -t1[0];
          if (1 >= t2)
            throw $.ioore(1);
          t1[1] = -t1[1];
          s = -s;
        }
        return s;
      } else {
        this.type = 1;
        t6 = this.proxyA;
        t16 = t6.get$vertices();
        t17 = t1.length;
        if (0 >= t17)
          throw $.ioore(0);
        t18 = t1[0];
        if (t18 >>> 0 !== t18 || t18 >= t16.length)
          throw $.ioore(t18);
        t18 = t16[t18];
        t16 = this.localPointA1._f;
        t19 = t18.get$_f();
        if (0 >= t19.length)
          throw $.ioore(0);
        t19 = t19[0];
        t20 = t16.length;
        if (0 >= t20)
          throw $.ioore(0);
        t16[0] = t19;
        t18 = t18.get$_f();
        if (1 >= t18.length)
          throw $.ioore(1);
        t18 = t18[1];
        if (1 >= t20)
          throw $.ioore(1);
        t16[1] = t18;
        t6 = t6.get$vertices();
        if (1 >= t17)
          throw $.ioore(1);
        t1 = t1[1];
        if (t1 >>> 0 !== t1 || t1 >= t6.length)
          throw $.ioore(t1);
        t1 = t6[t1];
        t6 = this.localPointA2._f;
        t17 = t1.get$_f();
        if (0 >= t17.length)
          throw $.ioore(0);
        t17 = t17[0];
        t18 = t6.length;
        if (0 >= t18)
          throw $.ioore(0);
        t6[0] = t17;
        t1 = t1.get$_f();
        if (1 >= t1.length)
          throw $.ioore(1);
        t1 = t1[1];
        if (1 >= t18)
          throw $.ioore(1);
        t6[1] = t1;
        t1 = t6[0];
        t18 = t13.length;
        if (0 >= t18)
          throw $.ioore(0);
        t13[0] = t1;
        t1 = t6[1];
        if (1 >= t18)
          throw $.ioore(1);
        t13[1] = t1;
        t13[0] = t13[0] - t16[0];
        t13[1] = t13[1] - t16[1];
        $.Vector_crossVectorAndNumToOut(t11, 1, t9);
        t9.normalize$0();
        $.Matrix22_mulMatrixAndVectorToOut(t2.rotation, t9, t8);
        t1 = t16.length;
        if (0 >= t1)
          throw $.ioore(0);
        t18 = t16[0];
        t17 = t12.length;
        if (0 >= t17)
          throw $.ioore(0);
        t12[0] = t18;
        if (1 >= t1)
          throw $.ioore(1);
        t16 = t16[1];
        if (1 >= t17)
          throw $.ioore(1);
        t12[1] = t16;
        t16 = t12[0];
        t17 = t6.length;
        if (0 >= t17)
          throw $.ioore(0);
        t12[0] = t16 + t6[0];
        t16 = t12[1];
        if (1 >= t17)
          throw $.ioore(1);
        t12[1] = t16 + t6[1];
        t12[0] = t12[0] * 0.5;
        t12[1] = t12[1] * 0.5;
        $.Transform_mulToOut(t2, t7, t4);
        t4 = this.localPointB;
        t7 = this.proxyB.get$vertices();
        if (0 >= t5.length)
          throw $.ioore(0);
        t5 = t5[0];
        if (t5 >>> 0 !== t5 || t5 >= t7.length)
          throw $.ioore(t5);
        t5 = t7[t5];
        t7 = t4._f;
        t2 = t5.get$_f();
        if (0 >= t2.length)
          throw $.ioore(0);
        t2 = t2[0];
        t12 = t7.length;
        if (0 >= t12)
          throw $.ioore(0);
        t7[0] = t2;
        t5 = t5.get$_f();
        if (1 >= t5.length)
          throw $.ioore(1);
        t5 = t5[1];
        if (1 >= t12)
          throw $.ioore(1);
        t7[1] = t5;
        $.Transform_mulToOut(t3, t4, t10);
        t10 = t14.length;
        if (0 >= t10)
          throw $.ioore(0);
        t4 = t14[0];
        t3 = t13.length;
        if (0 >= t3)
          throw $.ioore(0);
        t13[0] = t4;
        if (1 >= t10)
          throw $.ioore(1);
        t14 = t14[1];
        if (1 >= t3)
          throw $.ioore(1);
        t13[1] = t14;
        t14 = t13[0];
        t3 = t15.length;
        if (0 >= t3)
          throw $.ioore(0);
        t13[0] = t14 - t15[0];
        t14 = t13[1];
        if (1 >= t3)
          throw $.ioore(1);
        t13[1] = t14 - t15[1];
        s = t11.get$x(t11) * t8.get$x(t8) + t11.get$y(t11) * t8.get$y(t8);
        if (s < 0) {
          t1 = t9._f;
          t2 = t1.length;
          if (0 >= t2)
            throw $.ioore(0);
          t1[0] = -t1[0];
          if (1 >= t2)
            throw $.ioore(1);
          t1[1] = -t1[1];
          s = -s;
        }
        return s;
      }
    }
  },
  initialize$6$bailout: function(state0, cache, count, argSweepA, argSweepB, t1, t4, t5, t2, t3, t7, t6) {
    switch (state0) {
      case 0:
        this.proxyA = argProxyA;
        this.proxyB = argProxyB;
        count = cache.count;
      case 1:
        state0 = 0;
        this.sweepA = argSweepA;
        this.sweepB = argSweepB;
        t2 = this.xfa;
        this.sweepA.getTransform$2(t2, t1);
        t3 = this.xfb;
        this.sweepB.getTransform$2(t3, t1);
      default:
        var t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, s;
        if (state0 === 3 || state0 === 2 || state0 === 0 && $.$eq(count, 1))
          switch (state0) {
            case 0:
              this.type = 0;
              t1 = this.localPointA;
              t4 = this.proxyA.get$vertices();
              t5 = cache.indexA;
            case 2:
              state0 = 0;
              t5 = $.$index$asx(t5, 0);
              if (t5 >>> 0 !== t5 || t5 >= t4.length)
                throw $.ioore(t5);
              t5 = t4[t5];
              t4 = t1._f;
              t6 = t5.get$_f();
              if (0 >= t6.length)
                throw $.ioore(0);
              t6 = t6[0];
              t7 = t4.length;
              if (0 >= t7)
                throw $.ioore(0);
              t4[0] = t6;
              t5 = t5.get$_f();
              if (1 >= t5.length)
                throw $.ioore(1);
              t5 = t5[1];
              if (1 >= t7)
                throw $.ioore(1);
              t4[1] = t5;
              t5 = this.localPointB;
              t4 = this.proxyB.get$vertices();
              t7 = cache.indexB;
            case 3:
              state0 = 0;
              t7 = $.$index$asx(t7, 0);
              if (t7 >>> 0 !== t7 || t7 >= t4.length)
                throw $.ioore(t7);
              t7 = t4[t7];
              t4 = t5._f;
              t6 = t7.get$_f();
              if (0 >= t6.length)
                throw $.ioore(0);
              t6 = t6[0];
              t8 = t4.length;
              if (0 >= t8)
                throw $.ioore(0);
              t4[0] = t6;
              t7 = t7.get$_f();
              if (1 >= t7.length)
                throw $.ioore(1);
              t7 = t7[1];
              if (1 >= t8)
                throw $.ioore(1);
              t4[1] = t7;
              t7 = this.pointA;
              $.Transform_mulToOut(t2, t1, t7);
              t1 = this.pointB;
              $.Transform_mulToOut(t3, t5, t1);
              t5 = this.axis;
              t3 = t5._f;
              t1 = t1._f;
              t2 = t1.length;
              if (0 >= t2)
                throw $.ioore(0);
              t4 = t1[0];
              t8 = t3.length;
              if (0 >= t8)
                throw $.ioore(0);
              t3[0] = t4;
              if (1 >= t2)
                throw $.ioore(1);
              t1 = t1[1];
              if (1 >= t8)
                throw $.ioore(1);
              t3[1] = t1;
              t1 = t3[0];
              t7 = t7._f;
              t8 = t7.length;
              if (0 >= t8)
                throw $.ioore(0);
              t3[0] = t1 - t7[0];
              t1 = t3[1];
              if (1 >= t8)
                throw $.ioore(1);
              t3[1] = t1 - t7[1];
              return t5.normalize$0();
          }
        else
          switch (state0) {
            case 0:
              t1 = cache.indexA;
            case 4:
              state0 = 0;
              t4 = $.getInterceptor$asx(t1);
              t5 = $.$eq(t4.$index(t1, 0), t4.$index(t1, 1));
              t6 = cache.indexB;
            case 5:
              state0 = 0;
              t7 = this.pointA;
              t8 = this.localPoint;
              t9 = this.normal;
              t10 = this.axis;
              t11 = this.pointB;
              t12 = this.temp;
              if (t5) {
                this.type = 2;
                t5 = this.proxyB.get$vertices();
                t13 = $.getInterceptor$asx(t6);
                t14 = t13.$index(t6, 0);
                if (t14 >>> 0 !== t14 || t14 >= t5.length)
                  throw $.ioore(t14);
                t14 = t5[t14];
                t5 = this.localPointB1._f;
                t15 = t14.get$_f();
                if (0 >= t15.length)
                  throw $.ioore(0);
                t15 = t15[0];
                t16 = t5.length;
                if (0 >= t16)
                  throw $.ioore(0);
                t5[0] = t15;
                t14 = t14.get$_f();
                if (1 >= t14.length)
                  throw $.ioore(1);
                t14 = t14[1];
                if (1 >= t16)
                  throw $.ioore(1);
                t5[1] = t14;
                t14 = this.proxyB.get$vertices();
                t6 = t13.$index(t6, 1);
                if (t6 >>> 0 !== t6 || t6 >= t14.length)
                  throw $.ioore(t6);
                t6 = t14[t6];
                t14 = this.localPointB2._f;
                t13 = t6.get$_f();
                if (0 >= t13.length)
                  throw $.ioore(0);
                t13 = t13[0];
                t16 = t14.length;
                if (0 >= t16)
                  throw $.ioore(0);
                t14[0] = t13;
                t6 = t6.get$_f();
                if (1 >= t6.length)
                  throw $.ioore(1);
                t6 = t6[1];
                if (1 >= t16)
                  throw $.ioore(1);
                t14[1] = t6;
                t6 = t12._f;
                t16 = t14[0];
                t13 = t6.length;
                if (0 >= t13)
                  throw $.ioore(0);
                t6[0] = t16;
                t16 = t14[1];
                if (1 >= t13)
                  throw $.ioore(1);
                t6[1] = t16;
                t16 = t6[0];
                t13 = t5.length;
                if (0 >= t13)
                  throw $.ioore(0);
                t6[0] = t16 - t5[0];
                t16 = t6[1];
                if (1 >= t13)
                  throw $.ioore(1);
                t6[1] = t16 - t5[1];
                $.Vector_crossVectorAndNumToOut(t12, 1, t10);
                t10.normalize$0();
                $.Matrix22_mulMatrixAndVectorToOut(t3.rotation, t10, t9);
                t16 = t8._f;
                t13 = t5.length;
                if (0 >= t13)
                  throw $.ioore(0);
                t15 = t5[0];
                t17 = t16.length;
                if (0 >= t17)
                  throw $.ioore(0);
                t16[0] = t15;
                if (1 >= t13)
                  throw $.ioore(1);
                t5 = t5[1];
                if (1 >= t17)
                  throw $.ioore(1);
                t16[1] = t5;
                t5 = t16[0];
                t17 = t14.length;
                if (0 >= t17)
                  throw $.ioore(0);
                t16[0] = t5 + t14[0];
                t5 = t16[1];
                if (1 >= t17)
                  throw $.ioore(1);
                t16[1] = t5 + t14[1];
                t16[0] = t16[0] * 0.5;
                t16[1] = t16[1] * 0.5;
                $.Transform_mulToOut(t3, t8, t11);
                t8 = this.localPointA;
                t3 = this.proxyA.get$vertices();
                t1 = t4.$index(t1, 0);
                if (t1 >>> 0 !== t1 || t1 >= t3.length)
                  throw $.ioore(t1);
                t1 = t3[t1];
                t3 = t8._f;
                t4 = t1.get$_f();
                if (0 >= t4.length)
                  throw $.ioore(0);
                t4 = t4[0];
                t16 = t3.length;
                if (0 >= t16)
                  throw $.ioore(0);
                t3[0] = t4;
                t1 = t1.get$_f();
                if (1 >= t1.length)
                  throw $.ioore(1);
                t1 = t1[1];
                if (1 >= t16)
                  throw $.ioore(1);
                t3[1] = t1;
                $.Transform_mulToOut(t2, t8, t7);
                t7 = t7._f;
                t8 = t7.length;
                if (0 >= t8)
                  throw $.ioore(0);
                t2 = t7[0];
                t1 = t6.length;
                if (0 >= t1)
                  throw $.ioore(0);
                t6[0] = t2;
                if (1 >= t8)
                  throw $.ioore(1);
                t7 = t7[1];
                if (1 >= t1)
                  throw $.ioore(1);
                t6[1] = t7;
                t7 = t6[0];
                t11 = t11._f;
                t1 = t11.length;
                if (0 >= t1)
                  throw $.ioore(0);
                t6[0] = t7 - t11[0];
                t7 = t6[1];
                if (1 >= t1)
                  throw $.ioore(1);
                t6[1] = t7 - t11[1];
                s = t12.get$x(t12) * t9.get$x(t9) + t12.get$y(t12) * t9.get$y(t9);
                if (s < 0) {
                  t1 = t10._f;
                  t2 = t1.length;
                  if (0 >= t2)
                    throw $.ioore(0);
                  t1[0] = -t1[0];
                  if (1 >= t2)
                    throw $.ioore(1);
                  t1[1] = -t1[1];
                  s = -s;
                }
                return s;
              } else {
                this.type = 1;
                t5 = this.proxyA.get$vertices();
                t13 = t4.$index(t1, 0);
                if (t13 >>> 0 !== t13 || t13 >= t5.length)
                  throw $.ioore(t13);
                t13 = t5[t13];
                t5 = this.localPointA1._f;
                t14 = t13.get$_f();
                if (0 >= t14.length)
                  throw $.ioore(0);
                t14 = t14[0];
                t15 = t5.length;
                if (0 >= t15)
                  throw $.ioore(0);
                t5[0] = t14;
                t13 = t13.get$_f();
                if (1 >= t13.length)
                  throw $.ioore(1);
                t13 = t13[1];
                if (1 >= t15)
                  throw $.ioore(1);
                t5[1] = t13;
                t13 = this.proxyA.get$vertices();
                t1 = t4.$index(t1, 1);
                if (t1 >>> 0 !== t1 || t1 >= t13.length)
                  throw $.ioore(t1);
                t1 = t13[t1];
                t13 = this.localPointA2._f;
                t4 = t1.get$_f();
                if (0 >= t4.length)
                  throw $.ioore(0);
                t4 = t4[0];
                t15 = t13.length;
                if (0 >= t15)
                  throw $.ioore(0);
                t13[0] = t4;
                t1 = t1.get$_f();
                if (1 >= t1.length)
                  throw $.ioore(1);
                t1 = t1[1];
                if (1 >= t15)
                  throw $.ioore(1);
                t13[1] = t1;
                t1 = t12._f;
                t15 = t13[0];
                t4 = t1.length;
                if (0 >= t4)
                  throw $.ioore(0);
                t1[0] = t15;
                t15 = t13[1];
                if (1 >= t4)
                  throw $.ioore(1);
                t1[1] = t15;
                t15 = t1[0];
                t4 = t5.length;
                if (0 >= t4)
                  throw $.ioore(0);
                t1[0] = t15 - t5[0];
                t15 = t1[1];
                if (1 >= t4)
                  throw $.ioore(1);
                t1[1] = t15 - t5[1];
                $.Vector_crossVectorAndNumToOut(t12, 1, t10);
                t10.normalize$0();
                $.Matrix22_mulMatrixAndVectorToOut(t2.rotation, t10, t9);
                t15 = t8._f;
                t4 = t5.length;
                if (0 >= t4)
                  throw $.ioore(0);
                t14 = t5[0];
                t16 = t15.length;
                if (0 >= t16)
                  throw $.ioore(0);
                t15[0] = t14;
                if (1 >= t4)
                  throw $.ioore(1);
                t5 = t5[1];
                if (1 >= t16)
                  throw $.ioore(1);
                t15[1] = t5;
                t5 = t15[0];
                t16 = t13.length;
                if (0 >= t16)
                  throw $.ioore(0);
                t15[0] = t5 + t13[0];
                t5 = t15[1];
                if (1 >= t16)
                  throw $.ioore(1);
                t15[1] = t5 + t13[1];
                t15[0] = t15[0] * 0.5;
                t15[1] = t15[1] * 0.5;
                $.Transform_mulToOut(t2, t8, t7);
                t8 = this.localPointB;
                t2 = this.proxyB.get$vertices();
                t6 = $.$index$asx(t6, 0);
                if (t6 >>> 0 !== t6 || t6 >= t2.length)
                  throw $.ioore(t6);
                t6 = t2[t6];
                t2 = t8._f;
                t15 = t6.get$_f();
                if (0 >= t15.length)
                  throw $.ioore(0);
                t15 = t15[0];
                t13 = t2.length;
                if (0 >= t13)
                  throw $.ioore(0);
                t2[0] = t15;
                t6 = t6.get$_f();
                if (1 >= t6.length)
                  throw $.ioore(1);
                t6 = t6[1];
                if (1 >= t13)
                  throw $.ioore(1);
                t2[1] = t6;
                $.Transform_mulToOut(t3, t8, t11);
                t11 = t11._f;
                t8 = t11.length;
                if (0 >= t8)
                  throw $.ioore(0);
                t3 = t11[0];
                t6 = t1.length;
                if (0 >= t6)
                  throw $.ioore(0);
                t1[0] = t3;
                if (1 >= t8)
                  throw $.ioore(1);
                t11 = t11[1];
                if (1 >= t6)
                  throw $.ioore(1);
                t1[1] = t11;
                t11 = t1[0];
                t7 = t7._f;
                t6 = t7.length;
                if (0 >= t6)
                  throw $.ioore(0);
                t1[0] = t11 - t7[0];
                t11 = t1[1];
                if (1 >= t6)
                  throw $.ioore(1);
                t1[1] = t11 - t7[1];
                s = t12.get$x(t12) * t9.get$x(t9) + t12.get$y(t12) * t9.get$y(t9);
                if (s < 0) {
                  t1 = t10._f;
                  t2 = t1.length;
                  if (0 >= t2)
                    throw $.ioore(0);
                  t1[0] = -t1[0];
                  if (1 >= t2)
                    throw $.ioore(1);
                  t1[1] = -t1[1];
                  s = -s;
                }
                return s;
              }
          }
    }
  },
  findMinSeparation$2: function(indexes, t) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = this.xfa;
    this.sweepA.getTransform$2(t1, t);
    t2 = this.xfb;
    this.sweepB.getTransform$2(t2, t);
    t3 = indexes.length;
    switch (this.type) {
      case 0:
        t4 = this.axis;
        t5 = this.axisA;
        $.Matrix22_mulTransMatrixAndVectorToOut(t1.rotation, t4, t5);
        t6 = t4._f;
        t7 = t6.length;
        if (0 >= t7)
          throw $.ioore(0);
        t6[0] = -t6[0];
        if (1 >= t7)
          throw $.ioore(1);
        t6[1] = -t6[1];
        t7 = this.axisB;
        $.Matrix22_mulTransMatrixAndVectorToOut(t2.rotation, t4, t7);
        t8 = t6.length;
        if (0 >= t8)
          throw $.ioore(0);
        t6[0] = -t6[0];
        if (1 >= t8)
          throw $.ioore(1);
        t6[1] = -t6[1];
        t5 = this.proxyA.getSupport$1(t5);
        if (0 >= t3)
          throw $.ioore(0);
        indexes[0] = t5;
        t7 = this.proxyB.getSupport$1(t7);
        if (1 >= t3)
          throw $.ioore(1);
        indexes[1] = t7;
        t7 = this.localPointA;
        t3 = this.proxyA.get$vertices();
        t5 = indexes[0];
        if (t5 >>> 0 !== t5 || t5 >= t3.length)
          throw $.ioore(t5);
        t5 = t3[t5];
        t3 = t7._f;
        t6 = t5.get$_f();
        if (0 >= t6.length)
          throw $.ioore(0);
        t6 = t6[0];
        t8 = t3.length;
        if (0 >= t8)
          throw $.ioore(0);
        t3[0] = t6;
        t5 = t5.get$_f();
        if (1 >= t5.length)
          throw $.ioore(1);
        t5 = t5[1];
        if (1 >= t8)
          throw $.ioore(1);
        t3[1] = t5;
        t5 = this.localPointB;
        t3 = this.proxyB.get$vertices();
        t8 = indexes[1];
        if (t8 >>> 0 !== t8 || t8 >= t3.length)
          throw $.ioore(t8);
        t8 = t3[t8];
        t3 = t5._f;
        t6 = t8.get$_f();
        if (0 >= t6.length)
          throw $.ioore(0);
        t6 = t6[0];
        t9 = t3.length;
        if (0 >= t9)
          throw $.ioore(0);
        t3[0] = t6;
        t8 = t8.get$_f();
        if (1 >= t8.length)
          throw $.ioore(1);
        t8 = t8[1];
        if (1 >= t9)
          throw $.ioore(1);
        t3[1] = t8;
        t8 = this.pointA;
        $.Transform_mulToOut(t1, t7, t8);
        t7 = this.pointB;
        $.Transform_mulToOut(t2, t5, t7);
        t5 = t7._f;
        t2 = t5.length;
        if (0 >= t2)
          throw $.ioore(0);
        t1 = t5[0];
        t8 = t8._f;
        t3 = t8.length;
        if (0 >= t3)
          throw $.ioore(0);
        t5[0] = t1 - t8[0];
        if (1 >= t2)
          throw $.ioore(1);
        t2 = t5[1];
        if (1 >= t3)
          throw $.ioore(1);
        t5[1] = t2 - t8[1];
        return t7.get$x(t7) * t4.get$x(t4) + t7.get$y(t7) * t4.get$y(t4);
      case 1:
        t4 = this.normal;
        $.Matrix22_mulMatrixAndVectorToOut(t1.rotation, this.axis, t4);
        t5 = this.pointA;
        $.Transform_mulToOut(t1, this.localPoint, t5);
        t1 = t4._f;
        t6 = t1.length;
        if (0 >= t6)
          throw $.ioore(0);
        t1[0] = -t1[0];
        if (1 >= t6)
          throw $.ioore(1);
        t1[1] = -t1[1];
        t6 = this.axisB;
        $.Matrix22_mulTransMatrixAndVectorToOut(t2.rotation, t4, t6);
        t7 = t1.length;
        if (0 >= t7)
          throw $.ioore(0);
        t1[0] = -t1[0];
        if (1 >= t7)
          throw $.ioore(1);
        t1[1] = -t1[1];
        if (0 >= t3)
          throw $.ioore(0);
        indexes[0] = -1;
        t6 = this.proxyB.getSupport$1(t6);
        if (1 >= t3)
          throw $.ioore(1);
        indexes[1] = t6;
        t6 = this.localPointB;
        t3 = this.proxyB.get$vertices();
        t1 = indexes[1];
        if (t1 >>> 0 !== t1 || t1 >= t3.length)
          throw $.ioore(t1);
        t1 = t3[t1];
        t3 = t6._f;
        t7 = t1.get$_f();
        if (0 >= t7.length)
          throw $.ioore(0);
        t7 = t7[0];
        t8 = t3.length;
        if (0 >= t8)
          throw $.ioore(0);
        t3[0] = t7;
        t1 = t1.get$_f();
        if (1 >= t1.length)
          throw $.ioore(1);
        t1 = t1[1];
        if (1 >= t8)
          throw $.ioore(1);
        t3[1] = t1;
        t1 = this.pointB;
        $.Transform_mulToOut(t2, t6, t1);
        t6 = t1._f;
        t2 = t6.length;
        if (0 >= t2)
          throw $.ioore(0);
        t3 = t6[0];
        t5 = t5._f;
        t8 = t5.length;
        if (0 >= t8)
          throw $.ioore(0);
        t6[0] = t3 - t5[0];
        if (1 >= t2)
          throw $.ioore(1);
        t2 = t6[1];
        if (1 >= t8)
          throw $.ioore(1);
        t6[1] = t2 - t5[1];
        return t1.get$x(t1) * t4.get$x(t4) + t1.get$y(t1) * t4.get$y(t4);
      case 2:
        t4 = this.normal;
        $.Matrix22_mulMatrixAndVectorToOut(t2.rotation, this.axis, t4);
        t5 = this.pointB;
        $.Transform_mulToOut(t2, this.localPoint, t5);
        t2 = t4._f;
        t6 = t2.length;
        if (0 >= t6)
          throw $.ioore(0);
        t2[0] = -t2[0];
        if (1 >= t6)
          throw $.ioore(1);
        t2[1] = -t2[1];
        t6 = this.axisA;
        $.Matrix22_mulTransMatrixAndVectorToOut(t1.rotation, t4, t6);
        t7 = t2.length;
        if (0 >= t7)
          throw $.ioore(0);
        t2[0] = -t2[0];
        if (1 >= t7)
          throw $.ioore(1);
        t2[1] = -t2[1];
        if (1 >= t3)
          throw $.ioore(1);
        indexes[1] = -1;
        indexes[0] = this.proxyA.getSupport$1(t6);
        t6 = this.localPointA;
        t3 = this.proxyA.get$vertices();
        t2 = indexes[0];
        if (t2 >>> 0 !== t2 || t2 >= t3.length)
          throw $.ioore(t2);
        t2 = t3[t2];
        t3 = t6._f;
        t7 = t2.get$_f();
        if (0 >= t7.length)
          throw $.ioore(0);
        t7 = t7[0];
        t8 = t3.length;
        if (0 >= t8)
          throw $.ioore(0);
        t3[0] = t7;
        t2 = t2.get$_f();
        if (1 >= t2.length)
          throw $.ioore(1);
        t2 = t2[1];
        if (1 >= t8)
          throw $.ioore(1);
        t3[1] = t2;
        t2 = this.pointA;
        $.Transform_mulToOut(t1, t6, t2);
        t6 = t2._f;
        t1 = t6.length;
        if (0 >= t1)
          throw $.ioore(0);
        t3 = t6[0];
        t5 = t5._f;
        t8 = t5.length;
        if (0 >= t8)
          throw $.ioore(0);
        t6[0] = t3 - t5[0];
        if (1 >= t1)
          throw $.ioore(1);
        t1 = t6[1];
        if (1 >= t8)
          throw $.ioore(1);
        t6[1] = t1 - t5[1];
        return t2.get$x(t2) * t4.get$x(t4) + t2.get$y(t2) * t4.get$y(t4);
      default:
        if (0 >= t3)
          throw $.ioore(0);
        indexes[0] = -1;
        if (1 >= t3)
          throw $.ioore(1);
        indexes[1] = -1;
        return 0;
    }
  },
  evaluate$3: function(indexA, indexB, t) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = this.xfa;
    this.sweepA.getTransform$2(t1, t);
    t2 = this.xfb;
    this.sweepB.getTransform$2(t2, t);
    switch (this.type) {
      case 0:
        t3 = this.axis;
        $.Matrix22_mulTransMatrixAndVectorToOut(t1.rotation, t3, this.axisA);
        t4 = t3._f;
        t5 = t4.length;
        if (0 >= t5)
          throw $.ioore(0);
        t4[0] = -t4[0];
        if (1 >= t5)
          throw $.ioore(1);
        t4[1] = -t4[1];
        $.Matrix22_mulTransMatrixAndVectorToOut(t2.rotation, t3, this.axisB);
        t5 = t4.length;
        if (0 >= t5)
          throw $.ioore(0);
        t4[0] = -t4[0];
        if (1 >= t5)
          throw $.ioore(1);
        t4[1] = -t4[1];
        t4 = this.localPointA;
        t5 = this.proxyA.get$vertices();
        if (indexA >>> 0 !== indexA || indexA >= t5.length)
          throw $.ioore(indexA);
        t5 = t5[indexA];
        t6 = t4._f;
        t7 = t5.get$_f();
        if (0 >= t7.length)
          throw $.ioore(0);
        t7 = t7[0];
        t8 = t6.length;
        if (0 >= t8)
          throw $.ioore(0);
        t6[0] = t7;
        t5 = t5.get$_f();
        if (1 >= t5.length)
          throw $.ioore(1);
        t5 = t5[1];
        if (1 >= t8)
          throw $.ioore(1);
        t6[1] = t5;
        t5 = this.localPointB;
        t6 = this.proxyB.get$vertices();
        if (indexB >>> 0 !== indexB || indexB >= t6.length)
          throw $.ioore(indexB);
        t6 = t6[indexB];
        t8 = t5._f;
        t7 = t6.get$_f();
        if (0 >= t7.length)
          throw $.ioore(0);
        t7 = t7[0];
        t9 = t8.length;
        if (0 >= t9)
          throw $.ioore(0);
        t8[0] = t7;
        t6 = t6.get$_f();
        if (1 >= t6.length)
          throw $.ioore(1);
        t6 = t6[1];
        if (1 >= t9)
          throw $.ioore(1);
        t8[1] = t6;
        t6 = this.pointA;
        $.Transform_mulToOut(t1, t4, t6);
        t4 = this.pointB;
        $.Transform_mulToOut(t2, t5, t4);
        t5 = t4._f;
        t2 = t5.length;
        if (0 >= t2)
          throw $.ioore(0);
        t1 = t5[0];
        t6 = t6._f;
        t8 = t6.length;
        if (0 >= t8)
          throw $.ioore(0);
        t5[0] = t1 - t6[0];
        if (1 >= t2)
          throw $.ioore(1);
        t2 = t5[1];
        if (1 >= t8)
          throw $.ioore(1);
        t5[1] = t2 - t6[1];
        return t4.get$x(t4) * t3.get$x(t3) + t4.get$y(t4) * t3.get$y(t3);
      case 1:
        t3 = this.normal;
        $.Matrix22_mulMatrixAndVectorToOut(t1.rotation, this.axis, t3);
        t4 = this.pointA;
        $.Transform_mulToOut(t1, this.localPoint, t4);
        t1 = t3._f;
        t5 = t1.length;
        if (0 >= t5)
          throw $.ioore(0);
        t1[0] = -t1[0];
        if (1 >= t5)
          throw $.ioore(1);
        t1[1] = -t1[1];
        $.Matrix22_mulTransMatrixAndVectorToOut(t2.rotation, t3, this.axisB);
        t5 = t1.length;
        if (0 >= t5)
          throw $.ioore(0);
        t1[0] = -t1[0];
        if (1 >= t5)
          throw $.ioore(1);
        t1[1] = -t1[1];
        t1 = this.localPointB;
        t5 = this.proxyB.get$vertices();
        if (indexB >>> 0 !== indexB || indexB >= t5.length)
          throw $.ioore(indexB);
        t5 = t5[indexB];
        t6 = t1._f;
        t7 = t5.get$_f();
        if (0 >= t7.length)
          throw $.ioore(0);
        t7 = t7[0];
        t8 = t6.length;
        if (0 >= t8)
          throw $.ioore(0);
        t6[0] = t7;
        t5 = t5.get$_f();
        if (1 >= t5.length)
          throw $.ioore(1);
        t5 = t5[1];
        if (1 >= t8)
          throw $.ioore(1);
        t6[1] = t5;
        t5 = this.pointB;
        $.Transform_mulToOut(t2, t1, t5);
        t1 = t5._f;
        t2 = t1.length;
        if (0 >= t2)
          throw $.ioore(0);
        t6 = t1[0];
        t4 = t4._f;
        t8 = t4.length;
        if (0 >= t8)
          throw $.ioore(0);
        t1[0] = t6 - t4[0];
        if (1 >= t2)
          throw $.ioore(1);
        t2 = t1[1];
        if (1 >= t8)
          throw $.ioore(1);
        t1[1] = t2 - t4[1];
        return t5.get$x(t5) * t3.get$x(t3) + t5.get$y(t5) * t3.get$y(t3);
      case 2:
        t3 = this.normal;
        $.Matrix22_mulMatrixAndVectorToOut(t2.rotation, this.axis, t3);
        t4 = this.pointB;
        $.Transform_mulToOut(t2, this.localPoint, t4);
        t2 = t3._f;
        t5 = t2.length;
        if (0 >= t5)
          throw $.ioore(0);
        t2[0] = -t2[0];
        if (1 >= t5)
          throw $.ioore(1);
        t2[1] = -t2[1];
        $.Matrix22_mulTransMatrixAndVectorToOut(t1.rotation, t3, this.axisA);
        t5 = t2.length;
        if (0 >= t5)
          throw $.ioore(0);
        t2[0] = -t2[0];
        if (1 >= t5)
          throw $.ioore(1);
        t2[1] = -t2[1];
        t2 = this.localPointA;
        t5 = this.proxyA.get$vertices();
        if (indexA >>> 0 !== indexA || indexA >= t5.length)
          throw $.ioore(indexA);
        t5 = t5[indexA];
        t6 = t2._f;
        t7 = t5.get$_f();
        if (0 >= t7.length)
          throw $.ioore(0);
        t7 = t7[0];
        t8 = t6.length;
        if (0 >= t8)
          throw $.ioore(0);
        t6[0] = t7;
        t5 = t5.get$_f();
        if (1 >= t5.length)
          throw $.ioore(1);
        t5 = t5[1];
        if (1 >= t8)
          throw $.ioore(1);
        t6[1] = t5;
        t5 = this.pointA;
        $.Transform_mulToOut(t1, t2, t5);
        t2 = t5._f;
        t1 = t2.length;
        if (0 >= t1)
          throw $.ioore(0);
        t6 = t2[0];
        t4 = t4._f;
        t8 = t4.length;
        if (0 >= t8)
          throw $.ioore(0);
        t2[0] = t6 - t4[0];
        if (1 >= t1)
          throw $.ioore(1);
        t1 = t2[1];
        if (1 >= t8)
          throw $.ioore(1);
        t2[1] = t1 - t4[1];
        return t5.get$x(t5) * t3.get$x(t3) + t5.get$y(t5) * t3.get$y(t3);
      default:
        return 0;
    }
  }
},

TimeOfImpactInput: {"": "Object;proxyA<,proxyB<,sweepA<,sweepB<,tMax<"},

TimeOfImpactOutput: {"": "Object;state',t?"},

WorldManifold: {"": "Object;normal<,points>,pool3,pool4",
  initialize$5: function(_, manifold, xfA, radiusA, xfB, radiusB) {
    var t1, pointA, pointB, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, i, scalar, R, v;
    t1 = $.getInterceptor$x(manifold);
    switch (t1.get$type(manifold)) {
      case 0:
        pointA = this.pool3;
        pointB = this.pool4;
        t2 = this.normal;
        t3 = t2._f;
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t3[0] = 1;
        if (1 >= t4)
          throw $.ioore(1);
        t3[1] = 0;
        t4 = xfA.position._f;
        t5 = t4.length;
        if (0 >= t5)
          throw $.ioore(0);
        t6 = t4[0];
        t7 = xfA.rotation;
        t8 = t7.col1._f;
        t9 = t8.length;
        if (0 >= t9)
          throw $.ioore(0);
        t10 = t8[0];
        t11 = manifold.get$localPoint()._f;
        t12 = t11.length;
        if (0 >= t12)
          throw $.ioore(0);
        t13 = t11[0];
        t7 = t7.col2._f;
        t14 = t7.length;
        if (0 >= t14)
          throw $.ioore(0);
        t15 = t7[0];
        if (1 >= t12)
          throw $.ioore(1);
        t11 = t11[1];
        t12 = pointA._f;
        t16 = t12.length;
        if (0 >= t16)
          throw $.ioore(0);
        t12[0] = t6 + t10 * t13 + t15 * t11;
        if (1 >= t5)
          throw $.ioore(1);
        t4 = t4[1];
        if (1 >= t9)
          throw $.ioore(1);
        t8 = t8[1];
        t9 = manifold.get$localPoint()._f;
        t5 = t9.length;
        if (0 >= t5)
          throw $.ioore(0);
        t11 = t9[0];
        if (1 >= t14)
          throw $.ioore(1);
        t7 = t7[1];
        if (1 >= t5)
          throw $.ioore(1);
        t9 = t9[1];
        if (1 >= t16)
          throw $.ioore(1);
        t12[1] = t4 + t8 * t11 + t7 * t9;
        t9 = xfB.position._f;
        if (0 >= t9.length)
          throw $.ioore(0);
        t7 = t9[0];
        t11 = xfB.rotation;
        t8 = t11.col1._f;
        if (0 >= t8.length)
          throw $.ioore(0);
        t4 = t8[0];
        t16 = $.$index$asx(t1.get$points(manifold), 0).get$localPoint()._f;
        if (0 >= t16.length)
          throw $.ioore(0);
        t16 = t16[0];
        t11 = t11.col2._f;
        if (0 >= t11.length)
          throw $.ioore(0);
        t5 = t11[0];
        t14 = $.$index$asx(t1.get$points(manifold), 0).get$localPoint()._f;
        if (1 >= t14.length)
          throw $.ioore(1);
        t14 = t14[1];
        t15 = pointB._f;
        if (0 >= t15.length)
          throw $.ioore(0);
        t15[0] = t7 + t4 * t16 + t5 * t14;
        if (1 >= t9.length)
          throw $.ioore(1);
        t9 = t9[1];
        if (1 >= t8.length)
          throw $.ioore(1);
        t8 = t8[1];
        t14 = $.$index$asx(t1.get$points(manifold), 0).get$localPoint()._f;
        if (0 >= t14.length)
          throw $.ioore(0);
        t14 = t14[0];
        if (1 >= t11.length)
          throw $.ioore(1);
        t11 = t11[1];
        t1 = $.$index$asx(t1.get$points(manifold), 0).get$localPoint()._f;
        if (1 >= t1.length)
          throw $.ioore(1);
        t1 = t1[1];
        if (1 >= t15.length)
          throw $.ioore(1);
        t15[1] = t9 + t8 * t14 + t11 * t1;
        if ($.MathBox_distanceSquared(pointA, pointB) > 1.4208639999999999e-14) {
          t1 = t15.length;
          if (0 >= t1)
            throw $.ioore(0);
          t4 = t15[0];
          t5 = t12.length;
          if (0 >= t5)
            throw $.ioore(0);
          t6 = t12[0];
          t7 = t3.length;
          if (0 >= t7)
            throw $.ioore(0);
          t3[0] = t4 - t6;
          if (1 >= t1)
            throw $.ioore(1);
          t1 = t15[1];
          if (1 >= t5)
            throw $.ioore(1);
          t5 = t12[1];
          if (1 >= t7)
            throw $.ioore(1);
          t3[1] = t1 - t5;
          t2.normalize$0();
        }
        t1 = t3.length;
        if (0 >= t1)
          throw $.ioore(0);
        t2 = t3[0];
        if (typeof radiusA !== "number")
          throw $.iae(radiusA);
        t4 = t12.length;
        if (0 >= t4)
          throw $.ioore(0);
        t5 = t12[0];
        if (1 >= t1)
          throw $.ioore(1);
        t3 = t3[1];
        if (1 >= t4)
          throw $.ioore(1);
        t12 = t12[1];
        if (typeof radiusB !== "number")
          throw $.iae(radiusB);
        t4 = t15.length;
        if (0 >= t4)
          throw $.ioore(0);
        t1 = t15[0];
        if (1 >= t4)
          throw $.ioore(1);
        t15 = t15[1];
        t4 = this.points;
        t6 = $.getInterceptor$asx(t4);
        $.set$x$x(t6.$index(t4, 0), (t2 * radiusA + t5 + (-t2 * radiusB + t1)) * 0.5);
        $.set$y$x(t6.$index(t4, 0), (t3 * radiusA + t12 + (-t3 * radiusB + t15)) * 0.5);
        return;
      case 1:
        t2 = xfA.rotation;
        t3 = t2.col1._f;
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t5 = t3[0];
        t6 = manifold.get$localNormal()._f;
        t7 = t6.length;
        if (0 >= t7)
          throw $.ioore(0);
        t8 = t6[0];
        t2 = t2.col2._f;
        t9 = t2.length;
        if (0 >= t9)
          throw $.ioore(0);
        t10 = t2[0];
        if (1 >= t7)
          throw $.ioore(1);
        t6 = t6[1];
        t7 = this.normal._f;
        t11 = t7.length;
        if (0 >= t11)
          throw $.ioore(0);
        t7[0] = t5 * t8 + t10 * t6;
        if (1 >= t4)
          throw $.ioore(1);
        t4 = t3[1];
        t6 = manifold.get$localNormal()._f;
        t10 = t6.length;
        if (0 >= t10)
          throw $.ioore(0);
        t8 = t6[0];
        if (1 >= t9)
          throw $.ioore(1);
        t9 = t2[1];
        if (1 >= t10)
          throw $.ioore(1);
        t6 = t6[1];
        if (1 >= t11)
          throw $.ioore(1);
        t7[1] = t4 * t8 + t9 * t6;
        t6 = xfA.position._f;
        t9 = t6.length;
        if (0 >= t9)
          throw $.ioore(0);
        t8 = t6[0];
        t4 = t3[0];
        t11 = manifold.get$localPoint()._f;
        t10 = t11.length;
        if (0 >= t10)
          throw $.ioore(0);
        t5 = t11[0];
        t12 = t2[0];
        if (1 >= t10)
          throw $.ioore(1);
        t11 = t11[1];
        t10 = this.pool3._f;
        t13 = t10.length;
        if (0 >= t13)
          throw $.ioore(0);
        t10[0] = t8 + t4 * t5 + t12 * t11;
        if (1 >= t9)
          throw $.ioore(1);
        t6 = t6[1];
        t3 = t3[1];
        t9 = manifold.get$localPoint()._f;
        t11 = t9.length;
        if (0 >= t11)
          throw $.ioore(0);
        t12 = t9[0];
        t2 = t2[1];
        if (1 >= t11)
          throw $.ioore(1);
        t9 = t9[1];
        if (1 >= t13)
          throw $.ioore(1);
        t10[1] = t6 + t3 * t12 + t2 * t9;
        t2 = xfB.position._f;
        t3 = xfB.rotation;
        t4 = t3.col1._f;
        t3 = t3.col2._f;
        t5 = this.pool4._f;
        t6 = $.getInterceptor$n(radiusA);
        t8 = this.points;
        t9 = $.getInterceptor$asx(t8);
        i = 0;
        while (true) {
          t11 = manifold.get$pointCount();
          if (typeof t11 !== "number")
            throw $.iae(t11);
          if (!(i < t11))
            break;
          if (0 >= t2.length)
            throw $.ioore(0);
          t11 = t2[0];
          if (0 >= t4.length)
            throw $.ioore(0);
          t12 = t4[0];
          t13 = $.$index$asx(t1.get$points(manifold), i).get$localPoint()._f;
          if (0 >= t13.length)
            throw $.ioore(0);
          t13 = t13[0];
          if (0 >= t3.length)
            throw $.ioore(0);
          t14 = t3[0];
          t15 = $.$index$asx(t1.get$points(manifold), i).get$localPoint()._f;
          if (1 >= t15.length)
            throw $.ioore(1);
          t15 = t15[1];
          if (0 >= t5.length)
            throw $.ioore(0);
          t5[0] = t11 + t12 * t13 + t14 * t15;
          if (1 >= t2.length)
            throw $.ioore(1);
          t15 = t2[1];
          if (1 >= t4.length)
            throw $.ioore(1);
          t14 = t4[1];
          t13 = $.$index$asx(t1.get$points(manifold), i).get$localPoint()._f;
          if (0 >= t13.length)
            throw $.ioore(0);
          t13 = t13[0];
          if (1 >= t3.length)
            throw $.ioore(1);
          t12 = t3[1];
          t11 = $.$index$asx(t1.get$points(manifold), i).get$localPoint()._f;
          if (1 >= t11.length)
            throw $.ioore(1);
          t11 = t11[1];
          if (1 >= t5.length)
            throw $.ioore(1);
          t5[1] = t15 + t14 * t13 + t12 * t11;
          t11 = t5[0];
          t12 = t10.length;
          if (0 >= t12)
            throw $.ioore(0);
          t13 = t10[0];
          t14 = t7.length;
          if (0 >= t14)
            throw $.ioore(0);
          t15 = t7[0];
          t16 = t5[1];
          if (1 >= t12)
            throw $.ioore(1);
          t12 = t10[1];
          if (1 >= t14)
            throw $.ioore(1);
          t14 = t7[1];
          scalar = t6.$sub(radiusA, (t11 - t13) * t15 + (t16 - t12) * t14);
          if (typeof scalar !== "number")
            throw $.iae(scalar);
          if (typeof radiusB !== "number")
            throw $.iae(radiusB);
          $.set$x$x(t9.$index(t8, i), (t15 * scalar + t11 + (-t15 * radiusB + t11)) * 0.5);
          $.set$y$x(t9.$index(t8, i), (t14 * scalar + t16 + (-t14 * radiusB + t16)) * 0.5);
          ++i;
        }
        return;
      case 2:
        R = xfB.rotation;
        t2 = R.col1._f;
        t3 = t2.length;
        if (0 >= t3)
          throw $.ioore(0);
        t4 = t2[0];
        t5 = manifold.get$localNormal()._f;
        t6 = t5.length;
        if (0 >= t6)
          throw $.ioore(0);
        t7 = t5[0];
        t8 = R.col2._f;
        t9 = t8.length;
        if (0 >= t9)
          throw $.ioore(0);
        t10 = t8[0];
        if (1 >= t6)
          throw $.ioore(1);
        t5 = t5[1];
        t6 = this.normal._f;
        t11 = t6.length;
        if (0 >= t11)
          throw $.ioore(0);
        t6[0] = t4 * t7 + t10 * t5;
        if (1 >= t3)
          throw $.ioore(1);
        t3 = t2[1];
        t5 = manifold.get$localNormal()._f;
        t10 = t5.length;
        if (0 >= t10)
          throw $.ioore(0);
        t7 = t5[0];
        if (1 >= t9)
          throw $.ioore(1);
        t9 = t8[1];
        if (1 >= t10)
          throw $.ioore(1);
        t5 = t5[1];
        if (1 >= t11)
          throw $.ioore(1);
        t6[1] = t3 * t7 + t9 * t5;
        v = manifold.get$localPoint();
        t5 = xfB.position._f;
        t9 = t5.length;
        if (0 >= t9)
          throw $.ioore(0);
        t7 = t5[0];
        t3 = t2[0];
        t11 = v._f;
        t10 = t11.length;
        if (0 >= t10)
          throw $.ioore(0);
        t4 = t11[0];
        t12 = t8[0];
        if (1 >= t10)
          throw $.ioore(1);
        t10 = t11[1];
        t13 = this.pool3._f;
        t14 = t13.length;
        if (0 >= t14)
          throw $.ioore(0);
        t13[0] = t7 + t3 * t4 + t12 * t10;
        if (1 >= t9)
          throw $.ioore(1);
        t5 = t5[1];
        t2 = t2[1];
        t9 = t11[0];
        t8 = t8[1];
        t11 = t11[1];
        if (1 >= t14)
          throw $.ioore(1);
        t13[1] = t5 + t2 * t9 + t8 * t11;
        t2 = xfA.position._f;
        t3 = xfA.rotation;
        t4 = t3.col1._f;
        t3 = t3.col2._f;
        t5 = this.pool4._f;
        t7 = $.getInterceptor$n(radiusB);
        t8 = this.points;
        t9 = $.getInterceptor$asx(t8);
        i = 0;
        while (true) {
          t10 = manifold.get$pointCount();
          if (typeof t10 !== "number")
            throw $.iae(t10);
          if (!(i < t10))
            break;
          if (0 >= t2.length)
            throw $.ioore(0);
          t10 = t2[0];
          if (0 >= t4.length)
            throw $.ioore(0);
          t11 = t4[0];
          t12 = $.$index$asx(t1.get$points(manifold), i).get$localPoint()._f;
          if (0 >= t12.length)
            throw $.ioore(0);
          t12 = t12[0];
          if (0 >= t3.length)
            throw $.ioore(0);
          t14 = t3[0];
          t15 = $.$index$asx(t1.get$points(manifold), i).get$localPoint()._f;
          if (1 >= t15.length)
            throw $.ioore(1);
          t15 = t15[1];
          if (0 >= t5.length)
            throw $.ioore(0);
          t5[0] = t10 + t11 * t12 + t14 * t15;
          if (1 >= t2.length)
            throw $.ioore(1);
          t15 = t2[1];
          if (1 >= t4.length)
            throw $.ioore(1);
          t14 = t4[1];
          t12 = $.$index$asx(t1.get$points(manifold), i).get$localPoint()._f;
          if (0 >= t12.length)
            throw $.ioore(0);
          t12 = t12[0];
          if (1 >= t3.length)
            throw $.ioore(1);
          t11 = t3[1];
          t10 = $.$index$asx(t1.get$points(manifold), i).get$localPoint()._f;
          if (1 >= t10.length)
            throw $.ioore(1);
          t10 = t10[1];
          if (1 >= t5.length)
            throw $.ioore(1);
          t5[1] = t15 + t14 * t12 + t11 * t10;
          t10 = t5[0];
          t11 = t13.length;
          if (0 >= t11)
            throw $.ioore(0);
          t12 = t13[0];
          t14 = t6.length;
          if (0 >= t14)
            throw $.ioore(0);
          t15 = t6[0];
          t16 = t5[1];
          if (1 >= t11)
            throw $.ioore(1);
          t11 = t13[1];
          if (1 >= t14)
            throw $.ioore(1);
          t14 = t6[1];
          scalar = t7.$sub(radiusB, (t10 - t12) * t15 + (t16 - t11) * t14);
          if (typeof scalar !== "number")
            throw $.iae(scalar);
          if (typeof radiusA !== "number")
            throw $.iae(radiusA);
          $.set$x$x(t9.$index(t8, i), (-t15 * radiusA + t10 + (t15 * scalar + t10)) * 0.5);
          $.set$y$x(t9.$index(t8, i), (-t14 * radiusA + t16 + (t14 * scalar + t16)) * 0.5);
          ++i;
        }
        t1 = t6.length;
        if (0 >= t1)
          throw $.ioore(0);
        t6[0] = -t6[0];
        if (1 >= t1)
          throw $.ioore(1);
        t6[1] = -t6[1];
        break;
    }
  }
},

WorldManifold_closure: {"": "Closure;",
  call$1: function(i) {
    var t1, t2, t3;
    t1 = new $.Vector(new Float64Array(2));
    t2 = t1._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t2[0] = 0;
    if (1 >= t3)
      throw $.ioore(1);
    t2[1] = 0;
    return t1;
  }
},

Matrix22: {"": "Object;col1<,col2<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$isMatrix22) {
      t1 = this.col1;
      if (t1.$eq(t1, other.col1)) {
        t1 = this.col2;
        t1 = t1.$eq(t1, other.col2);
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  setAngle$1: function(angle) {
    var t1, cosin, sin, t2;
    t1 = typeof angle !== "number";
    if (t1)
      $.throwExpression(new $.ArgumentError(angle));
    cosin = Math.cos(angle);
    if (t1)
      $.throwExpression(new $.ArgumentError(angle));
    sin = Math.sin(angle);
    t1 = this.col1._f;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = cosin;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = sin;
    t1 = this.col2._f;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = -sin;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = cosin;
  },
  setFrom$1: function(matrix) {
    var t1, t2, t3, t4, t5;
    t1 = this.col1._f;
    t2 = matrix.get$col1()._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t4;
    if (1 >= t3)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = this.col2._f;
    t1 = matrix.get$col2()._f;
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = t2.length;
    if (0 >= t4)
      throw $.ioore(0);
    t2[0] = t3;
    if (1 >= t5)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t4)
      throw $.ioore(1);
    t2[1] = t1;
  },
  invertLocal$0: function() {
    var t1, t2, a, t3, t4, b, c, d, det;
    t1 = this.col1._f;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    a = t1[0];
    t3 = this.col2._f;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    b = t3[0];
    if (1 >= t2)
      throw $.ioore(1);
    c = t1[1];
    if (1 >= t4)
      throw $.ioore(1);
    d = t3[1];
    det = a * d - b * c;
    if (det !== 0)
      det = 1 / det;
    t1[0] = det * d;
    t2 = -det;
    t3[0] = t2 * b;
    t1[1] = t2 * c;
    t3[1] = det * a;
    return this;
  },
  toString$0: function(_) {
    return $.S(this.col1) + ", " + $.S(this.col2);
  },
  $isMatrix22: true
},

Sweep: {"": "Object;localCenter<,centerZero<,center<,angleZero<,angle<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = this.localCenter;
    if (t1.$eq(t1, other.get$localCenter())) {
      t1 = this.centerZero;
      if (t1.$eq(t1, other.get$centerZero())) {
        t1 = this.center;
        t1 = t1.$eq(t1, other.get$center()) && $.$eq(this.angleZero, other.get$angleZero()) && $.$eq(this.angle, other.get$angle());
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  setFrom$1: function(other) {
    var t1, t2, t3, t4, t5;
    t1 = this.localCenter._f;
    t2 = other.get$localCenter()._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t4;
    if (1 >= t3)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = this.centerZero._f;
    t1 = other.get$centerZero()._f;
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = t2.length;
    if (0 >= t4)
      throw $.ioore(0);
    t2[0] = t3;
    if (1 >= t5)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t4)
      throw $.ioore(1);
    t2[1] = t1;
    t1 = this.center._f;
    t2 = other.get$center()._f;
    t4 = t2.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t2[0];
    t3 = t1.length;
    if (0 >= t3)
      throw $.ioore(0);
    t1[0] = t5;
    if (1 >= t4)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t3)
      throw $.ioore(1);
    t1[1] = t2;
    this.angleZero = other.get$angleZero();
    this.angle = other.get$angle();
  },
  getTransform$2: function(xf, alpha) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
    if (typeof alpha !== "number")
      throw $.iae(alpha);
    t1 = 1 - alpha;
    t2 = this.centerZero._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = this.center._f;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7 = t5[0];
    t8 = xf.position._f;
    t9 = t8.length;
    if (0 >= t9)
      throw $.ioore(0);
    t8[0] = t1 * t4 + alpha * t7;
    if (1 >= t3)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t6)
      throw $.ioore(1);
    t5 = t5[1];
    if (1 >= t9)
      throw $.ioore(1);
    t8[1] = t1 * t2 + alpha * t5;
    t5 = xf.rotation;
    t2 = this.angleZero;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t9 = this.angle;
    if (typeof t9 !== "number")
      throw $.iae(t9);
    t5.setAngle$1(t1 * t2 + alpha * t9);
    t9 = t8.length;
    if (0 >= t9)
      throw $.ioore(0);
    t2 = t8[0];
    t1 = t5.col1._f;
    t6 = t1.length;
    if (0 >= t6)
      throw $.ioore(0);
    t3 = t1[0];
    t7 = this.localCenter._f;
    t4 = t7.length;
    if (0 >= t4)
      throw $.ioore(0);
    t10 = t7[0];
    t5 = t5.col2._f;
    t11 = t5.length;
    if (0 >= t11)
      throw $.ioore(0);
    t12 = t5[0];
    if (1 >= t4)
      throw $.ioore(1);
    t8[0] = t2 - (t3 * t10 + t12 * t7[1]);
    if (1 >= t9)
      throw $.ioore(1);
    t9 = t8[1];
    if (1 >= t6)
      throw $.ioore(1);
    t1 = t1[1];
    t6 = t7[0];
    if (1 >= t11)
      throw $.ioore(1);
    t8[1] = t9 - (t1 * t6 + t5[1] * t7[1]);
  },
  advance$1: function(time) {
    var t1, t2, t3, t4, t5, t6;
    if (typeof time !== "number")
      throw $.iae(time);
    t1 = 1 - time;
    t2 = this.centerZero._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = this.center._f;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t2[0] = t1 * t4 + time * t5[0];
    if (1 >= t3)
      throw $.ioore(1);
    t3 = t2[1];
    if (1 >= t6)
      throw $.ioore(1);
    t2[1] = t1 * t3 + time * t5[1];
    t5 = this.angleZero;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t3 = this.angle;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    this.angleZero = t1 * t5 + time * t3;
  }
},

Transform: {"": "Object;position>,rotation<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = this.position;
    if (t1.$eq(t1, $.get$position$x(other))) {
      t1 = this.rotation;
      t1 = t1.$eq(t1, other.get$rotation());
    } else
      t1 = false;
    return t1;
  },
  setFrom$1: function(other) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = $.get$position$x(other);
    t2 = this.position._f;
    t3 = t1.get$_f();
    if (0 >= t3.length)
      throw $.ioore(0);
    t3 = t3[0];
    t4 = t2.length;
    if (0 >= t4)
      throw $.ioore(0);
    t2[0] = t3;
    t1 = t1.get$_f();
    if (1 >= t1.length)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t4)
      throw $.ioore(1);
    t2[1] = t1;
    t1 = this.rotation;
    t2 = other.get$rotation();
    t4 = t1.col1._f;
    t3 = t2.col1._f;
    t5 = t3.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t3[0];
    t7 = t4.length;
    if (0 >= t7)
      throw $.ioore(0);
    t4[0] = t6;
    if (1 >= t5)
      throw $.ioore(1);
    t3 = t3[1];
    if (1 >= t7)
      throw $.ioore(1);
    t4[1] = t3;
    t1 = t1.col2._f;
    t2 = t2.col2._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t7 = t1.length;
    if (0 >= t7)
      throw $.ioore(0);
    t1[0] = t4;
    if (1 >= t3)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t7)
      throw $.ioore(1);
    t1[1] = t2;
  }
},

Vector: {"": "Object;_f<",
  get$x: function(_) {
    var t1 = this._f;
    if (0 >= t1.length)
      throw $.ioore(0);
    return t1[0];
  },
  get$y: function(_) {
    var t1 = this._f;
    if (1 >= t1.length)
      throw $.ioore(1);
    return t1[1];
  },
  set$x: function(_, v) {
    var t1 = this._f;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1[0] = v;
  },
  set$y: function(_, v) {
    var t1 = this._f;
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = v;
  },
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    t1 = this._f;
    if (0 >= t1.length)
      throw $.ioore(0);
    t2 = $.getInterceptor$x(other);
    if (t1[0] === t2.get$x(other)) {
      if (1 >= t1.length)
        throw $.ioore(1);
      t1 = t1[1] === t2.get$y(other);
    } else
      t1 = false;
    return t1;
  },
  setCoords$2: function(xCoord, yCoord) {
    var t1, t2;
    t1 = this._f;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = xCoord;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = yCoord;
    return this;
  },
  setFrom$1: function(v) {
    var t1, t2, t3;
    t1 = this._f;
    t2 = v.get$_f();
    if (0 >= t2.length)
      throw $.ioore(0);
    t2 = t2[0];
    t3 = t1.length;
    if (0 >= t3)
      throw $.ioore(0);
    t1[0] = t2;
    t2 = v.get$_f();
    if (1 >= t2.length)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t3)
      throw $.ioore(1);
    t1[1] = t2;
    return this;
  },
  get$length: function(_) {
    var t1, t2, t3;
    t1 = this._f;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    t1 = t3 * t3 + t1 * t1;
    return Math.sqrt(t1);
  },
  normalize$0: function() {
    var t1, t2, t3, len, invLength;
    t1 = this._f;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t2 = t1[1];
    t2 = t3 * t3 + t2 * t2;
    len = Math.sqrt(t2);
    if (len < 1.192e-7)
      return 0;
    invLength = 1 / len;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = t1[0] * invLength;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = t1[1] * invLength;
    return len;
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = this._f;
    if (0 >= t1.length)
      throw $.ioore(0);
    t2 = "(" + $.S(t1[0]) + ", ";
    if (1 >= t1.length)
      throw $.ioore(1);
    return t2 + $.S(t1[1]) + ")";
  },
  Vector$zero$0: function() {
    var t1, t2;
    t1 = this._f;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = 0;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = 0;
  }
},

Body: {"": "Object;world,flags@,contactList@,sleepTime@,userData@,_linearVelocity,_angularVelocity,mass@,invMass<,next@,prev@,fixtureList,fixtureCount,jointList<,_force<,_torque@,_inertia,invInertia<,linearDamping<,angularDamping<,_type<,islandIndex?,originTransform<,sweep<,_fixDef,_pmd,_pxf,oldCenter,tempCenter",
  createFixture$1: function(def) {
    var fixture, broadPhase, t1, node;
    fixture = $.Fixture$();
    fixture.create$2(this, def);
    if ((this.flags & 32) === 32) {
      broadPhase = this.world._contactManager.broadPhase;
      t1 = fixture.box;
      fixture.shape.computeAxisAlignedBox$2(t1, this.originTransform);
      node = broadPhase._tree.createProxy$2(t1, fixture);
      broadPhase.proxyCount = broadPhase.proxyCount + 1;
      broadPhase.moveBuffer.push(node);
      fixture.proxy = node;
    }
    fixture.next = this.fixtureList;
    this.fixtureList = fixture;
    this.fixtureCount = this.fixtureCount + 1;
    fixture.body = this;
    t1 = fixture.density;
    if (t1 == null)
      throw t1.$gt();
    if (t1 > 0)
      this.resetMassData$0();
    t1 = this.world;
    t1._flags = (t1._flags | 1) >>> 0;
    return fixture;
  },
  setTransform$2: function(argPosition, argAngle) {
    var t1, t2, t3, t4, t5, t6, t7, t8, broadPhase, f;
    t1 = this.world;
    if ((t1._flags & 2) === 2)
      return;
    t2 = this.originTransform;
    t2.rotation.setAngle$1(argAngle);
    t3 = t2.position._f;
    t4 = argPosition._f;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    t7 = t3.length;
    if (0 >= t7)
      throw $.ioore(0);
    t3[0] = t6;
    if (1 >= t5)
      throw $.ioore(1);
    t4 = t4[1];
    if (1 >= t7)
      throw $.ioore(1);
    t3[1] = t4;
    t4 = this.sweep;
    t3 = t4.centerZero;
    $.Transform_mulToOut(t2, t4.localCenter, t3);
    t7 = t4.center._f;
    t3 = t3._f;
    t5 = t3.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t3[0];
    t8 = t7.length;
    if (0 >= t8)
      throw $.ioore(0);
    t7[0] = t6;
    if (1 >= t5)
      throw $.ioore(1);
    t3 = t3[1];
    if (1 >= t8)
      throw $.ioore(1);
    t7[1] = t3;
    t4.angleZero = argAngle;
    t4.angle = argAngle;
    broadPhase = t1._contactManager.broadPhase;
    for (f = this.fixtureList; f != null; f = f.get$next())
      f.synchronize$3(broadPhase, t2, t2);
    t1 = t1._contactManager;
    t1.findNewContacts$0;
    t1.broadPhase.updatePairs$1(t1.get$_addPair());
  },
  get$position: function(_) {
    return this.originTransform.position;
  },
  get$angle: function() {
    return this.sweep.angle;
  },
  get$localCenter: function() {
    return this.sweep.localCenter;
  },
  get$linearVelocity: function() {
    return this._linearVelocity;
  },
  get$angularVelocity: function() {
    return this._angularVelocity;
  },
  set$angularVelocity: function(w) {
    if (!$.$eq(this._type, 0)) {
      if ($.$gt$n($.$mul$n(w, w), 0))
        this.set$awake(true);
      this._angularVelocity = w;
    }
  },
  applyForce$2: function(force, point) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this._type;
    if (typeof t1 !== "number")
      return this.applyForce$2$bailout(1, force, point, t1);
    if (t1 !== 2)
      return;
    this.set$awake(true);
    t1 = this._force._f;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = force._f;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t3 + t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t2 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t2 + t4[1];
    t2 = this._torque;
    t1 = $.getInterceptor$x(point);
    t5 = t1.get$x(point);
    t3 = this.sweep.center._f;
    if (0 >= t3.length)
      throw $.ioore(0);
    t6 = t3[0];
    if (1 >= t4.length)
      throw $.ioore(1);
    t7 = t4[1];
    t1 = t1.get$y(point);
    if (1 >= t3.length)
      throw $.ioore(1);
    t3 = t3[1];
    if (0 >= t4.length)
      throw $.ioore(0);
    this._torque = t2 + ((t5 - t6) * t7 - (t1 - t3) * t4[0]);
  },
  applyForce$2$bailout: function(state0, force, point, t1) {
    var t2, t3, t4, t5, t6, t7;
    if (!$.$eq(t1, 2))
      return;
    this.set$awake(true);
    t1 = this._force._f;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = force._f;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t3 + t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t2 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t2 + t4[1];
    t2 = this._torque;
    t1 = $.getInterceptor$x(point);
    t5 = t1.get$x(point);
    t3 = this.sweep.center._f;
    if (0 >= t3.length)
      throw $.ioore(0);
    t6 = t3[0];
    if (1 >= t4.length)
      throw $.ioore(1);
    t7 = t4[1];
    t1 = t1.get$y(point);
    if (1 >= t3.length)
      throw $.ioore(1);
    t3 = t3[1];
    if (0 >= t4.length)
      throw $.ioore(0);
    this._torque = t2 + ((t5 - t6) * t7 - (t1 - t3) * t4[0]);
  },
  get$inertia: function() {
    var t1, t2, t3, t4, t5;
    t1 = this._inertia;
    t2 = this.mass;
    t3 = this.sweep.localCenter._f;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t3[0];
    if (1 >= t4)
      throw $.ioore(1);
    t3 = t3[1];
    t3 = $.$mul$n(t2, t5 * t5 + t3 * t3);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return t1 + t3;
  },
  getMassData$1: function(data) {
    var t1, t2, t3, t4, t5;
    data.mass = this.mass;
    t1 = this._inertia;
    t2 = this.mass;
    t3 = this.sweep.localCenter._f;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t3[0];
    if (1 >= t4)
      throw $.ioore(1);
    t4 = t3[1];
    t4 = $.$mul$n(t2, t5 * t5 + t4 * t4);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    data.inertia = t1 + t4;
    t4 = data.center;
    t1 = t3.length;
    if (0 >= t1)
      throw $.ioore(0);
    t4 = t4._f;
    t2 = t4.length;
    if (0 >= t2)
      throw $.ioore(0);
    t4[0] = t5;
    if (1 >= t1)
      throw $.ioore(1);
    t3 = t3[1];
    if (1 >= t2)
      throw $.ioore(1);
    t4[1] = t3;
  },
  resetMassData$0: function() {
    var t1, t2, t3, t4, t5, t6, massData, f, t7, t8, t9, t10, temp;
    this.mass = 0;
    this.invMass = 0;
    this._inertia = 0;
    this.invInertia = 0;
    t1 = this.sweep;
    t2 = t1.localCenter;
    t3 = t2._f;
    if (1 >= t3.length)
      throw $.ioore(1);
    t3[1] = 0;
    t3[0] = 0;
    if ($.$eq(this._type, 0) || $.$eq(this._type, 1)) {
      t2 = t1.center._f;
      t3 = this.originTransform.position._f;
      t4 = t3.length;
      if (0 >= t4)
        throw $.ioore(0);
      t5 = t3[0];
      t6 = t2.length;
      if (0 >= t6)
        throw $.ioore(0);
      t2[0] = t5;
      if (1 >= t4)
        throw $.ioore(1);
      t4 = t3[1];
      if (1 >= t6)
        throw $.ioore(1);
      t2[1] = t4;
      t1 = t1.centerZero._f;
      t4 = t3[0];
      t2 = t1.length;
      if (0 >= t2)
        throw $.ioore(0);
      t1[0] = t4;
      t3 = t3[1];
      if (1 >= t2)
        throw $.ioore(1);
      t1[1] = t3;
      return;
    }
    t4 = this.tempCenter;
    t5 = t4._f;
    if (1 >= t5.length)
      throw $.ioore(1);
    t5[1] = 0;
    t5[0] = 0;
    massData = this._pmd;
    for (f = this.fixtureList; f != null; f = f.get$next()) {
      if (f.get$density() === 0)
        continue;
      f.getMassData$1(massData);
      this.mass = $.$add$ns(this.mass, massData.mass);
      t6 = new $.Vector(new Float64Array(2))._f;
      t7 = massData.center._f;
      t8 = t7.length;
      if (0 >= t8)
        throw $.ioore(0);
      t9 = t7[0];
      t10 = t6.length;
      if (0 >= t10)
        throw $.ioore(0);
      t6[0] = t9;
      if (1 >= t8)
        throw $.ioore(1);
      t7 = t7[1];
      if (1 >= t10)
        throw $.ioore(1);
      t6[1] = t7;
      t7 = massData.mass;
      t10 = t6[0];
      if (typeof t7 !== "number")
        throw $.iae(t7);
      t6[0] = t10 * t7;
      t6[1] = t6[1] * t7;
      t7 = t5.length;
      if (0 >= t7)
        throw $.ioore(0);
      t5[0] = t5[0] + t6[0];
      if (1 >= t7)
        throw $.ioore(1);
      t5[1] = t5[1] + t6[1];
      t6 = this._inertia;
      t7 = massData.inertia;
      if (typeof t7 !== "number")
        throw $.iae(t7);
      this._inertia = t6 + t7;
    }
    t6 = this.mass;
    if ($.$gt$n(t6, 0)) {
      if (typeof t6 !== "number")
        throw $.iae(t6);
      this.invMass = 1 / t6;
      t6 = this.invMass;
      t7 = t5.length;
      if (0 >= t7)
        throw $.ioore(0);
      t5[0] = t5[0] * t6;
      if (1 >= t7)
        throw $.ioore(1);
      t5[1] = t5[1] * t6;
    } else {
      this.mass = 1;
      this.invMass = 1;
    }
    t6 = this._inertia;
    if (t6 > 0 && (this.flags & 16) === 0) {
      t4 = $.$mul$n(this.mass, t4.get$x(t4) * t4.get$x(t4) + t4.get$y(t4) * t4.get$y(t4));
      if (typeof t4 !== "number")
        throw $.iae(t4);
      this._inertia = t6 - t4;
      this.invInertia = 1 / this._inertia;
    } else {
      this._inertia = 0;
      this.invInertia = 0;
    }
    t4 = this.oldCenter._f;
    t6 = t1.center._f;
    t7 = t6.length;
    if (0 >= t7)
      throw $.ioore(0);
    t8 = t6[0];
    t9 = t4.length;
    if (0 >= t9)
      throw $.ioore(0);
    t4[0] = t8;
    if (1 >= t7)
      throw $.ioore(1);
    t7 = t6[1];
    if (1 >= t9)
      throw $.ioore(1);
    t4[1] = t7;
    t7 = t5.length;
    if (0 >= t7)
      throw $.ioore(0);
    t9 = t5[0];
    t8 = t3.length;
    if (0 >= t8)
      throw $.ioore(0);
    t3[0] = t9;
    if (1 >= t7)
      throw $.ioore(1);
    t5 = t5[1];
    if (1 >= t8)
      throw $.ioore(1);
    t3[1] = t5;
    t1 = t1.centerZero;
    $.Transform_mulToOut(this.originTransform, t2, t1);
    t1 = t1._f;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t5 = t1[0];
    t3 = t6.length;
    if (0 >= t3)
      throw $.ioore(0);
    t6[0] = t5;
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t3)
      throw $.ioore(1);
    t6[1] = t1;
    temp = new $.Vector(new Float64Array(2));
    t1 = temp._f;
    t3 = t6.length;
    if (0 >= t3)
      throw $.ioore(0);
    t2 = t6[0];
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t2;
    if (1 >= t3)
      throw $.ioore(1);
    t6 = t6[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t6;
    t6 = t1[0];
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t6 - t4[0];
    t6 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t6 - t4[1];
    $.Vector_crossNumAndVectorToOut(this._angularVelocity, temp, temp);
    t4 = this._linearVelocity._f;
    t6 = t4.length;
    if (0 >= t6)
      throw $.ioore(0);
    t5 = t4[0];
    t3 = t1.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4[0] = t5 + t1[0];
    if (1 >= t6)
      throw $.ioore(1);
    t6 = t4[1];
    if (1 >= t3)
      throw $.ioore(1);
    t4[1] = t6 + t1[1];
  },
  getWorldPoint$1: function(localPoint) {
    var v, t1, t2;
    v = new $.Vector(new Float64Array(2));
    t1 = v._f;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = 0;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = 0;
    $.Transform_mulToOut(this.originTransform, localPoint, v);
    return v;
  },
  getWorldPointToOut$2: function(localPoint, out) {
    $.Transform_mulToOut(this.originTransform, localPoint, out);
  },
  getWorldVector$1: function(localVector) {
    var out, t1, t2;
    out = new $.Vector(new Float64Array(2));
    t1 = out._f;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = 0;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = 0;
    $.Matrix22_mulMatrixAndVectorToOut(this.originTransform.rotation, localVector, out);
    return out;
  },
  getWorldVectorToOut$2: function(localVector, out) {
    $.Matrix22_mulMatrixAndVectorToOut(this.originTransform.rotation, localVector, out);
  },
  get$type: function(_) {
    return this._type;
  },
  set$type: function(_, otherType) {
    var t1, ce;
    if ($.$eq(this._type, otherType))
      return;
    this._type = otherType;
    this.resetMassData$0();
    if ($.$eq(this._type, 0)) {
      t1 = this._linearVelocity._f;
      if (1 >= t1.length)
        throw $.ioore(1);
      t1[1] = 0;
      t1[0] = 0;
      this._angularVelocity = 0;
    }
    this.set$awake(true);
    t1 = this._force._f;
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = 0;
    t1[0] = 0;
    this._torque = 0;
    for (ce = this.contactList; ce != null; ce = ce.get$next())
      ce.get$contact().flagForFiltering$0();
  },
  get$bullet: function() {
    return (this.flags & 8) === 8;
  },
  set$awake: function(flag) {
    var t1;
    if (flag) {
      t1 = this.flags;
      if ((t1 & 2) === 0) {
        this.flags = (t1 | 2) >>> 0;
        this.sleepTime = 0;
      }
    } else {
      this.flags = (this.flags & 4294967293) >>> 0;
      this.sleepTime = 0;
      t1 = this._linearVelocity._f;
      if (1 >= t1.length)
        throw $.ioore(1);
      t1[1] = 0;
      t1[0] = 0;
      this._angularVelocity = 0;
      t1 = this._force._f;
      if (1 >= t1.length)
        throw $.ioore(1);
      t1[1] = 0;
      t1[0] = 0;
      this._torque = 0;
    }
  },
  get$awake: function() {
    return (this.flags & 2) === 2;
  },
  get$active: function() {
    return (this.flags & 32) === 32;
  },
  synchronizeFixtures$0: function() {
    var xf1, t1, t2, t3, t4, broadPhase, f;
    xf1 = this._pxf;
    t1 = xf1.rotation;
    t2 = this.sweep;
    t1.setAngle$1(t2.angleZero);
    t3 = xf1.position;
    $.Matrix22_mulMatrixAndVectorToOut(t1, t2.localCenter, t3);
    t3 = t3._f;
    t1 = t3.length;
    if (0 >= t1)
      throw $.ioore(0);
    t3[0] = t3[0] * -1;
    if (1 >= t1)
      throw $.ioore(1);
    t3[1] = t3[1] * -1;
    t1 = t3[0];
    t2 = t2.centerZero._f;
    t4 = t2.length;
    if (0 >= t4)
      throw $.ioore(0);
    t3[0] = t1 + t2[0];
    t1 = t3[1];
    if (1 >= t4)
      throw $.ioore(1);
    t3[1] = t1 + t2[1];
    broadPhase = this.world._contactManager.broadPhase;
    for (f = this.fixtureList, t1 = this.originTransform; f != null; f = f.get$next())
      f.synchronize$3(broadPhase, xf1, t1);
  },
  synchronizeTransform$0: function() {
    var t1, t2, c, s, t, r, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
    t1 = this.sweep;
    t2 = t1.angle;
    if (typeof t2 !== "number")
      $.throwExpression(new $.ArgumentError(t2));
    c = Math.cos(t2);
    t2 = t1.angle;
    if (typeof t2 !== "number")
      $.throwExpression(new $.ArgumentError(t2));
    s = Math.sin(t2);
    t = this.originTransform;
    r = t.rotation;
    t2 = r.col1._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t2[0] = c;
    t4 = r.col2._f;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t4[0] = -s;
    if (1 >= t3)
      throw $.ioore(1);
    t2[1] = s;
    if (1 >= t5)
      throw $.ioore(1);
    t4[1] = c;
    t5 = t2[0];
    t3 = t1.localCenter._f;
    t6 = t3.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7 = t3[0];
    t8 = t4[0];
    if (1 >= t6)
      throw $.ioore(1);
    t6 = t3[1];
    t1 = t1.center._f;
    t9 = t1.length;
    if (0 >= t9)
      throw $.ioore(0);
    t10 = t1[0];
    t11 = t.position._f;
    t12 = t11.length;
    if (0 >= t12)
      throw $.ioore(0);
    t11[0] = (t5 * t7 + t8 * t6) * -1 + t10;
    t2 = t2[1];
    t10 = t3[0];
    t4 = t4[1];
    t3 = t3[1];
    if (1 >= t9)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t12)
      throw $.ioore(1);
    t11[1] = (t2 * t10 + t4 * t3) * -1 + t1;
  },
  shouldCollide$1: function(other) {
    var t1 = this._type;
    if (typeof t1 !== "number")
      return this.shouldCollide$1$bailout(1, other, t1);
    if (t1 !== 2) {
      t1 = other.get$_type();
      if (typeof t1 !== "number")
        return this.shouldCollide$1$bailout(2, 0, t1);
      t1 = t1 !== 2;
    } else
      t1 = false;
    return !t1;
  },
  shouldCollide$1$bailout: function(state0, other, t1) {
    switch (state0) {
      case 0:
        t1 = this._type;
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && !$.$eq(t1, 2))
          switch (state0) {
            case 0:
              t1 = other.get$_type();
            case 2:
              state0 = 0;
              t1 = !$.$eq(t1, 2);
          }
        else
          t1 = false;
        return !t1;
    }
  },
  advance$1: function(t) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.sweep;
    t1.advance$1(t);
    t2 = t1.center._f;
    t3 = t1.centerZero._f;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t3[0];
    t6 = t2.length;
    if (0 >= t6)
      throw $.ioore(0);
    t2[0] = t5;
    if (1 >= t4)
      throw $.ioore(1);
    t3 = t3[1];
    if (1 >= t6)
      throw $.ioore(1);
    t2[1] = t3;
    t1.angle = t1.angleZero;
    this.synchronizeTransform$0();
  },
  Body$2: function(bd, world) {
    var t1, t2, t3, t4, t5, t6;
    if (bd.bullet)
      this.flags = (this.flags | 8) >>> 0;
    if (bd.fixedRotation)
      this.flags = (this.flags | 16) >>> 0;
    if (bd.allowSleep)
      this.flags = (this.flags | 4) >>> 0;
    if (bd.awake)
      this.flags = (this.flags | 2) >>> 0;
    if (bd.active)
      this.flags = (this.flags | 32) >>> 0;
    t1 = this.originTransform;
    t2 = t1.position._f;
    t3 = bd.position._f;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t3[0];
    t6 = t2.length;
    if (0 >= t6)
      throw $.ioore(0);
    t2[0] = t5;
    if (1 >= t4)
      throw $.ioore(1);
    t3 = t3[1];
    if (1 >= t6)
      throw $.ioore(1);
    t2[1] = t3;
    t1.rotation.setAngle$1(bd.angle);
    t3 = this.sweep;
    t2 = t3.localCenter;
    t6 = t2._f;
    if (1 >= t6.length)
      throw $.ioore(1);
    t6[1] = 0;
    t6[0] = 0;
    t6 = t3.centerZero;
    $.Transform_mulToOut(t1, t2, t6);
    t2 = t3.center._f;
    t6 = t6._f;
    t1 = t6.length;
    if (0 >= t1)
      throw $.ioore(0);
    t4 = t6[0];
    t5 = t2.length;
    if (0 >= t5)
      throw $.ioore(0);
    t2[0] = t4;
    if (1 >= t1)
      throw $.ioore(1);
    t6 = t6[1];
    if (1 >= t5)
      throw $.ioore(1);
    t2[1] = t6;
    t3.angle = bd.angle;
    t3.angleZero = bd.angle;
    if ($.$eq(this._type, 2)) {
      this.mass = 1;
      this.invMass = 1;
    } else {
      this.mass = 0;
      this.invMass = 0;
    }
  }
},

BodyDef: {"": "Object;type*,angle<,userData@,position>,linearVelocity<,angularVelocity@,fixedRotation,isSleeping,bullet<,allowSleep,linearDamping<,angularDamping<,awake@,active<"},

ContactManager: {"": "Object;broadPhase,contactList<,contactCount,contactFilter,contactListener,pool",
  _addPair$2: function(fixtureA, fixtureB) {
    var bodyA, bodyB, edge, t1, fA, fB, c;
    bodyA = $.get$body$x(fixtureA);
    bodyB = $.get$body$x(fixtureB);
    if (bodyA == null ? bodyB == null : bodyA === bodyB)
      return;
    edge = bodyB.get$contactList();
    for (; edge != null;) {
      t1 = edge.get$other();
      if (t1 == null ? bodyA == null : t1 === bodyA) {
        t1 = edge.get$contact();
        fA = t1.get$fixtureA();
        fB = t1.get$fixtureB();
        t1 = $.getInterceptor(fA);
        if (t1.$eq(fA, fixtureA) && $.$eq(fB, fixtureB))
          return;
        if (t1.$eq(fA, fixtureB) && $.$eq(fB, fixtureA))
          return;
      }
      edge = edge.get$next();
    }
    if (!bodyB.shouldCollide$1(bodyA))
      return;
    if (!this.contactFilter.shouldCollide$2(fixtureA, fixtureB))
      return;
    c = this.pool.popContact$2(fixtureA, fixtureB);
    fixtureA = c.get$fixtureA();
    fixtureB = c.get$fixtureB();
    bodyA = $.get$body$x(fixtureA);
    bodyB = $.get$body$x(fixtureB);
    c.set$prev(null);
    c.set$next(this.contactList);
    t1 = this.contactList;
    if (t1 != null)
      t1.set$prev(c);
    this.contactList = c;
    c.get$edge1().contact = c;
    c.get$edge1().other = bodyB;
    c.get$edge1().prev = null;
    c.get$edge1().next = bodyA.get$contactList();
    t1 = bodyA.get$contactList();
    if (t1 != null)
      t1.set$prev(c.get$edge1());
    bodyA.set$contactList(c.get$edge1());
    c.get$edge2().contact = c;
    c.get$edge2().other = bodyA;
    c.get$edge2().prev = null;
    c.get$edge2().next = bodyB.get$contactList();
    t1 = bodyB.get$contactList();
    if (t1 != null)
      t1.set$prev(c.get$edge2());
    bodyB.set$contactList(c.get$edge2());
    this.contactCount = this.contactCount + 1;
  },
  get$_addPair: function() {
    return new $.BoundClosure$2(this, "_addPair$2", null);
  },
  destroy$1: function(c) {
    var fixtureA, fixtureB, bodyA, bodyB, t1, t2;
    fixtureA = c.get$fixtureA();
    fixtureB = c.get$fixtureB();
    bodyA = $.get$body$x(fixtureA);
    bodyB = $.get$body$x(fixtureB);
    if (false)
      this.contactListener.endContact$1(c);
    t1 = c.get$prev();
    if (t1 != null)
      t1.set$next(c.get$next());
    if (c.get$next() != null)
      c.get$next().set$prev(c.get$prev());
    if ($.$eq(c, this.contactList))
      this.contactList = c.get$next();
    t1 = c.get$edge1();
    t2 = t1.prev;
    if (t2 != null)
      t2.set$next(t1.next);
    t1 = c.get$edge1();
    t2 = t1.next;
    if (t2 != null)
      t2.set$prev(t1.prev);
    t1 = c.get$edge1();
    if (t1 === bodyA.get$contactList())
      bodyA.set$contactList(t1.next);
    t1 = c.get$edge2();
    t2 = t1.prev;
    if (t2 != null)
      t2.set$next(t1.next);
    t1 = c.get$edge2();
    t2 = t1.next;
    if (t2 != null)
      t2.set$prev(t1.prev);
    t1 = c.get$edge2();
    if (t1 === bodyB.get$contactList())
      bodyB.set$contactList(t1.next);
    this.pool.pushContact$1(c);
    this.contactCount = this.contactCount - 1;
  },
  collide$0: function() {
    var c, t1, t2, fixtureA, fixtureB, bodyA, bodyB, t3, c0, proxyIdA, proxyIdB;
    c = this.contactList;
    for (t1 = this.contactFilter, t2 = this.contactListener; c != null;) {
      fixtureA = c.get$fixtureA();
      fixtureB = c.get$fixtureB();
      bodyA = $.get$body$x(fixtureA);
      bodyB = $.get$body$x(fixtureB);
      if (!bodyA.get$awake() && !bodyB.get$awake()) {
        c = c.get$next();
        continue;
      }
      t3 = c.get$flags();
      if (t3 == null)
        throw t3.$and();
      if ((t3 & 8) === 8) {
        if (!bodyB.shouldCollide$1(bodyA)) {
          c0 = c.get$next();
          this.destroy$1(c);
          c = c0;
          continue;
        }
        if (!t1.shouldCollide$2(fixtureA, fixtureB)) {
          c0 = c.get$next();
          this.destroy$1(c);
          c = c0;
          continue;
        }
        t3 = c.get$flags();
        if (t3 == null)
          throw t3.$and();
        c.set$flags((t3 & 4294967287) >>> 0);
      }
      proxyIdA = fixtureA.get$proxy();
      proxyIdB = fixtureB.get$proxy();
      if (!$.AxisAlignedBox_testOverlap(proxyIdA.get$box(), proxyIdB.get$box())) {
        c0 = c.get$next();
        this.destroy$1(c);
        c = c0;
        continue;
      }
      c.update$1(t2);
      c = c.get$next();
    }
  }
},

CircleContact: {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collideCircles$5(argManifold, $.get$shape$x(this.fixtureA), xfA, $.get$shape$x(this.fixtureB), xfB);
  }
},

Contact: {"": "Object;flags@,prev@,next@,edge1<,edge2<,fixtureA<,fixtureB<,manifold@,toiCount@",
  init$2: function(fixA, fixB) {
    var t1;
    this.flags = 0;
    this.fixtureA = fixA;
    this.fixtureB = fixB;
    this.manifold.set$pointCount(0);
    this.prev = null;
    this.next = null;
    t1 = this.edge1;
    t1.contact = null;
    t1.prev = null;
    t1.next = null;
    t1.other = null;
    t1 = this.edge2;
    t1.contact = null;
    t1.prev = null;
    t1.next = null;
    t1.other = null;
    this.toiCount = 0;
  },
  get$touching: function() {
    var t1 = this.flags;
    if (t1 == null)
      throw t1.$and();
    return (t1 & 2) === 2;
  },
  get$enabled: function() {
    var t1 = this.flags;
    if (t1 == null)
      throw t1.$and();
    return (t1 & 4) === 4;
  },
  flagForFiltering$0: function() {
    var t1 = this.flags;
    if (t1 == null)
      throw t1.$or();
    this.flags = (t1 | 8) >>> 0;
  },
  update$1: function(listener) {
    var t1, t2, wasTouching, sensorA, t3, sensorB, sensor, t4, bodyA, t5, bodyB, xfA, xfB, shapeA, shapeB, touching, i, mp2, id2, j, mp1;
    t1 = this._oldManifold;
    t1.setFrom$1(this.manifold);
    t2 = this.flags;
    if (t2 == null)
      throw t2.$or();
    this.flags = (t2 | 4) >>> 0;
    t2 = this.flags;
    if (t2 == null)
      throw t2.$and();
    wasTouching = (t2 & 2) === 2;
    t2 = this.fixtureA;
    sensorA = t2.get$isSensor();
    t3 = this.fixtureB;
    sensorB = t3.get$isSensor();
    sensor = sensorA === true || sensorB === true;
    t4 = $.getInterceptor$x(t2);
    bodyA = t4.get$body(t2);
    t5 = $.getInterceptor$x(t3);
    bodyB = t5.get$body(t3);
    xfA = bodyA.get$originTransform();
    xfB = bodyB.get$originTransform();
    if (sensor) {
      shapeA = t4.get$shape(t2);
      shapeB = t5.get$shape(t3);
      touching = this.pool.collision.testOverlap$4(shapeA, shapeB, xfA, xfB);
      this.manifold.set$pointCount(0);
    } else {
      this.evaluate$3(this.manifold, xfA, xfB);
      touching = $.$gt$n(this.manifold.get$pointCount(), 0);
      t2 = t1.points;
      t3 = t2.length;
      i = 0;
      while (true) {
        t4 = this.manifold;
        t5 = t4.get$pointCount();
        if (typeof t5 !== "number")
          throw $.iae(t5);
        if (!(i < t5))
          break;
        mp2 = $.$index$asx($.get$points$x(t4), i);
        mp2.set$normalImpulse(0);
        mp2.set$tangentImpulse(0);
        id2 = $.get$id$x(mp2);
        j = 0;
        while (true) {
          t4 = t1.pointCount;
          if (typeof t4 !== "number")
            throw $.iae(t4);
          if (!(j < t4))
            break;
          if (j >= t3)
            throw $.ioore(j);
          mp1 = t2[j];
          if ($.get$id$x(mp1).isEqual$1(id2)) {
            mp2.set$normalImpulse(mp1.get$normalImpulse());
            mp2.set$tangentImpulse(mp1.get$tangentImpulse());
            break;
          }
          ++j;
        }
        ++i;
      }
      if (touching !== wasTouching) {
        bodyA.set$awake(true);
        bodyB.set$awake(true);
      }
    }
    t2 = this.flags;
    if (touching) {
      if (t2 == null)
        throw t2.$or();
      this.flags = (t2 | 2) >>> 0;
    } else {
      if (t2 == null)
        throw t2.$and();
      this.flags = (t2 & 4294967293) >>> 0;
    }
    return;
    if (!wasTouching && touching)
      listener.beginContact$1(this);
    if (wasTouching && !touching)
      listener.endContact$1(this);
    if (!sensor && touching)
      listener.preSolve$2(this, t1);
  }
},

ContactConstraint: {"": "Object;points>,localNormal<,localPoint<,normal<,normalMass<,K<,bodyA@,bodyB@,type*,radius@,friction@,restitution@,pointCount@,manifold@",
  setFrom$1: function(cp) {
    var t1, t2, t3, t4, t5, t6, t7, i;
    this.pointCount = cp.get$pointCount();
    t1 = this.localNormal._f;
    t2 = cp.get$localNormal()._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t4;
    if (1 >= t3)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = this.localPoint._f;
    t1 = cp.get$localPoint()._f;
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = t2.length;
    if (0 >= t4)
      throw $.ioore(0);
    t2[0] = t3;
    if (1 >= t5)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t4)
      throw $.ioore(1);
    t2[1] = t1;
    t1 = this.normal._f;
    t2 = cp.get$normal()._f;
    t4 = t2.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t2[0];
    t3 = t1.length;
    if (0 >= t3)
      throw $.ioore(0);
    t1[0] = t5;
    if (1 >= t4)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t3)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = this.normalMass;
    t1 = cp.get$normalMass();
    t3 = t2.col1._f;
    t4 = t1.get$col1()._f;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    t7 = t3.length;
    if (0 >= t7)
      throw $.ioore(0);
    t3[0] = t6;
    if (1 >= t5)
      throw $.ioore(1);
    t4 = t4[1];
    if (1 >= t7)
      throw $.ioore(1);
    t3[1] = t4;
    t2 = t2.col2._f;
    t1 = t1.get$col2()._f;
    t4 = t1.length;
    if (0 >= t4)
      throw $.ioore(0);
    t3 = t1[0];
    t7 = t2.length;
    if (0 >= t7)
      throw $.ioore(0);
    t2[0] = t3;
    if (1 >= t4)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t7)
      throw $.ioore(1);
    t2[1] = t1;
    t1 = this.K;
    t2 = cp.get$K();
    t7 = t1.col1._f;
    t4 = t2.col1._f;
    t3 = t4.length;
    if (0 >= t3)
      throw $.ioore(0);
    t5 = t4[0];
    t6 = t7.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7[0] = t5;
    if (1 >= t3)
      throw $.ioore(1);
    t4 = t4[1];
    if (1 >= t6)
      throw $.ioore(1);
    t7[1] = t4;
    t1 = t1.col2._f;
    t2 = t2.col2._f;
    t4 = t2.length;
    if (0 >= t4)
      throw $.ioore(0);
    t7 = t2[0];
    t6 = t1.length;
    if (0 >= t6)
      throw $.ioore(0);
    t1[0] = t7;
    if (1 >= t4)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t6)
      throw $.ioore(1);
    t1[1] = t2;
    this.bodyA = cp.get$bodyA();
    this.bodyB = cp.get$bodyB();
    t2 = $.getInterceptor$x(cp);
    this.type = t2.get$type(cp);
    this.radius = cp.get$radius();
    this.friction = cp.get$friction();
    this.restitution = cp.get$restitution();
    this.manifold = cp.get$manifold();
    t1 = this.points;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
      return this.setFrom$1$bailout(1, cp, t2, t1);
    i = 0;
    while (true) {
      t3 = cp.get$pointCount();
      if (typeof t3 !== "number")
        throw $.iae(t3);
      if (!(i < t3))
        break;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].setFrom$1($.$index$asx(t2.get$points(cp), i));
      ++i;
    }
  },
  setFrom$1$bailout: function(state0, cp, t2, t1) {
    switch (state0) {
      case 0:
        this.pointCount = cp.get$pointCount();
        t1 = this.localNormal._f;
        t2 = cp.get$localNormal()._f;
        t3 = t2.length;
        if (0 >= t3)
          throw $.ioore(0);
        t4 = t2[0];
        t5 = t1.length;
        if (0 >= t5)
          throw $.ioore(0);
        t1[0] = t4;
        if (1 >= t3)
          throw $.ioore(1);
        t2 = t2[1];
        if (1 >= t5)
          throw $.ioore(1);
        t1[1] = t2;
        t2 = this.localPoint._f;
        t1 = cp.get$localPoint()._f;
        t5 = t1.length;
        if (0 >= t5)
          throw $.ioore(0);
        t3 = t1[0];
        t4 = t2.length;
        if (0 >= t4)
          throw $.ioore(0);
        t2[0] = t3;
        if (1 >= t5)
          throw $.ioore(1);
        t1 = t1[1];
        if (1 >= t4)
          throw $.ioore(1);
        t2[1] = t1;
        t1 = this.normal._f;
        t2 = cp.get$normal()._f;
        t4 = t2.length;
        if (0 >= t4)
          throw $.ioore(0);
        t5 = t2[0];
        t3 = t1.length;
        if (0 >= t3)
          throw $.ioore(0);
        t1[0] = t5;
        if (1 >= t4)
          throw $.ioore(1);
        t2 = t2[1];
        if (1 >= t3)
          throw $.ioore(1);
        t1[1] = t2;
        t2 = this.normalMass;
        t1 = cp.get$normalMass();
        t3 = t2.col1._f;
        t4 = t1.get$col1()._f;
        t5 = t4.length;
        if (0 >= t5)
          throw $.ioore(0);
        t6 = t4[0];
        t7 = t3.length;
        if (0 >= t7)
          throw $.ioore(0);
        t3[0] = t6;
        if (1 >= t5)
          throw $.ioore(1);
        t4 = t4[1];
        if (1 >= t7)
          throw $.ioore(1);
        t3[1] = t4;
        t2 = t2.col2._f;
        t1 = t1.get$col2()._f;
        t4 = t1.length;
        if (0 >= t4)
          throw $.ioore(0);
        t3 = t1[0];
        t7 = t2.length;
        if (0 >= t7)
          throw $.ioore(0);
        t2[0] = t3;
        if (1 >= t4)
          throw $.ioore(1);
        t1 = t1[1];
        if (1 >= t7)
          throw $.ioore(1);
        t2[1] = t1;
        t1 = this.K;
        t2 = cp.get$K();
        t7 = t1.col1._f;
        t4 = t2.col1._f;
        t3 = t4.length;
        if (0 >= t3)
          throw $.ioore(0);
        t5 = t4[0];
        t6 = t7.length;
        if (0 >= t6)
          throw $.ioore(0);
        t7[0] = t5;
        if (1 >= t3)
          throw $.ioore(1);
        t4 = t4[1];
        if (1 >= t6)
          throw $.ioore(1);
        t7[1] = t4;
        t1 = t1.col2._f;
        t2 = t2.col2._f;
        t4 = t2.length;
        if (0 >= t4)
          throw $.ioore(0);
        t7 = t2[0];
        t6 = t1.length;
        if (0 >= t6)
          throw $.ioore(0);
        t1[0] = t7;
        if (1 >= t4)
          throw $.ioore(1);
        t2 = t2[1];
        if (1 >= t6)
          throw $.ioore(1);
        t1[1] = t2;
        this.bodyA = cp.get$bodyA();
        this.bodyB = cp.get$bodyB();
        t2 = $.getInterceptor$x(cp);
        this.type = t2.get$type(cp);
        this.radius = cp.get$radius();
        this.friction = cp.get$friction();
        this.restitution = cp.get$restitution();
        this.manifold = cp.get$manifold();
        t1 = this.points;
      case 1:
        var t3, t4, t5, t6, t7, i;
        state0 = 0;
        t3 = $.getInterceptor$asx(t1);
        i = 0;
        while (true) {
          t4 = cp.get$pointCount();
          if (typeof t4 !== "number")
            throw $.iae(t4);
          if (!(i < t4))
            break;
          t3.$index(t1, i).setFrom$1($.$index$asx(t2.get$points(cp), i));
          ++i;
        }
    }
  },
  toString$0: function(_) {
    return "localNormal: \"" + $.S(this.localNormal) + "\", localPoint: \"" + $.S(this.localPoint) + "\" normal: \"" + $.S(this.normal) + "\", radius: \"" + $.S(this.radius) + "\" friction: \"" + $.S(this.friction) + "\" restitution: \"" + $.S(this.restitution) + "\", pointCount: \"" + $.S(this.pointCount) + "\"";
  }
},

ContactConstraint_closure: {"": "Closure;",
  call$1: function(i) {
    return $.ContactConstraintPoint$();
  }
},

ContactConstraintPoint: {"": "Object;localPoint<,rA<,rB<,normalImpulse@,tangentImpulse@,normalMass@,tangentMass@,velocityBias@",
  setFrom$1: function(cp) {
    var t1, t2, t3, t4, t5;
    t1 = this.localPoint._f;
    t2 = cp.get$localPoint()._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t4;
    if (1 >= t3)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = this.rA._f;
    t1 = cp.get$rA()._f;
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = t2.length;
    if (0 >= t4)
      throw $.ioore(0);
    t2[0] = t3;
    if (1 >= t5)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t4)
      throw $.ioore(1);
    t2[1] = t1;
    t1 = this.rB._f;
    t2 = cp.get$rB()._f;
    t4 = t2.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t2[0];
    t3 = t1.length;
    if (0 >= t3)
      throw $.ioore(0);
    t1[0] = t5;
    if (1 >= t4)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t3)
      throw $.ioore(1);
    t1[1] = t2;
    this.normalImpulse = cp.get$normalImpulse();
    this.tangentImpulse = cp.get$tangentImpulse();
    this.normalMass = cp.get$normalMass();
    this.tangentMass = cp.get$tangentMass();
    this.velocityBias = cp.get$velocityBias();
  },
  toString$0: function(_) {
    return "normal impulse: " + $.S(this.normalImpulse) + ", tangentImpulse: " + $.S(this.tangentImpulse) + ", normalMass: " + $.S(this.normalMass) + ", tangentMass: " + $.S(this.tangentMass) + ", velocityBias: " + $.S(this.velocityBias) + ", localPoint: " + $.S(this.localPoint) + ", rA: " + $.S(this.rA) + ", rB: " + $.S(this.rB);
  }
},

ContactEdge: {"": "Object;other<,contact<,prev@,next@"},

ContactRegister: {"": "Object;creator<,primary<"},

ContactSolver: {"": "Object;constraints,constraintCount,worldManifold,tangent,temp1,temp2,P,dv,dv1,dv2,x>,d,P1,P2,psolver,rA<,rB<",
  init$3: function(contacts, contactCount, impulseRatio) {
    var old, t1, i, t2, t3, t4, t5, t6, t7, t8, contact, fixtureA, fixtureB, shapeA, t9, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, friction, restitution, restitution0, vA, vB, wA, wB, cc, t10, t11, t12, j, t13, cp, ccp, t14, t15, t16, t17, rnA, rnB, rtA, rtB, t18, t19, vRel, ccp1, ccp2, invMassA, invIA, invMassB, invIB, rn1A, rn1B, rn2A, rn2B, k11, k22, k12;
    this.constraintCount = contactCount;
    if ($.$lt$n($.get$length$asx(this.constraints), contactCount)) {
      old = this.constraints;
      t1 = $.getInterceptor$asx(old);
      this.constraints = $.List_List($.max($.$mul$n(t1.get$length(old), 2), this.constraintCount));
      $.setRange$3$ax(this.constraints, 0, t1.get$length(old), old);
      i = t1.get$length(old);
      if (typeof i !== "number")
        return this.init$3$bailout(1, contacts, i, impulseRatio);
      while (true) {
        t1 = $.get$length$asx(this.constraints);
        if (typeof t1 !== "number")
          throw $.iae(t1);
        if (!(i < t1))
          break;
        $.$indexSet$ax(this.constraints, i, $.ContactConstraint$());
        ++i;
      }
    }
    t1 = this.worldManifold;
    t2 = t1.points;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
      return this.init$3$bailout(2, contacts, 0, impulseRatio, t1, t2);
    t3 = $.getInterceptor(t2);
    t4 = this.tangent._f;
    t5 = this.temp2._f;
    t6 = this.temp1._f;
    t7 = t1.normal._f;
    i = 0;
    while (true) {
      t8 = this.constraintCount;
      if (t8 == null)
        throw $.iae(t8);
      if (!(i < t8))
        break;
      if (i >= contacts.length)
        throw $.ioore(i);
      contact = contacts[i];
      fixtureA = contact.get$fixtureA();
      fixtureB = contact.get$fixtureB();
      t8 = $.getInterceptor$x(fixtureA);
      shapeA = t8.get$shape(fixtureA);
      t9 = $.getInterceptor$x(fixtureB);
      shapeB = t9.get$shape(fixtureB);
      radiusA = shapeA.get$radius();
      radiusB = shapeB.get$radius();
      bodyA = t8.get$body(fixtureA);
      bodyB = t9.get$body(fixtureB);
      manifold = contact.get$manifold();
      t9 = fixtureA.get$friction();
      t8 = fixtureB.get$friction();
      if (t9 == null)
        throw t9.$mul();
      if (typeof t8 !== "number")
        throw $.iae(t8);
      t8 = t9 * t8;
      friction = Math.sqrt(t8);
      restitution = fixtureA.get$restitution();
      restitution0 = fixtureB.get$restitution();
      restitution = $.$gt$n(restitution, restitution0) ? restitution : restitution0;
      if (typeof restitution !== "number")
        return this.init$3$bailout(3, contacts, i, impulseRatio, t1, t2, t6, friction, t4, restitution, radiusA, radiusB, bodyA, bodyB, manifold, t7, t5, t3);
      vA = bodyA.get$linearVelocity();
      vB = bodyB.get$linearVelocity();
      wA = bodyA.get$angularVelocity();
      wB = bodyB.get$angularVelocity();
      t1.initialize$5(t1, manifold, bodyA.get$originTransform(), radiusA, bodyB.get$originTransform(), radiusB);
      cc = $.$index$asx(this.constraints, i);
      cc.set$bodyA(bodyA);
      cc.set$bodyB(bodyB);
      cc.set$manifold(manifold);
      t8 = cc.get$normal();
      t9 = t7.length;
      if (0 >= t9)
        throw $.ioore(0);
      t10 = t7[0];
      t8 = t8._f;
      if (0 >= t8.length)
        throw $.ioore(0);
      t8[0] = t10;
      t10 = cc.get$normal();
      if (1 >= t9)
        throw $.ioore(1);
      t9 = t7[1];
      t10 = t10._f;
      if (1 >= t10.length)
        throw $.ioore(1);
      t10[1] = t9;
      cc.set$pointCount(manifold.get$pointCount());
      cc.set$friction(friction);
      cc.set$restitution(restitution);
      t9 = cc.get$localNormal();
      t10 = manifold.get$localNormal()._f;
      if (0 >= t10.length)
        throw $.ioore(0);
      t10 = t10[0];
      t9 = t9._f;
      if (0 >= t9.length)
        throw $.ioore(0);
      t9[0] = t10;
      t10 = cc.get$localNormal();
      t9 = manifold.get$localNormal()._f;
      if (1 >= t9.length)
        throw $.ioore(1);
      t9 = t9[1];
      t10 = t10._f;
      if (1 >= t10.length)
        throw $.ioore(1);
      t10[1] = t9;
      t9 = cc.get$localPoint();
      t10 = manifold.get$localPoint()._f;
      if (0 >= t10.length)
        throw $.ioore(0);
      t10 = t10[0];
      t9 = t9._f;
      if (0 >= t9.length)
        throw $.ioore(0);
      t9[0] = t10;
      t10 = cc.get$localPoint();
      t9 = manifold.get$localPoint()._f;
      if (1 >= t9.length)
        throw $.ioore(1);
      t9 = t9[1];
      t10 = t10._f;
      if (1 >= t10.length)
        throw $.ioore(1);
      t10[1] = t9;
      cc.set$radius($.$add$ns(radiusA, radiusB));
      t9 = $.getInterceptor$x(manifold);
      t10 = $.getInterceptor$x(cc);
      t10.set$type(cc, t9.get$type(manifold));
      t8 = vB._f;
      t11 = vA._f;
      t12 = -restitution;
      j = 0;
      while (true) {
        t13 = cc.get$pointCount();
        if (typeof t13 !== "number")
          throw $.iae(t13);
        if (!(j < t13))
          break;
        cp = $.$index$asx(t9.get$points(manifold), j);
        ccp = $.$index$asx(t10.get$points(cc), j);
        t13 = cp.get$normalImpulse();
        if (typeof t13 !== "number")
          throw $.iae(t13);
        ccp.set$normalImpulse(impulseRatio * t13);
        t13 = cp.get$tangentImpulse();
        if (typeof t13 !== "number")
          throw $.iae(t13);
        ccp.set$tangentImpulse(impulseRatio * t13);
        t13 = ccp.get$localPoint();
        t14 = cp.get$localPoint()._f;
        if (0 >= t14.length)
          throw $.ioore(0);
        t14 = t14[0];
        t13 = t13._f;
        if (0 >= t13.length)
          throw $.ioore(0);
        t13[0] = t14;
        t14 = ccp.get$localPoint();
        t13 = cp.get$localPoint()._f;
        if (1 >= t13.length)
          throw $.ioore(1);
        t13 = t13[1];
        t14 = t14._f;
        if (1 >= t14.length)
          throw $.ioore(1);
        t14[1] = t13;
        t13 = ccp.get$rA();
        if (j >= t2.length)
          throw $.ioore(j);
        t14 = $.get$x$x(t2[j]);
        t15 = bodyA.get$sweep().center._f;
        if (0 >= t15.length)
          throw $.ioore(0);
        t15 = $.$sub$n(t14, t15[0]);
        t13 = t13._f;
        if (0 >= t13.length)
          throw $.ioore(0);
        t13[0] = t15;
        t15 = ccp.get$rA();
        if (j >= t2.length)
          throw $.ioore(j);
        t13 = $.get$y$x(t2[j]);
        t14 = bodyA.get$sweep().center._f;
        if (1 >= t14.length)
          throw $.ioore(1);
        t14 = $.$sub$n(t13, t14[1]);
        t15 = t15._f;
        if (1 >= t15.length)
          throw $.ioore(1);
        t15[1] = t14;
        t14 = ccp.get$rB();
        if (j >= t2.length)
          throw $.ioore(j);
        t15 = $.get$x$x(t2[j]);
        t13 = bodyB.get$sweep().center._f;
        if (0 >= t13.length)
          throw $.ioore(0);
        t13 = $.$sub$n(t15, t13[0]);
        t14 = t14._f;
        if (0 >= t14.length)
          throw $.ioore(0);
        t14[0] = t13;
        t13 = ccp.get$rB();
        if (j >= t2.length)
          throw $.ioore(j);
        t14 = $.get$y$x(t2[j]);
        t15 = bodyB.get$sweep().center._f;
        if (1 >= t15.length)
          throw $.ioore(1);
        t15 = $.$sub$n(t14, t15[1]);
        t13 = t13._f;
        if (1 >= t13.length)
          throw $.ioore(1);
        t13[1] = t15;
        t15 = ccp.get$rA()._f;
        t13 = t15.length;
        if (0 >= t13)
          throw $.ioore(0);
        t14 = t15[0];
        t16 = cc.get$normal()._f;
        if (1 >= t16.length)
          throw $.ioore(1);
        t17 = t16[1];
        if (1 >= t13)
          throw $.ioore(1);
        t15 = t15[1];
        t16 = t16[0];
        rnA = t14 * t17 - t15 * t16;
        t15 = ccp.get$rB()._f;
        t14 = t15.length;
        if (0 >= t14)
          throw $.ioore(0);
        t13 = t15[0];
        if (1 >= t14)
          throw $.ioore(1);
        rnB = t13 * t17 - t15[1] * t16;
        ccp.set$normalMass(1 / (bodyA.get$invMass() + bodyB.get$invMass() + bodyA.get$invInertia() * (rnA * rnA) + bodyB.get$invInertia() * (rnB * rnB)));
        t16 = cc.get$normal()._f;
        if (1 >= t16.length)
          throw $.ioore(1);
        t16 = t16[1];
        t15 = t4.length;
        if (0 >= t15)
          throw $.ioore(0);
        t4[0] = 1 * t16;
        t16 = cc.get$normal()._f;
        if (0 >= t16.length)
          throw $.ioore(0);
        t16 = t16[0];
        if (1 >= t15)
          throw $.ioore(1);
        t4[1] = -1 * t16;
        t16 = ccp.get$rA()._f;
        t15 = t16.length;
        if (0 >= t15)
          throw $.ioore(0);
        t17 = t16[0];
        t13 = t4[1];
        if (1 >= t15)
          throw $.ioore(1);
        t16 = t16[1];
        t15 = t4[0];
        rtA = t17 * t13 - t16 * t15;
        t16 = ccp.get$rB()._f;
        t17 = t16.length;
        if (0 >= t17)
          throw $.ioore(0);
        t14 = t16[0];
        if (1 >= t17)
          throw $.ioore(1);
        rtB = t14 * t13 - t16[1] * t15;
        ccp.set$tangentMass(1 / (bodyA.get$invMass() + bodyB.get$invMass() + bodyA.get$invInertia() * (rtA * rtA) + bodyB.get$invInertia() * (rtB * rtB)));
        ccp.set$velocityBias(0);
        if (typeof wA !== "number")
          throw wA.$negate();
        t15 = ccp.get$rA()._f;
        if (1 >= t15.length)
          throw $.ioore(1);
        t15 = t15[1];
        t16 = t5.length;
        if (0 >= t16)
          throw $.ioore(0);
        t5[0] = -wA * t15;
        t15 = ccp.get$rA()._f;
        if (0 >= t15.length)
          throw $.ioore(0);
        t15 = t15[0];
        if (1 >= t16)
          throw $.ioore(1);
        t5[1] = wA * t15;
        if (typeof wB !== "number")
          throw wB.$negate();
        t15 = ccp.get$rB()._f;
        if (1 >= t15.length)
          throw $.ioore(1);
        t15 = t15[1];
        t16 = t8.length;
        if (0 >= t16)
          throw $.ioore(0);
        t13 = t8[0];
        t14 = t11.length;
        if (0 >= t14)
          throw $.ioore(0);
        t17 = t11[0];
        t18 = t5[0];
        t19 = t6.length;
        if (0 >= t19)
          throw $.ioore(0);
        t6[0] = -wB * t15 + t13 - t17 - t18;
        t18 = ccp.get$rB()._f;
        if (0 >= t18.length)
          throw $.ioore(0);
        t18 = t18[0];
        if (1 >= t16)
          throw $.ioore(1);
        t16 = t8[1];
        if (1 >= t14)
          throw $.ioore(1);
        t14 = t11[1];
        t17 = t5[1];
        if (1 >= t19)
          throw $.ioore(1);
        t6[1] = wB * t18 + t16 - t14 - t17;
        t17 = cc.get$normal()._f;
        t14 = t17.length;
        if (0 >= t14)
          throw $.ioore(0);
        t16 = t17[0];
        t18 = t6[0];
        if (1 >= t14)
          throw $.ioore(1);
        vRel = t16 * t18 + t17[1] * t6[1];
        if (vRel < -1)
          ccp.set$velocityBias(t12 * vRel);
        ++j;
      }
      if (t13 === 2) {
        ccp1 = $.$index$asx(t10.get$points(cc), 0);
        ccp2 = $.$index$asx(t10.get$points(cc), 1);
        invMassA = bodyA.get$invMass();
        invIA = bodyA.get$invInertia();
        invMassB = bodyB.get$invMass();
        invIB = bodyB.get$invInertia();
        t8 = ccp1.get$rA();
        t9 = cc.get$normal();
        t8 = t8._f;
        t10 = t8.length;
        if (0 >= t10)
          throw $.ioore(0);
        t11 = t8[0];
        t9 = t9._f;
        if (1 >= t9.length)
          throw $.ioore(1);
        t12 = t9[1];
        if (1 >= t10)
          throw $.ioore(1);
        t8 = t8[1];
        t9 = t9[0];
        rn1A = t11 * t12 - t8 * t9;
        t8 = ccp1.get$rB()._f;
        t11 = t8.length;
        if (0 >= t11)
          throw $.ioore(0);
        t10 = t8[0];
        if (1 >= t11)
          throw $.ioore(1);
        rn1B = t10 * t12 - t8[1] * t9;
        t8 = ccp2.get$rA()._f;
        t10 = t8.length;
        if (0 >= t10)
          throw $.ioore(0);
        t11 = t8[0];
        if (1 >= t10)
          throw $.ioore(1);
        rn2A = t11 * t12 - t8[1] * t9;
        t8 = ccp2.get$rB()._f;
        t11 = t8.length;
        if (0 >= t11)
          throw $.ioore(0);
        t10 = t8[0];
        if (1 >= t11)
          throw $.ioore(1);
        rn2B = t10 * t12 - t8[1] * t9;
        t9 = invMassA + invMassB;
        t8 = invIA * rn1A;
        t12 = invIB * rn1B;
        k11 = t9 + t8 * rn1A + t12 * rn1B;
        k22 = t9 + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
        k12 = t9 + t8 * rn2A + t12 * rn2B;
        if (k11 * k11 < 100 * (k11 * k22 - k12 * k12)) {
          t8 = cc.get$K().col1._f;
          if (0 >= t8.length)
            throw $.ioore(0);
          t8[0] = k11;
          t8 = cc.get$K().col1._f;
          if (1 >= t8.length)
            throw $.ioore(1);
          t8[1] = k12;
          t8 = cc.get$K().col2._f;
          if (0 >= t8.length)
            throw $.ioore(0);
          t8[0] = k12;
          t8 = cc.get$K().col2._f;
          if (1 >= t8.length)
            throw $.ioore(1);
          t8[1] = k22;
          t8 = cc.get$normalMass().get$col1();
          t9 = cc.get$K().col1._f;
          if (0 >= t9.length)
            throw $.ioore(0);
          t9 = t9[0];
          t8 = t8._f;
          if (0 >= t8.length)
            throw $.ioore(0);
          t8[0] = t9;
          t9 = cc.get$normalMass().get$col1();
          t8 = cc.get$K().col1._f;
          if (1 >= t8.length)
            throw $.ioore(1);
          t8 = t8[1];
          t9 = t9._f;
          if (1 >= t9.length)
            throw $.ioore(1);
          t9[1] = t8;
          t8 = cc.get$normalMass().get$col2();
          t9 = cc.get$K().col2._f;
          if (0 >= t9.length)
            throw $.ioore(0);
          t9 = t9[0];
          t8 = t8._f;
          if (0 >= t8.length)
            throw $.ioore(0);
          t8[0] = t9;
          t9 = cc.get$normalMass().get$col2();
          t8 = cc.get$K().col2._f;
          if (1 >= t8.length)
            throw $.ioore(1);
          t8 = t8[1];
          t9 = t9._f;
          if (1 >= t9.length)
            throw $.ioore(1);
          t9[1] = t8;
          cc.get$normalMass().invertLocal$0();
        } else
          cc.set$pointCount(1);
      }
      ++i;
    }
  },
  init$3$bailout: function(state0, contacts, i, impulseRatio, t1, t2, t6, friction, t4, restitution, radiusA, radiusB, bodyA, bodyB, manifold, t7, t5, t3) {
    switch (state0) {
      case 0:
        this.constraintCount = contactCount;
      case 1:
        if (state0 === 1 || state0 === 0 && $.$lt$n($.get$length$asx(this.constraints), contactCount))
          switch (state0) {
            case 0:
              old = this.constraints;
              t1 = $.getInterceptor$asx(old);
              this.constraints = $.List_List($.max($.$mul$n(t1.get$length(old), 2), this.constraintCount));
              $.setRange$3$ax(this.constraints, 0, t1.get$length(old), old);
              i = t1.get$length(old);
            case 1:
              state0 = 0;
              while (true) {
                t1 = $.get$length$asx(this.constraints);
                t2 = $.getInterceptor$n(i);
                if (typeof t1 !== "number")
                  throw $.iae(t1);
                if (!t2.$lt(i, t1))
                  break;
                $.$indexSet$ax(this.constraints, i, $.ContactConstraint$());
                i = t2.$add(i, 1);
              }
          }
        t1 = this.worldManifold;
        t2 = t1.points;
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$asx(t2);
        t4 = this.tangent._f;
        t5 = this.temp2._f;
        t6 = this.temp1._f;
        t7 = t1.normal._f;
        i = 0;
      case 3:
        var old, t8, contact, fixtureA, fixtureB, shapeA, t9, shapeB, restitution0, vA, vB, wA, wB, cc, t10, t11, j, t12, cp, ccp, t13, t14, t15, t16, rnA, rnB, rtA, rtB, t17, t18, vRel, ccp1, ccp2, invMassA, invIA, invMassB, invIB, rn1A, rn1B, rn2A, rn2B, k11, k22, k12;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t8 = this.constraintCount;
                if (t8 == null)
                  throw $.iae(t8);
                if (!(i < t8))
                  break L0;
                if (i >= contacts.length)
                  throw $.ioore(i);
                contact = contacts[i];
                fixtureA = contact.get$fixtureA();
                fixtureB = contact.get$fixtureB();
                t8 = $.getInterceptor$x(fixtureA);
                shapeA = t8.get$shape(fixtureA);
                t9 = $.getInterceptor$x(fixtureB);
                shapeB = t9.get$shape(fixtureB);
                radiusA = shapeA.get$radius();
                radiusB = shapeB.get$radius();
                bodyA = t8.get$body(fixtureA);
                bodyB = t9.get$body(fixtureB);
                manifold = contact.get$manifold();
                t9 = fixtureA.get$friction();
                t8 = fixtureB.get$friction();
                if (t9 == null)
                  throw t9.$mul();
                if (typeof t8 !== "number")
                  throw $.iae(t8);
                t8 = t9 * t8;
                friction = Math.sqrt(t8);
                restitution = fixtureA.get$restitution();
                restitution0 = fixtureB.get$restitution();
                restitution = $.$gt$n(restitution, restitution0) ? restitution : restitution0;
              case 3:
                state0 = 0;
                vA = bodyA.get$linearVelocity();
                vB = bodyB.get$linearVelocity();
                wA = bodyA.get$angularVelocity();
                wB = bodyB.get$angularVelocity();
                t1.initialize$5(t1, manifold, bodyA.get$originTransform(), radiusA, bodyB.get$originTransform(), radiusB);
                cc = $.$index$asx(this.constraints, i);
                cc.set$bodyA(bodyA);
                cc.set$bodyB(bodyB);
                cc.set$manifold(manifold);
                t8 = cc.get$normal();
                t9 = t7.length;
                if (0 >= t9)
                  throw $.ioore(0);
                t10 = t7[0];
                t8 = t8._f;
                if (0 >= t8.length)
                  throw $.ioore(0);
                t8[0] = t10;
                t10 = cc.get$normal();
                if (1 >= t9)
                  throw $.ioore(1);
                t9 = t7[1];
                t10 = t10._f;
                if (1 >= t10.length)
                  throw $.ioore(1);
                t10[1] = t9;
                cc.set$pointCount(manifold.get$pointCount());
                cc.set$friction(friction);
                cc.set$restitution(restitution);
                t9 = cc.get$localNormal();
                t10 = manifold.get$localNormal()._f;
                if (0 >= t10.length)
                  throw $.ioore(0);
                t10 = t10[0];
                t9 = t9._f;
                if (0 >= t9.length)
                  throw $.ioore(0);
                t9[0] = t10;
                t10 = cc.get$localNormal();
                t9 = manifold.get$localNormal()._f;
                if (1 >= t9.length)
                  throw $.ioore(1);
                t9 = t9[1];
                t10 = t10._f;
                if (1 >= t10.length)
                  throw $.ioore(1);
                t10[1] = t9;
                t9 = cc.get$localPoint();
                t10 = manifold.get$localPoint()._f;
                if (0 >= t10.length)
                  throw $.ioore(0);
                t10 = t10[0];
                t9 = t9._f;
                if (0 >= t9.length)
                  throw $.ioore(0);
                t9[0] = t10;
                t10 = cc.get$localPoint();
                t9 = manifold.get$localPoint()._f;
                if (1 >= t9.length)
                  throw $.ioore(1);
                t9 = t9[1];
                t10 = t10._f;
                if (1 >= t10.length)
                  throw $.ioore(1);
                t10[1] = t9;
                cc.set$radius($.$add$ns(radiusA, radiusB));
                t9 = $.getInterceptor$x(manifold);
                t10 = $.getInterceptor$x(cc);
                t10.set$type(cc, t9.get$type(manifold));
                t8 = vB._f;
                t11 = vA._f;
                j = 0;
                while (true) {
                  t12 = cc.get$pointCount();
                  if (typeof t12 !== "number")
                    throw $.iae(t12);
                  if (!(j < t12))
                    break;
                  cp = $.$index$asx(t9.get$points(manifold), j);
                  ccp = $.$index$asx(t10.get$points(cc), j);
                  t12 = cp.get$normalImpulse();
                  if (typeof t12 !== "number")
                    throw $.iae(t12);
                  ccp.set$normalImpulse(impulseRatio * t12);
                  t12 = cp.get$tangentImpulse();
                  if (typeof t12 !== "number")
                    throw $.iae(t12);
                  ccp.set$tangentImpulse(impulseRatio * t12);
                  t12 = ccp.get$localPoint();
                  t13 = cp.get$localPoint()._f;
                  if (0 >= t13.length)
                    throw $.ioore(0);
                  t13 = t13[0];
                  t12 = t12._f;
                  if (0 >= t12.length)
                    throw $.ioore(0);
                  t12[0] = t13;
                  t13 = ccp.get$localPoint();
                  t12 = cp.get$localPoint()._f;
                  if (1 >= t12.length)
                    throw $.ioore(1);
                  t12 = t12[1];
                  t13 = t13._f;
                  if (1 >= t13.length)
                    throw $.ioore(1);
                  t13[1] = t12;
                  t12 = ccp.get$rA();
                  t13 = $.get$x$x(t3.$index(t2, j));
                  t14 = bodyA.get$sweep().center._f;
                  if (0 >= t14.length)
                    throw $.ioore(0);
                  t14 = $.$sub$n(t13, t14[0]);
                  t12 = t12._f;
                  if (0 >= t12.length)
                    throw $.ioore(0);
                  t12[0] = t14;
                  t14 = ccp.get$rA();
                  t12 = $.get$y$x(t3.$index(t2, j));
                  t13 = bodyA.get$sweep().center._f;
                  if (1 >= t13.length)
                    throw $.ioore(1);
                  t13 = $.$sub$n(t12, t13[1]);
                  t14 = t14._f;
                  if (1 >= t14.length)
                    throw $.ioore(1);
                  t14[1] = t13;
                  t13 = ccp.get$rB();
                  t14 = $.get$x$x(t3.$index(t2, j));
                  t12 = bodyB.get$sweep().center._f;
                  if (0 >= t12.length)
                    throw $.ioore(0);
                  t12 = $.$sub$n(t14, t12[0]);
                  t13 = t13._f;
                  if (0 >= t13.length)
                    throw $.ioore(0);
                  t13[0] = t12;
                  t12 = ccp.get$rB();
                  t13 = $.get$y$x(t3.$index(t2, j));
                  t14 = bodyB.get$sweep().center._f;
                  if (1 >= t14.length)
                    throw $.ioore(1);
                  t14 = $.$sub$n(t13, t14[1]);
                  t12 = t12._f;
                  if (1 >= t12.length)
                    throw $.ioore(1);
                  t12[1] = t14;
                  t14 = ccp.get$rA()._f;
                  t12 = t14.length;
                  if (0 >= t12)
                    throw $.ioore(0);
                  t13 = t14[0];
                  t15 = cc.get$normal()._f;
                  if (1 >= t15.length)
                    throw $.ioore(1);
                  t16 = t15[1];
                  if (1 >= t12)
                    throw $.ioore(1);
                  t14 = t14[1];
                  t15 = t15[0];
                  rnA = t13 * t16 - t14 * t15;
                  t14 = ccp.get$rB()._f;
                  t13 = t14.length;
                  if (0 >= t13)
                    throw $.ioore(0);
                  t12 = t14[0];
                  if (1 >= t13)
                    throw $.ioore(1);
                  rnB = t12 * t16 - t14[1] * t15;
                  ccp.set$normalMass(1 / (bodyA.get$invMass() + bodyB.get$invMass() + bodyA.get$invInertia() * (rnA * rnA) + bodyB.get$invInertia() * (rnB * rnB)));
                  t15 = cc.get$normal()._f;
                  if (1 >= t15.length)
                    throw $.ioore(1);
                  t15 = t15[1];
                  t14 = t4.length;
                  if (0 >= t14)
                    throw $.ioore(0);
                  t4[0] = 1 * t15;
                  t15 = cc.get$normal()._f;
                  if (0 >= t15.length)
                    throw $.ioore(0);
                  t15 = t15[0];
                  if (1 >= t14)
                    throw $.ioore(1);
                  t4[1] = -1 * t15;
                  t15 = ccp.get$rA()._f;
                  t14 = t15.length;
                  if (0 >= t14)
                    throw $.ioore(0);
                  t16 = t15[0];
                  t12 = t4[1];
                  if (1 >= t14)
                    throw $.ioore(1);
                  t15 = t15[1];
                  t14 = t4[0];
                  rtA = t16 * t12 - t15 * t14;
                  t15 = ccp.get$rB()._f;
                  t16 = t15.length;
                  if (0 >= t16)
                    throw $.ioore(0);
                  t13 = t15[0];
                  if (1 >= t16)
                    throw $.ioore(1);
                  rtB = t13 * t12 - t15[1] * t14;
                  ccp.set$tangentMass(1 / (bodyA.get$invMass() + bodyB.get$invMass() + bodyA.get$invInertia() * (rtA * rtA) + bodyB.get$invInertia() * (rtB * rtB)));
                  ccp.set$velocityBias(0);
                  if (typeof wA !== "number")
                    throw wA.$negate();
                  t14 = ccp.get$rA()._f;
                  if (1 >= t14.length)
                    throw $.ioore(1);
                  t14 = t14[1];
                  t15 = t5.length;
                  if (0 >= t15)
                    throw $.ioore(0);
                  t5[0] = -wA * t14;
                  t14 = ccp.get$rA()._f;
                  if (0 >= t14.length)
                    throw $.ioore(0);
                  t14 = t14[0];
                  if (1 >= t15)
                    throw $.ioore(1);
                  t5[1] = wA * t14;
                  if (typeof wB !== "number")
                    throw wB.$negate();
                  t14 = ccp.get$rB()._f;
                  if (1 >= t14.length)
                    throw $.ioore(1);
                  t14 = t14[1];
                  t15 = t8.length;
                  if (0 >= t15)
                    throw $.ioore(0);
                  t12 = t8[0];
                  t13 = t11.length;
                  if (0 >= t13)
                    throw $.ioore(0);
                  t16 = t11[0];
                  t17 = t5[0];
                  t18 = t6.length;
                  if (0 >= t18)
                    throw $.ioore(0);
                  t6[0] = -wB * t14 + t12 - t16 - t17;
                  t17 = ccp.get$rB()._f;
                  if (0 >= t17.length)
                    throw $.ioore(0);
                  t17 = t17[0];
                  if (1 >= t15)
                    throw $.ioore(1);
                  t15 = t8[1];
                  if (1 >= t13)
                    throw $.ioore(1);
                  t13 = t11[1];
                  t16 = t5[1];
                  if (1 >= t18)
                    throw $.ioore(1);
                  t6[1] = wB * t17 + t15 - t13 - t16;
                  t16 = cc.get$normal()._f;
                  t13 = t16.length;
                  if (0 >= t13)
                    throw $.ioore(0);
                  t15 = t16[0];
                  t17 = t6[0];
                  if (1 >= t13)
                    throw $.ioore(1);
                  vRel = t15 * t17 + t16[1] * t6[1];
                  if (vRel < -1) {
                    if (typeof restitution !== "number")
                      throw restitution.$negate();
                    ccp.set$velocityBias(-restitution * vRel);
                  }
                  ++j;
                }
                if (t12 === 2) {
                  ccp1 = $.$index$asx(t10.get$points(cc), 0);
                  ccp2 = $.$index$asx(t10.get$points(cc), 1);
                  invMassA = bodyA.get$invMass();
                  invIA = bodyA.get$invInertia();
                  invMassB = bodyB.get$invMass();
                  invIB = bodyB.get$invInertia();
                  t8 = ccp1.get$rA();
                  t9 = cc.get$normal();
                  t8 = t8._f;
                  t10 = t8.length;
                  if (0 >= t10)
                    throw $.ioore(0);
                  t11 = t8[0];
                  t9 = t9._f;
                  if (1 >= t9.length)
                    throw $.ioore(1);
                  t12 = t9[1];
                  if (1 >= t10)
                    throw $.ioore(1);
                  t8 = t8[1];
                  t9 = t9[0];
                  rn1A = t11 * t12 - t8 * t9;
                  t8 = ccp1.get$rB()._f;
                  t11 = t8.length;
                  if (0 >= t11)
                    throw $.ioore(0);
                  t10 = t8[0];
                  if (1 >= t11)
                    throw $.ioore(1);
                  rn1B = t10 * t12 - t8[1] * t9;
                  t8 = ccp2.get$rA()._f;
                  t10 = t8.length;
                  if (0 >= t10)
                    throw $.ioore(0);
                  t11 = t8[0];
                  if (1 >= t10)
                    throw $.ioore(1);
                  rn2A = t11 * t12 - t8[1] * t9;
                  t8 = ccp2.get$rB()._f;
                  t11 = t8.length;
                  if (0 >= t11)
                    throw $.ioore(0);
                  t10 = t8[0];
                  if (1 >= t11)
                    throw $.ioore(1);
                  rn2B = t10 * t12 - t8[1] * t9;
                  t9 = invMassA + invMassB;
                  t8 = invIA * rn1A;
                  t12 = invIB * rn1B;
                  k11 = t9 + t8 * rn1A + t12 * rn1B;
                  k22 = t9 + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
                  k12 = t9 + t8 * rn2A + t12 * rn2B;
                  if (k11 * k11 < 100 * (k11 * k22 - k12 * k12)) {
                    t8 = cc.get$K().col1._f;
                    if (0 >= t8.length)
                      throw $.ioore(0);
                    t8[0] = k11;
                    t8 = cc.get$K().col1._f;
                    if (1 >= t8.length)
                      throw $.ioore(1);
                    t8[1] = k12;
                    t8 = cc.get$K().col2._f;
                    if (0 >= t8.length)
                      throw $.ioore(0);
                    t8[0] = k12;
                    t8 = cc.get$K().col2._f;
                    if (1 >= t8.length)
                      throw $.ioore(1);
                    t8[1] = k22;
                    t8 = cc.get$normalMass().get$col1();
                    t9 = cc.get$K().col1._f;
                    if (0 >= t9.length)
                      throw $.ioore(0);
                    t9 = t9[0];
                    t8 = t8._f;
                    if (0 >= t8.length)
                      throw $.ioore(0);
                    t8[0] = t9;
                    t9 = cc.get$normalMass().get$col1();
                    t8 = cc.get$K().col1._f;
                    if (1 >= t8.length)
                      throw $.ioore(1);
                    t8 = t8[1];
                    t9 = t9._f;
                    if (1 >= t9.length)
                      throw $.ioore(1);
                    t9[1] = t8;
                    t8 = cc.get$normalMass().get$col2();
                    t9 = cc.get$K().col2._f;
                    if (0 >= t9.length)
                      throw $.ioore(0);
                    t9 = t9[0];
                    t8 = t8._f;
                    if (0 >= t8.length)
                      throw $.ioore(0);
                    t8[0] = t9;
                    t9 = cc.get$normalMass().get$col2();
                    t8 = cc.get$K().col2._f;
                    if (1 >= t8.length)
                      throw $.ioore(1);
                    t8 = t8[1];
                    t9 = t9._f;
                    if (1 >= t9.length)
                      throw $.ioore(1);
                    t9[1] = t8;
                    cc.get$normalMass().invertLocal$0();
                  } else
                    cc.set$pointCount(1);
                }
                ++i;
            }
    }
  },
  warmStart$0: function() {
    var t1, t2, i, t3, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, normal, t4, j, t5, ccp, t6, t7, t8, t9, t10, t11, Px, Py;
    t1 = this.tangent;
    t2 = t1._f;
    i = 0;
    while (true) {
      t3 = this.constraintCount;
      if (t3 == null)
        throw $.iae(t3);
      if (!(i < t3))
        break;
      c = $.$index$asx(this.constraints, i);
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      invMassA = bodyA.get$invMass();
      invIA = bodyA.get$invInertia();
      invMassB = bodyB.get$invMass();
      invIB = bodyB.get$invInertia();
      normal = c.get$normal();
      $.Vector_crossVectorAndNumToOut(normal, 1, t1);
      t3 = $.getInterceptor$x(c);
      t4 = normal._f;
      j = 0;
      while (true) {
        t5 = c.get$pointCount();
        if (typeof t5 !== "number")
          throw $.iae(t5);
        if (!(j < t5))
          break;
        ccp = $.$index$asx(t3.get$points(c), j);
        t5 = ccp.get$normalImpulse();
        t6 = t4.length;
        if (0 >= t6)
          throw $.ioore(0);
        t7 = $.getInterceptor$n(t5);
        t8 = t7.$mul(t5, t4[0]);
        t9 = ccp.get$tangentImpulse();
        t10 = t2.length;
        if (0 >= t10)
          throw $.ioore(0);
        t11 = $.getInterceptor$n(t9);
        Px = $.$add$ns(t8, t11.$mul(t9, t2[0]));
        if (1 >= t6)
          throw $.ioore(1);
        t5 = t7.$mul(t5, t4[1]);
        if (1 >= t10)
          throw $.ioore(1);
        Py = $.$add$ns(t5, t11.$mul(t9, t2[1]));
        t9 = bodyA.get$angularVelocity();
        t11 = ccp.get$rA()._f;
        t5 = t11.length;
        if (0 >= t5)
          throw $.ioore(0);
        t10 = t11[0];
        if (typeof Py !== "number")
          throw $.iae(Py);
        if (1 >= t5)
          throw $.ioore(1);
        t11 = t11[1];
        if (typeof Px !== "number")
          throw $.iae(Px);
        bodyA.set$angularVelocity($.$sub$n(t9, invIA * (t10 * Py - t11 * Px)));
        t11 = bodyA.get$linearVelocity()._f;
        if (0 >= t11.length)
          throw $.ioore(0);
        t11[0] = t11[0] - Px * invMassA;
        t11 = bodyA.get$linearVelocity()._f;
        if (1 >= t11.length)
          throw $.ioore(1);
        t11[1] = t11[1] - Py * invMassA;
        t11 = bodyB.get$angularVelocity();
        t10 = ccp.get$rB()._f;
        t9 = t10.length;
        if (0 >= t9)
          throw $.ioore(0);
        t5 = t10[0];
        if (1 >= t9)
          throw $.ioore(1);
        bodyB.set$angularVelocity($.$add$ns(t11, invIB * (t5 * Py - t10[1] * Px)));
        t10 = bodyB.get$linearVelocity()._f;
        if (0 >= t10.length)
          throw $.ioore(0);
        t10[0] = t10[0] + Px * invMassB;
        t10 = bodyB.get$linearVelocity()._f;
        if (1 >= t10.length)
          throw $.ioore(1);
        t10[1] = t10[1] + Py * invMassB;
        ++j;
      }
      ++i;
    }
  },
  solveVelocityConstraints$0: function() {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, i, t12, c, bodyA, bodyB, wA, wB, vA, vB, invMassA, invIA, invMassB, invIB, t13, friction, t14, j, t15, ccp, a, t16, t17, t18, t19, t20, t21, t22, lambda, maxFriction, newImpulse, Px, Py, cp1, a1, b, cp2, t23, t24, vn1, vn2;
    t1 = this.dv._f;
    t2 = this.tangent._f;
    t3 = this.x;
    t4 = this.d._f;
    t5 = t3._f;
    t6 = this.P1._f;
    t7 = this.P2._f;
    t8 = this.temp1._f;
    t9 = this.temp2._f;
    t10 = this.dv1._f;
    t11 = this.dv2._f;
    i = 0;
    while (true) {
      t12 = this.constraintCount;
      if (t12 == null)
        throw $.iae(t12);
      if (!(i < t12))
        break;
      t12 = this.constraints;
      if (typeof t12 !== "string" && (typeof t12 !== "object" || t12 === null || t12.constructor !== Array && !$.isJsIndexable(t12, t12[$.dispatchPropertyName])))
        return this.solveVelocityConstraints$0$bailout(1, t3, i, t12, t5, t4, t1, t7, t9, t6, t8, t2, t10, t11);
      if (i >= t12.length)
        throw $.ioore(i);
      c = t12[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      wA = bodyA.get$angularVelocity();
      if (typeof wA !== "number")
        return this.solveVelocityConstraints$0$bailout(2, t3, i, 0, t5, t4, t1, t7, t9, t6, t8, t2, t10, t11, bodyA, bodyB, wA, c);
      wB = bodyB.get$angularVelocity();
      if (typeof wB !== "number")
        return this.solveVelocityConstraints$0$bailout(3, t3, i, 0, t5, t4, t1, t7, t9, t6, t8, t2, t10, t11, bodyA, bodyB, wA, c, wB);
      vA = bodyA.get$linearVelocity();
      vB = bodyB.get$linearVelocity();
      invMassA = bodyA.get$invMass();
      invIA = bodyA.get$invInertia();
      invMassB = bodyB.get$invMass();
      invIB = bodyB.get$invInertia();
      t12 = c.get$normal()._f;
      if (1 >= t12.length)
        throw $.ioore(1);
      t12 = t12[1];
      t13 = t2.length;
      if (0 >= t13)
        throw $.ioore(0);
      t2[0] = 1 * t12;
      t12 = c.get$normal()._f;
      if (0 >= t12.length)
        throw $.ioore(0);
      t12 = t12[0];
      if (1 >= t13)
        throw $.ioore(1);
      t2[1] = -1 * t12;
      friction = c.get$friction();
      t12 = $.getInterceptor$x(c);
      t13 = vB._f;
      t14 = vA._f;
      j = 0;
      while (true) {
        t15 = c.get$pointCount();
        if (typeof t15 !== "number")
          throw $.iae(t15);
        if (!(j < t15))
          break;
        t15 = t12.get$points(c);
        if (typeof t15 !== "string" && (typeof t15 !== "object" || t15 === null || t15.constructor !== Array && !$.isJsIndexable(t15, t15[$.dispatchPropertyName])))
          return this.solveVelocityConstraints$0$bailout(4, t3, i, t12, t5, t4, t1, t7, t9, t6, t8, t2, t10, t11, bodyA, bodyB, wA, c, wB, t15, invMassA, invIA, invMassB, invIB, friction, t13, t14, j);
        if (j >= t15.length)
          throw $.ioore(j);
        ccp = t15[j];
        a = ccp.get$rA();
        t15 = ccp.get$rB()._f;
        if (1 >= t15.length)
          throw $.ioore(1);
        t15 = t15[1];
        t16 = t13.length;
        if (0 >= t16)
          throw $.ioore(0);
        t17 = t13[0];
        t18 = t14.length;
        if (0 >= t18)
          throw $.ioore(0);
        t19 = t14[0];
        t20 = a._f;
        if (1 >= t20.length)
          throw $.ioore(1);
        t21 = t20[1];
        t22 = t1.length;
        if (0 >= t22)
          throw $.ioore(0);
        t1[0] = -wB * t15 + t17 - t19 + wA * t21;
        t21 = ccp.get$rB()._f;
        if (0 >= t21.length)
          throw $.ioore(0);
        t21 = t21[0];
        if (1 >= t16)
          throw $.ioore(1);
        t16 = t13[1];
        if (1 >= t18)
          throw $.ioore(1);
        t18 = t14[1];
        t20 = t20[0];
        if (1 >= t22)
          throw $.ioore(1);
        t1[1] = wB * t21 + t16 - t18 - wA * t20;
        t20 = t1[0];
        t18 = t2.length;
        if (0 >= t18)
          throw $.ioore(0);
        t16 = t2[0];
        t21 = t1[1];
        if (1 >= t18)
          throw $.ioore(1);
        t18 = t2[1];
        lambda = ccp.get$tangentMass() * -(t20 * t16 + t21 * t18);
        t18 = ccp.get$normalImpulse();
        if (friction == null)
          throw friction.$mul();
        if (typeof t18 !== "number")
          throw $.iae(t18);
        maxFriction = friction * t18;
        t18 = ccp.get$tangentImpulse();
        if (typeof t18 !== "number")
          return this.solveVelocityConstraints$0$bailout(5, t3, i, t12, t5, t4, t1, t7, t9, t6, t8, t2, t10, t11, bodyA, bodyB, wA, c, wB, 0, invMassA, invIA, invMassB, invIB, friction, t13, t14, j, lambda, maxFriction, ccp, $.JSNumber_methods, t18);
        newImpulse = $.max(-maxFriction, $.min(t18 + lambda, maxFriction));
        t18 = ccp.get$tangentImpulse();
        if (typeof t18 !== "number")
          throw $.iae(t18);
        lambda = newImpulse - t18;
        t18 = t2.length;
        if (0 >= t18)
          throw $.ioore(0);
        Px = t2[0] * lambda;
        if (1 >= t18)
          throw $.ioore(1);
        Py = t2[1] * lambda;
        t18 = t14.length;
        if (0 >= t18)
          throw $.ioore(0);
        t14[0] = t14[0] - Px * invMassA;
        if (1 >= t18)
          throw $.ioore(1);
        t14[1] = t14[1] - Py * invMassA;
        t18 = ccp.get$rA()._f;
        t21 = t18.length;
        if (0 >= t21)
          throw $.ioore(0);
        t16 = t18[0];
        if (1 >= t21)
          throw $.ioore(1);
        wA -= invIA * (t16 * Py - t18[1] * Px);
        t18 = t13.length;
        if (0 >= t18)
          throw $.ioore(0);
        t13[0] = t13[0] + Px * invMassB;
        if (1 >= t18)
          throw $.ioore(1);
        t13[1] = t13[1] + Py * invMassB;
        t18 = ccp.get$rB()._f;
        t16 = t18.length;
        if (0 >= t16)
          throw $.ioore(0);
        t21 = t18[0];
        if (1 >= t16)
          throw $.ioore(1);
        wB += invIB * (t21 * Py - t18[1] * Px);
        ccp.set$tangentImpulse(newImpulse);
        ++j;
      }
      t15 = t15 === 1;
      t16 = t12.get$points(c);
      if (typeof t16 !== "string" && (typeof t16 !== "object" || t16 === null || t16.constructor !== Array && !$.isJsIndexable(t16, t16[$.dispatchPropertyName])))
        return this.solveVelocityConstraints$0$bailout(6, t3, i, t12, t5, t4, t1, t7, t9, t6, t8, t2, t10, t11, bodyA, bodyB, wA, c, wB, t15, invMassA, invIA, invMassB, invIB, 0, t13, t14, 0, 0, 0, 0, 0, 0, t16, $.JSNumber_methods);
      t12 = t16.length;
      cp1 = t16[0];
      t17 = -wB;
      if (t15) {
        if (0 >= t12)
          throw $.ioore(0);
        a1 = cp1.get$rA();
        t12 = cp1.get$rB()._f;
        if (1 >= t12.length)
          throw $.ioore(1);
        t12 = t12[1];
        t15 = t13.length;
        if (0 >= t15)
          throw $.ioore(0);
        t16 = t13[0];
        t18 = t14.length;
        if (0 >= t18)
          throw $.ioore(0);
        t19 = t14[0];
        t20 = a1._f;
        if (1 >= t20.length)
          throw $.ioore(1);
        t21 = t20[1];
        t22 = t1.length;
        if (0 >= t22)
          throw $.ioore(0);
        t1[0] = t17 * t12 + t16 - t19 + wA * t21;
        t21 = cp1.get$rB()._f;
        if (0 >= t21.length)
          throw $.ioore(0);
        t21 = t21[0];
        if (1 >= t15)
          throw $.ioore(1);
        t15 = t13[1];
        if (1 >= t18)
          throw $.ioore(1);
        t18 = t14[1];
        t20 = t20[0];
        if (1 >= t22)
          throw $.ioore(1);
        t1[1] = wB * t21 + t15 - t18 - wA * t20;
        b = c.get$normal();
        t20 = t1[0];
        t18 = b._f;
        t15 = t18.length;
        if (0 >= t15)
          throw $.ioore(0);
        t21 = t18[0];
        t22 = t1[1];
        if (1 >= t15)
          throw $.ioore(1);
        t18 = t18[1];
        t15 = cp1.get$normalMass();
        if (typeof t15 !== "number")
          throw t15.$negate();
        lambda = -t15 * (t20 * t21 + t22 * t18 - cp1.get$velocityBias());
        t22 = cp1.get$normalImpulse();
        if (typeof t22 !== "number")
          return this.solveVelocityConstraints$0$bailout(7, t3, i, 0, t5, t4, t1, t7, t9, t6, t8, t2, t10, t11, bodyA, bodyB, wA, 0, wB, 0, invMassA, invIA, invMassB, invIB, 0, t13, t14, 0, lambda, 0, cp1, t21, t18, 0, $.JSNumber_methods, t22);
        a = t22 + lambda;
        newImpulse = a > 0 ? a : 0;
        lambda = newImpulse - t22;
        Px = t21 * lambda;
        Py = t18 * lambda;
        t14[0] = t14[0] - Px * invMassA;
        t14[1] = t14[1] - Py * invMassA;
        t12 = cp1.get$rA()._f;
        t15 = t12.length;
        if (0 >= t15)
          throw $.ioore(0);
        t16 = t12[0];
        if (1 >= t15)
          throw $.ioore(1);
        wA -= invIA * (t16 * Py - t12[1] * Px);
        t13[0] = t13[0] + Px * invMassB;
        t13[1] = t13[1] + Py * invMassB;
        t12 = cp1.get$rB()._f;
        t16 = t12.length;
        if (0 >= t16)
          throw $.ioore(0);
        t15 = t12[0];
        if (1 >= t16)
          throw $.ioore(1);
        wB += invIB * (t15 * Py - t12[1] * Px);
        cp1.set$normalImpulse(newImpulse);
      } else {
        if (0 >= t12)
          throw $.ioore(0);
        if (1 >= t12)
          throw $.ioore(1);
        cp2 = t16[1];
        t12 = cp1.get$normalImpulse();
        t15 = cp2.get$normalImpulse();
        t16 = new $.Vector(new Float64Array(2))._f;
        t18 = t16.length;
        if (0 >= t18)
          throw $.ioore(0);
        t16[0] = t12;
        if (1 >= t18)
          throw $.ioore(1);
        t16[1] = t15;
        t15 = cp1.get$rB()._f;
        if (1 >= t15.length)
          throw $.ioore(1);
        t15 = t15[1];
        t18 = t13.length;
        if (0 >= t18)
          throw $.ioore(0);
        t12 = t13[0];
        t19 = t14.length;
        if (0 >= t19)
          throw $.ioore(0);
        t20 = t14[0];
        t21 = cp1.get$rA()._f;
        if (1 >= t21.length)
          throw $.ioore(1);
        t21 = t21[1];
        t22 = t10.length;
        if (0 >= t22)
          throw $.ioore(0);
        t10[0] = t17 * t15 + t12 - t20 + wA * t21;
        t21 = cp1.get$rB()._f;
        if (0 >= t21.length)
          throw $.ioore(0);
        t21 = t21[0];
        if (1 >= t18)
          throw $.ioore(1);
        t18 = t13[1];
        if (1 >= t19)
          throw $.ioore(1);
        t19 = t14[1];
        t20 = cp1.get$rA()._f;
        if (0 >= t20.length)
          throw $.ioore(0);
        t20 = t20[0];
        if (1 >= t22)
          throw $.ioore(1);
        t10[1] = wB * t21 + t18 - t19 - wA * t20;
        t20 = cp2.get$rB()._f;
        if (1 >= t20.length)
          throw $.ioore(1);
        t20 = t20[1];
        t19 = t13[0];
        t18 = t14[0];
        t21 = cp2.get$rA()._f;
        if (1 >= t21.length)
          throw $.ioore(1);
        t21 = t21[1];
        t22 = t11.length;
        if (0 >= t22)
          throw $.ioore(0);
        t11[0] = t17 * t20 + t19 - t18 + wA * t21;
        t21 = cp2.get$rB()._f;
        if (0 >= t21.length)
          throw $.ioore(0);
        t21 = t21[0];
        t18 = t13[1];
        t19 = t14[1];
        t20 = cp2.get$rA()._f;
        if (0 >= t20.length)
          throw $.ioore(0);
        t20 = t20[0];
        if (1 >= t22)
          throw $.ioore(1);
        t11[1] = wB * t21 + t18 - t19 - wA * t20;
        t20 = t10[0];
        t19 = c.get$normal()._f;
        t18 = t19.length;
        if (0 >= t18)
          throw $.ioore(0);
        t21 = t19[0];
        t22 = t10[1];
        if (1 >= t18)
          throw $.ioore(1);
        t19 = t19[1];
        t18 = t11[0];
        t17 = t11[1];
        t12 = cp1.get$velocityBias();
        t15 = cp2.get$velocityBias();
        b = new $.Vector(new Float64Array(2));
        t23 = b._f;
        t24 = t23.length;
        if (0 >= t24)
          throw $.ioore(0);
        t23[0] = t20 * t21 + t22 * t19 - t12;
        if (1 >= t24)
          throw $.ioore(1);
        t23[1] = t18 * t21 + t17 * t19 - t15;
        t15 = c.get$K();
        t19 = t15.col1._f;
        if (0 >= t19.length)
          throw $.ioore(0);
        t19 = t19[0];
        t17 = t16.length;
        if (0 >= t17)
          throw $.ioore(0);
        t21 = t16[0];
        t15 = t15.col2._f;
        if (0 >= t15.length)
          throw $.ioore(0);
        t15 = t15[0];
        if (1 >= t17)
          throw $.ioore(1);
        t17 = t16[1];
        t18 = t9.length;
        if (0 >= t18)
          throw $.ioore(0);
        t9[0] = t19 * t21 + t15 * t17;
        t17 = c.get$K();
        t15 = t17.col1._f;
        if (1 >= t15.length)
          throw $.ioore(1);
        t15 = t15[1];
        t21 = t16[0];
        t17 = t17.col2._f;
        if (1 >= t17.length)
          throw $.ioore(1);
        t17 = t17[1];
        t19 = t16[1];
        if (1 >= t18)
          throw $.ioore(1);
        t9[1] = t15 * t21 + t17 * t19;
        t23[0] = t23[0] - t9[0];
        t23[1] = t23[1] - t9[1];
        $loop$1: {
          $.Matrix22_mulMatrixAndVectorToOut(c.get$normalMass(), b, t3);
          t12 = t5.length;
          if (0 >= t12)
            throw $.ioore(0);
          t5[0] = t5[0] * -1;
          if (1 >= t12)
            throw $.ioore(1);
          t5[1] = t5[1] * -1;
          t12 = t5[0];
          if (t12 >= 0 && t5[1] >= 0) {
            t15 = t4.length;
            if (0 >= t15)
              throw $.ioore(0);
            t4[0] = t12;
            t12 = t5[1];
            if (1 >= t15)
              throw $.ioore(1);
            t4[1] = t12;
            t12 = t4[0];
            t15 = t16.length;
            if (0 >= t15)
              throw $.ioore(0);
            t4[0] = t12 - t16[0];
            t12 = t4[1];
            if (1 >= t15)
              throw $.ioore(1);
            t4[1] = t12 - t16[1];
            t16 = c.get$normal()._f;
            t12 = t16.length;
            if (0 >= t12)
              throw $.ioore(0);
            t15 = t16[0];
            t17 = t6.length;
            if (0 >= t17)
              throw $.ioore(0);
            t6[0] = t15;
            if (1 >= t12)
              throw $.ioore(1);
            t16 = t16[1];
            if (1 >= t17)
              throw $.ioore(1);
            t6[1] = t16;
            t16 = t4[0];
            t6[0] = t6[0] * t16;
            t6[1] = t6[1] * t16;
            t16 = c.get$normal()._f;
            t17 = t16.length;
            if (0 >= t17)
              throw $.ioore(0);
            t12 = t16[0];
            t15 = t7.length;
            if (0 >= t15)
              throw $.ioore(0);
            t7[0] = t12;
            if (1 >= t17)
              throw $.ioore(1);
            t16 = t16[1];
            if (1 >= t15)
              throw $.ioore(1);
            t7[1] = t16;
            t16 = t4[1];
            t7[0] = t7[0] * t16;
            t7[1] = t7[1] * t16;
            t16 = t6[0];
            t15 = t8.length;
            if (0 >= t15)
              throw $.ioore(0);
            t8[0] = t16;
            t16 = t6[1];
            if (1 >= t15)
              throw $.ioore(1);
            t8[1] = t16;
            t8[0] = t8[0] + t7[0];
            t8[1] = t8[1] + t7[1];
            t16 = t8[0];
            t15 = t9.length;
            if (0 >= t15)
              throw $.ioore(0);
            t9[0] = t16;
            t16 = t8[1];
            if (1 >= t15)
              throw $.ioore(1);
            t9[1] = t16;
            t9[0] = t9[0] * invMassA;
            t9[1] = t9[1] * invMassA;
            t16 = t14.length;
            if (0 >= t16)
              throw $.ioore(0);
            t14[0] = t14[0] - t9[0];
            if (1 >= t16)
              throw $.ioore(1);
            t14[1] = t14[1] - t9[1];
            t9[0] = t8[0];
            t9[1] = t8[1];
            t9[0] = t9[0] * invMassB;
            t9[1] = t9[1] * invMassB;
            t16 = t13.length;
            if (0 >= t16)
              throw $.ioore(0);
            t13[0] = t13[0] + t9[0];
            if (1 >= t16)
              throw $.ioore(1);
            t13[1] = t13[1] + t9[1];
            t16 = cp1.get$rA()._f;
            t15 = t16.length;
            if (0 >= t15)
              throw $.ioore(0);
            t17 = t16[0];
            t12 = t6[1];
            if (1 >= t15)
              throw $.ioore(1);
            t16 = t16[1];
            t15 = t6[0];
            t18 = cp2.get$rA()._f;
            t19 = t18.length;
            if (0 >= t19)
              throw $.ioore(0);
            t20 = t18[0];
            t21 = t7[1];
            if (1 >= t19)
              throw $.ioore(1);
            t18 = t18[1];
            t19 = t7[0];
            wA -= invIA * (t17 * t12 - t16 * t15 + (t20 * t21 - t18 * t19));
            t18 = cp1.get$rB()._f;
            t20 = t18.length;
            if (0 >= t20)
              throw $.ioore(0);
            t16 = t18[0];
            if (1 >= t20)
              throw $.ioore(1);
            t18 = t18[1];
            t20 = cp2.get$rB()._f;
            t17 = t20.length;
            if (0 >= t17)
              throw $.ioore(0);
            t22 = t20[0];
            if (1 >= t17)
              throw $.ioore(1);
            wB += invIB * (t16 * t12 - t18 * t15 + (t22 * t21 - t20[1] * t19));
            cp1.set$normalImpulse(t5[0]);
            if (1 >= t5.length)
              throw $.ioore(1);
            cp2.set$normalImpulse(t5[1]);
            break $loop$1;
          }
          t12 = cp1.get$normalMass();
          if (typeof t12 !== "number")
            throw t12.$negate();
          t15 = t23.length;
          if (0 >= t15)
            throw $.ioore(0);
          t5[0] = -t12 * t23[0];
          t5[1] = 0;
          t12 = c.get$K().col1._f;
          if (1 >= t12.length)
            throw $.ioore(1);
          t12 = t12[1];
          t17 = t5[0];
          if (1 >= t15)
            throw $.ioore(1);
          t15 = t23[1];
          if (t17 >= 0 && t12 * t17 + t15 >= 0) {
            t12 = t4.length;
            if (0 >= t12)
              throw $.ioore(0);
            t4[0] = t17;
            t17 = t5[1];
            if (1 >= t12)
              throw $.ioore(1);
            t4[1] = t17;
            t17 = t4[0];
            t12 = t16.length;
            if (0 >= t12)
              throw $.ioore(0);
            t4[0] = t17 - t16[0];
            t17 = t4[1];
            if (1 >= t12)
              throw $.ioore(1);
            t4[1] = t17 - t16[1];
            t16 = c.get$normal()._f;
            t17 = t16.length;
            if (0 >= t17)
              throw $.ioore(0);
            t12 = t16[0];
            t15 = t6.length;
            if (0 >= t15)
              throw $.ioore(0);
            t6[0] = t12;
            if (1 >= t17)
              throw $.ioore(1);
            t16 = t16[1];
            if (1 >= t15)
              throw $.ioore(1);
            t6[1] = t16;
            t16 = t4[0];
            t6[0] = t6[0] * t16;
            t6[1] = t6[1] * t16;
            t16 = c.get$normal()._f;
            t15 = t16.length;
            if (0 >= t15)
              throw $.ioore(0);
            t17 = t16[0];
            t12 = t7.length;
            if (0 >= t12)
              throw $.ioore(0);
            t7[0] = t17;
            if (1 >= t15)
              throw $.ioore(1);
            t16 = t16[1];
            if (1 >= t12)
              throw $.ioore(1);
            t7[1] = t16;
            t16 = t4[1];
            t7[0] = t7[0] * t16;
            t7[1] = t7[1] * t16;
            t16 = t6[0];
            t12 = t8.length;
            if (0 >= t12)
              throw $.ioore(0);
            t8[0] = t16;
            t16 = t6[1];
            if (1 >= t12)
              throw $.ioore(1);
            t8[1] = t16;
            t8[0] = t8[0] + t7[0];
            t8[1] = t8[1] + t7[1];
            t16 = t8[0];
            t12 = t9.length;
            if (0 >= t12)
              throw $.ioore(0);
            t9[0] = t16;
            t16 = t8[1];
            if (1 >= t12)
              throw $.ioore(1);
            t9[1] = t16;
            t9[0] = t9[0] * invMassA;
            t9[1] = t9[1] * invMassA;
            t16 = t14.length;
            if (0 >= t16)
              throw $.ioore(0);
            t14[0] = t14[0] - t9[0];
            if (1 >= t16)
              throw $.ioore(1);
            t14[1] = t14[1] - t9[1];
            t9[0] = t8[0];
            t9[1] = t8[1];
            t9[0] = t9[0] * invMassB;
            t9[1] = t9[1] * invMassB;
            t16 = t13.length;
            if (0 >= t16)
              throw $.ioore(0);
            t13[0] = t13[0] + t9[0];
            if (1 >= t16)
              throw $.ioore(1);
            t13[1] = t13[1] + t9[1];
            t16 = cp1.get$rA()._f;
            t12 = t16.length;
            if (0 >= t12)
              throw $.ioore(0);
            t15 = t16[0];
            t17 = t6[1];
            if (1 >= t12)
              throw $.ioore(1);
            t16 = t16[1];
            t12 = t6[0];
            t18 = cp2.get$rA()._f;
            t19 = t18.length;
            if (0 >= t19)
              throw $.ioore(0);
            t20 = t18[0];
            t21 = t7[1];
            if (1 >= t19)
              throw $.ioore(1);
            t18 = t18[1];
            t19 = t7[0];
            wA -= invIA * (t15 * t17 - t16 * t12 + (t20 * t21 - t18 * t19));
            t18 = cp1.get$rB()._f;
            t20 = t18.length;
            if (0 >= t20)
              throw $.ioore(0);
            t16 = t18[0];
            if (1 >= t20)
              throw $.ioore(1);
            t18 = t18[1];
            t20 = cp2.get$rB()._f;
            t15 = t20.length;
            if (0 >= t15)
              throw $.ioore(0);
            t22 = t20[0];
            if (1 >= t15)
              throw $.ioore(1);
            wB += invIB * (t16 * t17 - t18 * t12 + (t22 * t21 - t20[1] * t19));
            cp1.set$normalImpulse(t5[0]);
            if (1 >= t5.length)
              throw $.ioore(1);
            cp2.set$normalImpulse(t5[1]);
            break $loop$1;
          }
          t5[0] = 0;
          t12 = cp2.get$normalMass();
          if (typeof t12 !== "number")
            throw t12.$negate();
          t5[1] = -t12 * t23[1];
          t12 = c.get$K().col2._f;
          if (0 >= t12.length)
            throw $.ioore(0);
          t12 = t12[0];
          t15 = t5[1];
          t17 = t23[0];
          if (t15 >= 0 && t12 * t15 + t17 >= 0) {
            t12 = t5[0];
            t15 = t4.length;
            if (0 >= t15)
              throw $.ioore(0);
            t4[0] = t12;
            t12 = t5[1];
            if (1 >= t15)
              throw $.ioore(1);
            t4[1] = t12;
            t12 = t4[0];
            t15 = t16.length;
            if (0 >= t15)
              throw $.ioore(0);
            t4[0] = t12 - t16[0];
            t12 = t4[1];
            if (1 >= t15)
              throw $.ioore(1);
            t4[1] = t12 - t16[1];
            t16 = c.get$normal()._f;
            t12 = t16.length;
            if (0 >= t12)
              throw $.ioore(0);
            t15 = t16[0];
            t17 = t6.length;
            if (0 >= t17)
              throw $.ioore(0);
            t6[0] = t15;
            if (1 >= t12)
              throw $.ioore(1);
            t16 = t16[1];
            if (1 >= t17)
              throw $.ioore(1);
            t6[1] = t16;
            t16 = t4[0];
            t6[0] = t6[0] * t16;
            t6[1] = t6[1] * t16;
            t16 = c.get$normal()._f;
            t17 = t16.length;
            if (0 >= t17)
              throw $.ioore(0);
            t12 = t16[0];
            t15 = t7.length;
            if (0 >= t15)
              throw $.ioore(0);
            t7[0] = t12;
            if (1 >= t17)
              throw $.ioore(1);
            t16 = t16[1];
            if (1 >= t15)
              throw $.ioore(1);
            t7[1] = t16;
            t16 = t4[1];
            t7[0] = t7[0] * t16;
            t7[1] = t7[1] * t16;
            t16 = t6[0];
            t15 = t8.length;
            if (0 >= t15)
              throw $.ioore(0);
            t8[0] = t16;
            t16 = t6[1];
            if (1 >= t15)
              throw $.ioore(1);
            t8[1] = t16;
            t8[0] = t8[0] + t7[0];
            t8[1] = t8[1] + t7[1];
            t16 = t8[0];
            t15 = t9.length;
            if (0 >= t15)
              throw $.ioore(0);
            t9[0] = t16;
            t16 = t8[1];
            if (1 >= t15)
              throw $.ioore(1);
            t9[1] = t16;
            t9[0] = t9[0] * invMassA;
            t9[1] = t9[1] * invMassA;
            t16 = t14.length;
            if (0 >= t16)
              throw $.ioore(0);
            t14[0] = t14[0] - t9[0];
            if (1 >= t16)
              throw $.ioore(1);
            t14[1] = t14[1] - t9[1];
            t9[0] = t8[0];
            t9[1] = t8[1];
            t9[0] = t9[0] * invMassB;
            t9[1] = t9[1] * invMassB;
            t16 = t13.length;
            if (0 >= t16)
              throw $.ioore(0);
            t13[0] = t13[0] + t9[0];
            if (1 >= t16)
              throw $.ioore(1);
            t13[1] = t13[1] + t9[1];
            t16 = cp1.get$rA()._f;
            t15 = t16.length;
            if (0 >= t15)
              throw $.ioore(0);
            t17 = t16[0];
            t12 = t6[1];
            if (1 >= t15)
              throw $.ioore(1);
            t16 = t16[1];
            t15 = t6[0];
            t18 = cp2.get$rA()._f;
            t19 = t18.length;
            if (0 >= t19)
              throw $.ioore(0);
            t20 = t18[0];
            t21 = t7[1];
            if (1 >= t19)
              throw $.ioore(1);
            t18 = t18[1];
            t19 = t7[0];
            wA -= invIA * (t17 * t12 - t16 * t15 + (t20 * t21 - t18 * t19));
            t18 = cp1.get$rB()._f;
            t20 = t18.length;
            if (0 >= t20)
              throw $.ioore(0);
            t16 = t18[0];
            if (1 >= t20)
              throw $.ioore(1);
            t18 = t18[1];
            t20 = cp2.get$rB()._f;
            t17 = t20.length;
            if (0 >= t17)
              throw $.ioore(0);
            t22 = t20[0];
            if (1 >= t17)
              throw $.ioore(1);
            wB += invIB * (t16 * t12 - t18 * t15 + (t22 * t21 - t20[1] * t19));
            cp1.set$normalImpulse(t5[0]);
            if (1 >= t5.length)
              throw $.ioore(1);
            cp2.set$normalImpulse(t5[1]);
            break $loop$1;
          }
          t5[0] = 0;
          t5[1] = 0;
          vn1 = t23[0];
          vn2 = t23[1];
          if (vn1 >= 0 && vn2 >= 0) {
            t12 = t5[0];
            t15 = t4.length;
            if (0 >= t15)
              throw $.ioore(0);
            t4[0] = t12;
            t12 = t5[1];
            if (1 >= t15)
              throw $.ioore(1);
            t4[1] = t12;
            t12 = t4[0];
            t15 = t16.length;
            if (0 >= t15)
              throw $.ioore(0);
            t4[0] = t12 - t16[0];
            t12 = t4[1];
            if (1 >= t15)
              throw $.ioore(1);
            t4[1] = t12 - t16[1];
            t16 = c.get$normal()._f;
            t12 = t16.length;
            if (0 >= t12)
              throw $.ioore(0);
            t15 = t16[0];
            t17 = t6.length;
            if (0 >= t17)
              throw $.ioore(0);
            t6[0] = t15;
            if (1 >= t12)
              throw $.ioore(1);
            t16 = t16[1];
            if (1 >= t17)
              throw $.ioore(1);
            t6[1] = t16;
            t16 = t4[0];
            t6[0] = t6[0] * t16;
            t6[1] = t6[1] * t16;
            t16 = c.get$normal()._f;
            t17 = t16.length;
            if (0 >= t17)
              throw $.ioore(0);
            t12 = t16[0];
            t15 = t7.length;
            if (0 >= t15)
              throw $.ioore(0);
            t7[0] = t12;
            if (1 >= t17)
              throw $.ioore(1);
            t16 = t16[1];
            if (1 >= t15)
              throw $.ioore(1);
            t7[1] = t16;
            t16 = t4[1];
            t7[0] = t7[0] * t16;
            t7[1] = t7[1] * t16;
            t16 = t6[0];
            t15 = t8.length;
            if (0 >= t15)
              throw $.ioore(0);
            t8[0] = t16;
            t16 = t6[1];
            if (1 >= t15)
              throw $.ioore(1);
            t8[1] = t16;
            t8[0] = t8[0] + t7[0];
            t8[1] = t8[1] + t7[1];
            t16 = t8[0];
            t15 = t9.length;
            if (0 >= t15)
              throw $.ioore(0);
            t9[0] = t16;
            t16 = t8[1];
            if (1 >= t15)
              throw $.ioore(1);
            t9[1] = t16;
            t9[0] = t9[0] * invMassA;
            t9[1] = t9[1] * invMassA;
            t16 = t14.length;
            if (0 >= t16)
              throw $.ioore(0);
            t14[0] = t14[0] - t9[0];
            if (1 >= t16)
              throw $.ioore(1);
            t14[1] = t14[1] - t9[1];
            t9[0] = t8[0];
            t9[1] = t8[1];
            t9[0] = t9[0] * invMassB;
            t9[1] = t9[1] * invMassB;
            t16 = t13.length;
            if (0 >= t16)
              throw $.ioore(0);
            t13[0] = t13[0] + t9[0];
            if (1 >= t16)
              throw $.ioore(1);
            t13[1] = t13[1] + t9[1];
            t16 = cp1.get$rA()._f;
            t15 = t16.length;
            if (0 >= t15)
              throw $.ioore(0);
            t17 = t16[0];
            t12 = t6[1];
            if (1 >= t15)
              throw $.ioore(1);
            t16 = t16[1];
            t15 = t6[0];
            t18 = cp2.get$rA()._f;
            t19 = t18.length;
            if (0 >= t19)
              throw $.ioore(0);
            t20 = t18[0];
            t21 = t7[1];
            if (1 >= t19)
              throw $.ioore(1);
            t18 = t18[1];
            t19 = t7[0];
            wA -= invIA * (t17 * t12 - t16 * t15 + (t20 * t21 - t18 * t19));
            t18 = cp1.get$rB()._f;
            t20 = t18.length;
            if (0 >= t20)
              throw $.ioore(0);
            t16 = t18[0];
            if (1 >= t20)
              throw $.ioore(1);
            t18 = t18[1];
            t20 = cp2.get$rB()._f;
            t17 = t20.length;
            if (0 >= t17)
              throw $.ioore(0);
            t22 = t20[0];
            if (1 >= t17)
              throw $.ioore(1);
            wB += invIB * (t16 * t12 - t18 * t15 + (t22 * t21 - t20[1] * t19));
            cp1.set$normalImpulse(t5[0]);
            if (1 >= t5.length)
              throw $.ioore(1);
            cp2.set$normalImpulse(t5[1]);
            break $loop$1;
          }
          break $loop$1;
        }
      }
      t12 = bodyA.get$linearVelocity()._f;
      t15 = t14.length;
      if (0 >= t15)
        throw $.ioore(0);
      t16 = t14[0];
      t17 = t12.length;
      if (0 >= t17)
        throw $.ioore(0);
      t12[0] = t16;
      if (1 >= t15)
        throw $.ioore(1);
      t14 = t14[1];
      if (1 >= t17)
        throw $.ioore(1);
      t12[1] = t14;
      bodyA.set$angularVelocity(wA);
      t14 = bodyB.get$linearVelocity()._f;
      t12 = t13.length;
      if (0 >= t12)
        throw $.ioore(0);
      t17 = t13[0];
      t15 = t14.length;
      if (0 >= t15)
        throw $.ioore(0);
      t14[0] = t17;
      if (1 >= t12)
        throw $.ioore(1);
      t13 = t13[1];
      if (1 >= t15)
        throw $.ioore(1);
      t14[1] = t13;
      bodyB.set$angularVelocity(wB);
      ++i;
    }
  },
  solveVelocityConstraints$0$bailout: function(state0, t3, i, t12, t5, t4, t1, t7, t9, t6, t8, t2, t10, t11, bodyA, bodyB, wA, c, wB, t15, invMassA, invIA, invMassB, invIB, friction, t13, t14, j, lambda, maxFriction, ccp, t21, t18, t17, t16, t22, cp1) {
    switch (state0) {
      case 0:
        t1 = this.dv._f;
        t2 = this.tangent._f;
        t3 = this.x;
        t4 = this.d._f;
        t5 = t3._f;
        t6 = this.P1._f;
        t7 = this.P2._f;
        t8 = this.temp1._f;
        t9 = this.temp2._f;
        t10 = this.dv1._f;
        t11 = this.dv2._f;
        i = 0;
      default:
        var vA, vB, a, t19, t20, t23, newImpulse, Px, Py, a1, b, cp2, t24, t25, vn1, vn2;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t12 = this.constraintCount;
                if (t12 == null)
                  throw $.iae(t12);
                if (!(i < t12))
                  break L0;
                t12 = this.constraints;
              case 1:
                state0 = 0;
                c = $.$index$asx(t12, i);
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                wA = bodyA.get$angularVelocity();
              case 2:
                state0 = 0;
                wB = bodyB.get$angularVelocity();
              case 3:
                state0 = 0;
                vA = bodyA.get$linearVelocity();
                vB = bodyB.get$linearVelocity();
                invMassA = bodyA.get$invMass();
                invIA = bodyA.get$invInertia();
                invMassB = bodyB.get$invMass();
                invIB = bodyB.get$invInertia();
                t12 = c.get$normal()._f;
                if (1 >= t12.length)
                  throw $.ioore(1);
                t12 = t12[1];
                t13 = t2.length;
                if (0 >= t13)
                  throw $.ioore(0);
                t2[0] = 1 * t12;
                t12 = c.get$normal()._f;
                if (0 >= t12.length)
                  throw $.ioore(0);
                t12 = t12[0];
                if (1 >= t13)
                  throw $.ioore(1);
                t2[1] = -1 * t12;
                friction = c.get$friction();
                t12 = $.getInterceptor$x(c);
                t13 = vB._f;
                t14 = vA._f;
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t15 = c.get$pointCount();
                        if (typeof t15 !== "number")
                          throw $.iae(t15);
                        if (!(j < t15))
                          break L1;
                        t15 = t12.get$points(c);
                      case 4:
                        state0 = 0;
                        ccp = $.$index$asx(t15, j);
                        a = ccp.get$rA();
                        if (typeof wB !== "number")
                          throw wB.$negate();
                        t15 = ccp.get$rB()._f;
                        if (1 >= t15.length)
                          throw $.ioore(1);
                        t15 = t15[1];
                        t16 = t13.length;
                        if (0 >= t16)
                          throw $.ioore(0);
                        t17 = t13[0];
                        t18 = t14.length;
                        if (0 >= t18)
                          throw $.ioore(0);
                        t19 = t14[0];
                        t20 = a._f;
                        if (1 >= t20.length)
                          throw $.ioore(1);
                        t21 = $.getInterceptor$n(wA);
                        t22 = t21.$mul(wA, t20[1]);
                        if (typeof t22 !== "number")
                          throw $.iae(t22);
                        t23 = t1.length;
                        if (0 >= t23)
                          throw $.ioore(0);
                        t1[0] = -wB * t15 + t17 - t19 + t22;
                        t22 = ccp.get$rB()._f;
                        if (0 >= t22.length)
                          throw $.ioore(0);
                        t22 = t22[0];
                        if (1 >= t16)
                          throw $.ioore(1);
                        t16 = t13[1];
                        if (1 >= t18)
                          throw $.ioore(1);
                        t18 = t14[1];
                        t20 = t21.$mul(wA, t20[0]);
                        if (typeof t20 !== "number")
                          throw $.iae(t20);
                        if (1 >= t23)
                          throw $.ioore(1);
                        t1[1] = wB * t22 + t16 - t18 - t20;
                        t20 = t1[0];
                        t18 = t2.length;
                        if (0 >= t18)
                          throw $.ioore(0);
                        t16 = t2[0];
                        t22 = t1[1];
                        if (1 >= t18)
                          throw $.ioore(1);
                        t18 = t2[1];
                        lambda = ccp.get$tangentMass() * -(t20 * t16 + t22 * t18);
                        t18 = ccp.get$normalImpulse();
                        if (friction == null)
                          throw friction.$mul();
                        if (typeof t18 !== "number")
                          throw $.iae(t18);
                        maxFriction = friction * t18;
                        t18 = ccp.get$tangentImpulse();
                      case 5:
                        state0 = 0;
                        newImpulse = $.max(-maxFriction, $.min($.$add$ns(t18, lambda), maxFriction));
                        t18 = ccp.get$tangentImpulse();
                        if (typeof t18 !== "number")
                          throw $.iae(t18);
                        lambda = newImpulse - t18;
                        t18 = t2.length;
                        if (0 >= t18)
                          throw $.ioore(0);
                        Px = t2[0] * lambda;
                        if (1 >= t18)
                          throw $.ioore(1);
                        Py = t2[1] * lambda;
                        t18 = t14.length;
                        if (0 >= t18)
                          throw $.ioore(0);
                        t14[0] = t14[0] - Px * invMassA;
                        if (1 >= t18)
                          throw $.ioore(1);
                        t14[1] = t14[1] - Py * invMassA;
                        t18 = ccp.get$rA()._f;
                        t22 = t18.length;
                        if (0 >= t22)
                          throw $.ioore(0);
                        t16 = t18[0];
                        if (1 >= t22)
                          throw $.ioore(1);
                        wA = t21.$sub(wA, invIA * (t16 * Py - t18[1] * Px));
                        t18 = t13.length;
                        if (0 >= t18)
                          throw $.ioore(0);
                        t13[0] = t13[0] + Px * invMassB;
                        if (1 >= t18)
                          throw $.ioore(1);
                        t13[1] = t13[1] + Py * invMassB;
                        t18 = ccp.get$rB()._f;
                        t16 = t18.length;
                        if (0 >= t16)
                          throw $.ioore(0);
                        t21 = t18[0];
                        if (1 >= t16)
                          throw $.ioore(1);
                        wB += invIB * (t21 * Py - t18[1] * Px);
                        ccp.set$tangentImpulse(newImpulse);
                        ++j;
                    }
                t15 = t15 === 1;
                t16 = $.getInterceptor$n(wA);
                t17 = t12.get$points(c);
              case 6:
                state0 = 0;
              case 7:
              case 8:
                if (state0 === 7 || state0 === 0 && t15)
                  switch (state0) {
                    case 0:
                      ccp = $.$index$asx(t17, 0);
                      a1 = ccp.get$rA();
                      if (typeof wB !== "number")
                        throw wB.$negate();
                      t12 = ccp.get$rB()._f;
                      if (1 >= t12.length)
                        throw $.ioore(1);
                      t12 = t12[1];
                      t15 = t13.length;
                      if (0 >= t15)
                        throw $.ioore(0);
                      t17 = t13[0];
                      t18 = t14.length;
                      if (0 >= t18)
                        throw $.ioore(0);
                      t19 = t14[0];
                      t20 = a1._f;
                      if (1 >= t20.length)
                        throw $.ioore(1);
                      t21 = t16.$mul(wA, t20[1]);
                      if (typeof t21 !== "number")
                        throw $.iae(t21);
                      t22 = t1.length;
                      if (0 >= t22)
                        throw $.ioore(0);
                      t1[0] = -wB * t12 + t17 - t19 + t21;
                      t21 = ccp.get$rB()._f;
                      if (0 >= t21.length)
                        throw $.ioore(0);
                      t21 = t21[0];
                      if (1 >= t15)
                        throw $.ioore(1);
                      t15 = t13[1];
                      if (1 >= t18)
                        throw $.ioore(1);
                      t18 = t14[1];
                      t20 = t16.$mul(wA, t20[0]);
                      if (typeof t20 !== "number")
                        throw $.iae(t20);
                      if (1 >= t22)
                        throw $.ioore(1);
                      t1[1] = wB * t21 + t15 - t18 - t20;
                      b = c.get$normal();
                      t20 = t1[0];
                      t18 = b._f;
                      t15 = t18.length;
                      if (0 >= t15)
                        throw $.ioore(0);
                      t21 = t18[0];
                      t22 = t1[1];
                      if (1 >= t15)
                        throw $.ioore(1);
                      t18 = t18[1];
                      t15 = ccp.get$normalMass();
                      if (typeof t15 !== "number")
                        throw t15.$negate();
                      lambda = -t15 * (t20 * t21 + t22 * t18 - ccp.get$velocityBias());
                      t22 = ccp.get$normalImpulse();
                    case 7:
                      state0 = 0;
                      a = $.$add$ns(t22, lambda);
                      newImpulse = $.$gt$n(a, 0) ? a : 0;
                      lambda = $.$sub$n(newImpulse, t22);
                      if (typeof lambda !== "number")
                        throw $.iae(lambda);
                      Px = t21 * lambda;
                      Py = t18 * lambda;
                      t14[0] = t14[0] - Px * invMassA;
                      t14[1] = t14[1] - Py * invMassA;
                      t12 = ccp.get$rA()._f;
                      t15 = t12.length;
                      if (0 >= t15)
                        throw $.ioore(0);
                      t17 = t12[0];
                      if (1 >= t15)
                        throw $.ioore(1);
                      wA = t16.$sub(wA, invIA * (t17 * Py - t12[1] * Px));
                      t13[0] = t13[0] + Px * invMassB;
                      t13[1] = t13[1] + Py * invMassB;
                      t12 = ccp.get$rB()._f;
                      t17 = t12.length;
                      if (0 >= t17)
                        throw $.ioore(0);
                      t16 = t12[0];
                      if (1 >= t17)
                        throw $.ioore(1);
                      wB += invIB * (t16 * Py - t12[1] * Px);
                      ccp.set$normalImpulse(newImpulse);
                  }
                else
                  switch (state0) {
                    case 0:
                      cp1 = $.$index$asx(t17, 0);
                      t12 = t12.get$points(c);
                    case 8:
                      state0 = 0;
                      cp2 = $.$index$asx(t12, 1);
                      t12 = cp1.get$normalImpulse();
                      t15 = cp2.get$normalImpulse();
                      t17 = new $.Vector(new Float64Array(2))._f;
                      t18 = t17.length;
                      if (0 >= t18)
                        throw $.ioore(0);
                      t17[0] = t12;
                      if (1 >= t18)
                        throw $.ioore(1);
                      t17[1] = t15;
                      if (typeof wB !== "number")
                        throw wB.$negate();
                      t15 = -wB;
                      t18 = cp1.get$rB()._f;
                      if (1 >= t18.length)
                        throw $.ioore(1);
                      t18 = t18[1];
                      t12 = t13.length;
                      if (0 >= t12)
                        throw $.ioore(0);
                      t19 = t13[0];
                      t20 = t14.length;
                      if (0 >= t20)
                        throw $.ioore(0);
                      t21 = t14[0];
                      t22 = cp1.get$rA()._f;
                      if (1 >= t22.length)
                        throw $.ioore(1);
                      t22 = t16.$mul(wA, t22[1]);
                      if (typeof t22 !== "number")
                        throw $.iae(t22);
                      t23 = t10.length;
                      if (0 >= t23)
                        throw $.ioore(0);
                      t10[0] = t15 * t18 + t19 - t21 + t22;
                      t22 = cp1.get$rB()._f;
                      if (0 >= t22.length)
                        throw $.ioore(0);
                      t22 = t22[0];
                      if (1 >= t12)
                        throw $.ioore(1);
                      t12 = t13[1];
                      if (1 >= t20)
                        throw $.ioore(1);
                      t20 = t14[1];
                      t21 = cp1.get$rA()._f;
                      if (0 >= t21.length)
                        throw $.ioore(0);
                      t21 = t16.$mul(wA, t21[0]);
                      if (typeof t21 !== "number")
                        throw $.iae(t21);
                      if (1 >= t23)
                        throw $.ioore(1);
                      t10[1] = wB * t22 + t12 - t20 - t21;
                      t21 = cp2.get$rB()._f;
                      if (1 >= t21.length)
                        throw $.ioore(1);
                      t21 = t21[1];
                      t20 = t13[0];
                      t12 = t14[0];
                      t22 = cp2.get$rA()._f;
                      if (1 >= t22.length)
                        throw $.ioore(1);
                      t22 = t16.$mul(wA, t22[1]);
                      if (typeof t22 !== "number")
                        throw $.iae(t22);
                      t23 = t11.length;
                      if (0 >= t23)
                        throw $.ioore(0);
                      t11[0] = t15 * t21 + t20 - t12 + t22;
                      t22 = cp2.get$rB()._f;
                      if (0 >= t22.length)
                        throw $.ioore(0);
                      t22 = t22[0];
                      t12 = t13[1];
                      t20 = t14[1];
                      t21 = cp2.get$rA()._f;
                      if (0 >= t21.length)
                        throw $.ioore(0);
                      t21 = t16.$mul(wA, t21[0]);
                      if (typeof t21 !== "number")
                        throw $.iae(t21);
                      if (1 >= t23)
                        throw $.ioore(1);
                      t11[1] = wB * t22 + t12 - t20 - t21;
                      t21 = t10[0];
                      t20 = c.get$normal()._f;
                      t12 = t20.length;
                      if (0 >= t12)
                        throw $.ioore(0);
                      t22 = t20[0];
                      t23 = t10[1];
                      if (1 >= t12)
                        throw $.ioore(1);
                      t20 = t20[1];
                      t12 = t11[0];
                      t15 = t11[1];
                      t19 = cp1.get$velocityBias();
                      t18 = cp2.get$velocityBias();
                      b = new $.Vector(new Float64Array(2));
                      t24 = b._f;
                      t25 = t24.length;
                      if (0 >= t25)
                        throw $.ioore(0);
                      t24[0] = t21 * t22 + t23 * t20 - t19;
                      if (1 >= t25)
                        throw $.ioore(1);
                      t24[1] = t12 * t22 + t15 * t20 - t18;
                      t18 = c.get$K();
                      t20 = t18.col1._f;
                      if (0 >= t20.length)
                        throw $.ioore(0);
                      t20 = t20[0];
                      t15 = t17.length;
                      if (0 >= t15)
                        throw $.ioore(0);
                      t22 = t17[0];
                      t18 = t18.col2._f;
                      if (0 >= t18.length)
                        throw $.ioore(0);
                      t18 = t18[0];
                      if (1 >= t15)
                        throw $.ioore(1);
                      t15 = t17[1];
                      t12 = t9.length;
                      if (0 >= t12)
                        throw $.ioore(0);
                      t9[0] = t20 * t22 + t18 * t15;
                      t15 = c.get$K();
                      t18 = t15.col1._f;
                      if (1 >= t18.length)
                        throw $.ioore(1);
                      t18 = t18[1];
                      t22 = t17[0];
                      t15 = t15.col2._f;
                      if (1 >= t15.length)
                        throw $.ioore(1);
                      t15 = t15[1];
                      t20 = t17[1];
                      if (1 >= t12)
                        throw $.ioore(1);
                      t9[1] = t18 * t22 + t15 * t20;
                      t24[0] = t24[0] - t9[0];
                      t24[1] = t24[1] - t9[1];
                      $loop$1: {
                        $.Matrix22_mulMatrixAndVectorToOut(c.get$normalMass(), b, t3);
                        t12 = t5.length;
                        if (0 >= t12)
                          throw $.ioore(0);
                        t5[0] = t5[0] * -1;
                        if (1 >= t12)
                          throw $.ioore(1);
                        t5[1] = t5[1] * -1;
                        t12 = t5[0];
                        if (t12 >= 0 && t5[1] >= 0) {
                          t15 = t4.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t4[0] = t12;
                          t12 = t5[1];
                          if (1 >= t15)
                            throw $.ioore(1);
                          t4[1] = t12;
                          t12 = t4[0];
                          t15 = t17.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t4[0] = t12 - t17[0];
                          t12 = t4[1];
                          if (1 >= t15)
                            throw $.ioore(1);
                          t4[1] = t12 - t17[1];
                          t17 = c.get$normal()._f;
                          t12 = t17.length;
                          if (0 >= t12)
                            throw $.ioore(0);
                          t15 = t17[0];
                          t18 = t6.length;
                          if (0 >= t18)
                            throw $.ioore(0);
                          t6[0] = t15;
                          if (1 >= t12)
                            throw $.ioore(1);
                          t17 = t17[1];
                          if (1 >= t18)
                            throw $.ioore(1);
                          t6[1] = t17;
                          t17 = t4[0];
                          t6[0] = t6[0] * t17;
                          t6[1] = t6[1] * t17;
                          t17 = c.get$normal()._f;
                          t18 = t17.length;
                          if (0 >= t18)
                            throw $.ioore(0);
                          t12 = t17[0];
                          t15 = t7.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t7[0] = t12;
                          if (1 >= t18)
                            throw $.ioore(1);
                          t17 = t17[1];
                          if (1 >= t15)
                            throw $.ioore(1);
                          t7[1] = t17;
                          t17 = t4[1];
                          t7[0] = t7[0] * t17;
                          t7[1] = t7[1] * t17;
                          t17 = t6[0];
                          t15 = t8.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t8[0] = t17;
                          t17 = t6[1];
                          if (1 >= t15)
                            throw $.ioore(1);
                          t8[1] = t17;
                          t8[0] = t8[0] + t7[0];
                          t8[1] = t8[1] + t7[1];
                          t17 = t8[0];
                          t15 = t9.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t9[0] = t17;
                          t17 = t8[1];
                          if (1 >= t15)
                            throw $.ioore(1);
                          t9[1] = t17;
                          t9[0] = t9[0] * invMassA;
                          t9[1] = t9[1] * invMassA;
                          t17 = t14.length;
                          if (0 >= t17)
                            throw $.ioore(0);
                          t14[0] = t14[0] - t9[0];
                          if (1 >= t17)
                            throw $.ioore(1);
                          t14[1] = t14[1] - t9[1];
                          t9[0] = t8[0];
                          t9[1] = t8[1];
                          t9[0] = t9[0] * invMassB;
                          t9[1] = t9[1] * invMassB;
                          t17 = t13.length;
                          if (0 >= t17)
                            throw $.ioore(0);
                          t13[0] = t13[0] + t9[0];
                          if (1 >= t17)
                            throw $.ioore(1);
                          t13[1] = t13[1] + t9[1];
                          t17 = cp1.get$rA()._f;
                          t15 = t17.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t18 = t17[0];
                          t12 = t6[1];
                          if (1 >= t15)
                            throw $.ioore(1);
                          t17 = t17[1];
                          t15 = t6[0];
                          t19 = cp2.get$rA()._f;
                          t20 = t19.length;
                          if (0 >= t20)
                            throw $.ioore(0);
                          t21 = t19[0];
                          t22 = t7[1];
                          if (1 >= t20)
                            throw $.ioore(1);
                          t19 = t19[1];
                          t20 = t7[0];
                          wA = t16.$sub(wA, invIA * (t18 * t12 - t17 * t15 + (t21 * t22 - t19 * t20)));
                          t19 = cp1.get$rB()._f;
                          t21 = t19.length;
                          if (0 >= t21)
                            throw $.ioore(0);
                          t17 = t19[0];
                          if (1 >= t21)
                            throw $.ioore(1);
                          t19 = t19[1];
                          t21 = cp2.get$rB()._f;
                          t18 = t21.length;
                          if (0 >= t18)
                            throw $.ioore(0);
                          t16 = t21[0];
                          if (1 >= t18)
                            throw $.ioore(1);
                          wB += invIB * (t17 * t12 - t19 * t15 + (t16 * t22 - t21[1] * t20));
                          cp1.set$normalImpulse(t5[0]);
                          if (1 >= t5.length)
                            throw $.ioore(1);
                          cp2.set$normalImpulse(t5[1]);
                          break $loop$1;
                        }
                        t12 = cp1.get$normalMass();
                        if (typeof t12 !== "number")
                          throw t12.$negate();
                        t15 = t24.length;
                        if (0 >= t15)
                          throw $.ioore(0);
                        t5[0] = -t12 * t24[0];
                        t5[1] = 0;
                        t12 = c.get$K().col1._f;
                        if (1 >= t12.length)
                          throw $.ioore(1);
                        t12 = t12[1];
                        t18 = t5[0];
                        if (1 >= t15)
                          throw $.ioore(1);
                        t15 = t24[1];
                        if (t18 >= 0 && t12 * t18 + t15 >= 0) {
                          t12 = t4.length;
                          if (0 >= t12)
                            throw $.ioore(0);
                          t4[0] = t18;
                          t18 = t5[1];
                          if (1 >= t12)
                            throw $.ioore(1);
                          t4[1] = t18;
                          t18 = t4[0];
                          t12 = t17.length;
                          if (0 >= t12)
                            throw $.ioore(0);
                          t4[0] = t18 - t17[0];
                          t18 = t4[1];
                          if (1 >= t12)
                            throw $.ioore(1);
                          t4[1] = t18 - t17[1];
                          t17 = c.get$normal()._f;
                          t18 = t17.length;
                          if (0 >= t18)
                            throw $.ioore(0);
                          t12 = t17[0];
                          t15 = t6.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t6[0] = t12;
                          if (1 >= t18)
                            throw $.ioore(1);
                          t17 = t17[1];
                          if (1 >= t15)
                            throw $.ioore(1);
                          t6[1] = t17;
                          t17 = t4[0];
                          t6[0] = t6[0] * t17;
                          t6[1] = t6[1] * t17;
                          t17 = c.get$normal()._f;
                          t15 = t17.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t18 = t17[0];
                          t12 = t7.length;
                          if (0 >= t12)
                            throw $.ioore(0);
                          t7[0] = t18;
                          if (1 >= t15)
                            throw $.ioore(1);
                          t17 = t17[1];
                          if (1 >= t12)
                            throw $.ioore(1);
                          t7[1] = t17;
                          t17 = t4[1];
                          t7[0] = t7[0] * t17;
                          t7[1] = t7[1] * t17;
                          t17 = t6[0];
                          t12 = t8.length;
                          if (0 >= t12)
                            throw $.ioore(0);
                          t8[0] = t17;
                          t17 = t6[1];
                          if (1 >= t12)
                            throw $.ioore(1);
                          t8[1] = t17;
                          t8[0] = t8[0] + t7[0];
                          t8[1] = t8[1] + t7[1];
                          t17 = t8[0];
                          t12 = t9.length;
                          if (0 >= t12)
                            throw $.ioore(0);
                          t9[0] = t17;
                          t17 = t8[1];
                          if (1 >= t12)
                            throw $.ioore(1);
                          t9[1] = t17;
                          t9[0] = t9[0] * invMassA;
                          t9[1] = t9[1] * invMassA;
                          t17 = t14.length;
                          if (0 >= t17)
                            throw $.ioore(0);
                          t14[0] = t14[0] - t9[0];
                          if (1 >= t17)
                            throw $.ioore(1);
                          t14[1] = t14[1] - t9[1];
                          t9[0] = t8[0];
                          t9[1] = t8[1];
                          t9[0] = t9[0] * invMassB;
                          t9[1] = t9[1] * invMassB;
                          t17 = t13.length;
                          if (0 >= t17)
                            throw $.ioore(0);
                          t13[0] = t13[0] + t9[0];
                          if (1 >= t17)
                            throw $.ioore(1);
                          t13[1] = t13[1] + t9[1];
                          t17 = cp1.get$rA()._f;
                          t12 = t17.length;
                          if (0 >= t12)
                            throw $.ioore(0);
                          t15 = t17[0];
                          t18 = t6[1];
                          if (1 >= t12)
                            throw $.ioore(1);
                          t17 = t17[1];
                          t12 = t6[0];
                          t19 = cp2.get$rA()._f;
                          t20 = t19.length;
                          if (0 >= t20)
                            throw $.ioore(0);
                          t21 = t19[0];
                          t22 = t7[1];
                          if (1 >= t20)
                            throw $.ioore(1);
                          t19 = t19[1];
                          t20 = t7[0];
                          wA = t16.$sub(wA, invIA * (t15 * t18 - t17 * t12 + (t21 * t22 - t19 * t20)));
                          t19 = cp1.get$rB()._f;
                          t21 = t19.length;
                          if (0 >= t21)
                            throw $.ioore(0);
                          t17 = t19[0];
                          if (1 >= t21)
                            throw $.ioore(1);
                          t19 = t19[1];
                          t21 = cp2.get$rB()._f;
                          t15 = t21.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t16 = t21[0];
                          if (1 >= t15)
                            throw $.ioore(1);
                          wB += invIB * (t17 * t18 - t19 * t12 + (t16 * t22 - t21[1] * t20));
                          cp1.set$normalImpulse(t5[0]);
                          if (1 >= t5.length)
                            throw $.ioore(1);
                          cp2.set$normalImpulse(t5[1]);
                          break $loop$1;
                        }
                        t5[0] = 0;
                        t12 = cp2.get$normalMass();
                        if (typeof t12 !== "number")
                          throw t12.$negate();
                        t5[1] = -t12 * t24[1];
                        t12 = c.get$K().col2._f;
                        if (0 >= t12.length)
                          throw $.ioore(0);
                        t12 = t12[0];
                        t15 = t5[1];
                        t18 = t24[0];
                        if (t15 >= 0 && t12 * t15 + t18 >= 0) {
                          t12 = t5[0];
                          t15 = t4.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t4[0] = t12;
                          t12 = t5[1];
                          if (1 >= t15)
                            throw $.ioore(1);
                          t4[1] = t12;
                          t12 = t4[0];
                          t15 = t17.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t4[0] = t12 - t17[0];
                          t12 = t4[1];
                          if (1 >= t15)
                            throw $.ioore(1);
                          t4[1] = t12 - t17[1];
                          t17 = c.get$normal()._f;
                          t12 = t17.length;
                          if (0 >= t12)
                            throw $.ioore(0);
                          t15 = t17[0];
                          t18 = t6.length;
                          if (0 >= t18)
                            throw $.ioore(0);
                          t6[0] = t15;
                          if (1 >= t12)
                            throw $.ioore(1);
                          t17 = t17[1];
                          if (1 >= t18)
                            throw $.ioore(1);
                          t6[1] = t17;
                          t17 = t4[0];
                          t6[0] = t6[0] * t17;
                          t6[1] = t6[1] * t17;
                          t17 = c.get$normal()._f;
                          t18 = t17.length;
                          if (0 >= t18)
                            throw $.ioore(0);
                          t12 = t17[0];
                          t15 = t7.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t7[0] = t12;
                          if (1 >= t18)
                            throw $.ioore(1);
                          t17 = t17[1];
                          if (1 >= t15)
                            throw $.ioore(1);
                          t7[1] = t17;
                          t17 = t4[1];
                          t7[0] = t7[0] * t17;
                          t7[1] = t7[1] * t17;
                          t17 = t6[0];
                          t15 = t8.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t8[0] = t17;
                          t17 = t6[1];
                          if (1 >= t15)
                            throw $.ioore(1);
                          t8[1] = t17;
                          t8[0] = t8[0] + t7[0];
                          t8[1] = t8[1] + t7[1];
                          t17 = t8[0];
                          t15 = t9.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t9[0] = t17;
                          t17 = t8[1];
                          if (1 >= t15)
                            throw $.ioore(1);
                          t9[1] = t17;
                          t9[0] = t9[0] * invMassA;
                          t9[1] = t9[1] * invMassA;
                          t17 = t14.length;
                          if (0 >= t17)
                            throw $.ioore(0);
                          t14[0] = t14[0] - t9[0];
                          if (1 >= t17)
                            throw $.ioore(1);
                          t14[1] = t14[1] - t9[1];
                          t9[0] = t8[0];
                          t9[1] = t8[1];
                          t9[0] = t9[0] * invMassB;
                          t9[1] = t9[1] * invMassB;
                          t17 = t13.length;
                          if (0 >= t17)
                            throw $.ioore(0);
                          t13[0] = t13[0] + t9[0];
                          if (1 >= t17)
                            throw $.ioore(1);
                          t13[1] = t13[1] + t9[1];
                          t17 = cp1.get$rA()._f;
                          t15 = t17.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t18 = t17[0];
                          t12 = t6[1];
                          if (1 >= t15)
                            throw $.ioore(1);
                          t17 = t17[1];
                          t15 = t6[0];
                          t19 = cp2.get$rA()._f;
                          t20 = t19.length;
                          if (0 >= t20)
                            throw $.ioore(0);
                          t21 = t19[0];
                          t22 = t7[1];
                          if (1 >= t20)
                            throw $.ioore(1);
                          t19 = t19[1];
                          t20 = t7[0];
                          wA = t16.$sub(wA, invIA * (t18 * t12 - t17 * t15 + (t21 * t22 - t19 * t20)));
                          t19 = cp1.get$rB()._f;
                          t21 = t19.length;
                          if (0 >= t21)
                            throw $.ioore(0);
                          t17 = t19[0];
                          if (1 >= t21)
                            throw $.ioore(1);
                          t19 = t19[1];
                          t21 = cp2.get$rB()._f;
                          t18 = t21.length;
                          if (0 >= t18)
                            throw $.ioore(0);
                          t16 = t21[0];
                          if (1 >= t18)
                            throw $.ioore(1);
                          wB += invIB * (t17 * t12 - t19 * t15 + (t16 * t22 - t21[1] * t20));
                          cp1.set$normalImpulse(t5[0]);
                          if (1 >= t5.length)
                            throw $.ioore(1);
                          cp2.set$normalImpulse(t5[1]);
                          break $loop$1;
                        }
                        t5[0] = 0;
                        t5[1] = 0;
                        vn1 = t24[0];
                        vn2 = t24[1];
                        if (vn1 >= 0 && vn2 >= 0) {
                          t12 = t5[0];
                          t15 = t4.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t4[0] = t12;
                          t12 = t5[1];
                          if (1 >= t15)
                            throw $.ioore(1);
                          t4[1] = t12;
                          t12 = t4[0];
                          t15 = t17.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t4[0] = t12 - t17[0];
                          t12 = t4[1];
                          if (1 >= t15)
                            throw $.ioore(1);
                          t4[1] = t12 - t17[1];
                          t17 = c.get$normal()._f;
                          t12 = t17.length;
                          if (0 >= t12)
                            throw $.ioore(0);
                          t15 = t17[0];
                          t18 = t6.length;
                          if (0 >= t18)
                            throw $.ioore(0);
                          t6[0] = t15;
                          if (1 >= t12)
                            throw $.ioore(1);
                          t17 = t17[1];
                          if (1 >= t18)
                            throw $.ioore(1);
                          t6[1] = t17;
                          t17 = t4[0];
                          t6[0] = t6[0] * t17;
                          t6[1] = t6[1] * t17;
                          t17 = c.get$normal()._f;
                          t18 = t17.length;
                          if (0 >= t18)
                            throw $.ioore(0);
                          t12 = t17[0];
                          t15 = t7.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t7[0] = t12;
                          if (1 >= t18)
                            throw $.ioore(1);
                          t17 = t17[1];
                          if (1 >= t15)
                            throw $.ioore(1);
                          t7[1] = t17;
                          t17 = t4[1];
                          t7[0] = t7[0] * t17;
                          t7[1] = t7[1] * t17;
                          t17 = t6[0];
                          t15 = t8.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t8[0] = t17;
                          t17 = t6[1];
                          if (1 >= t15)
                            throw $.ioore(1);
                          t8[1] = t17;
                          t8[0] = t8[0] + t7[0];
                          t8[1] = t8[1] + t7[1];
                          t17 = t8[0];
                          t15 = t9.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t9[0] = t17;
                          t17 = t8[1];
                          if (1 >= t15)
                            throw $.ioore(1);
                          t9[1] = t17;
                          t9[0] = t9[0] * invMassA;
                          t9[1] = t9[1] * invMassA;
                          t17 = t14.length;
                          if (0 >= t17)
                            throw $.ioore(0);
                          t14[0] = t14[0] - t9[0];
                          if (1 >= t17)
                            throw $.ioore(1);
                          t14[1] = t14[1] - t9[1];
                          t9[0] = t8[0];
                          t9[1] = t8[1];
                          t9[0] = t9[0] * invMassB;
                          t9[1] = t9[1] * invMassB;
                          t17 = t13.length;
                          if (0 >= t17)
                            throw $.ioore(0);
                          t13[0] = t13[0] + t9[0];
                          if (1 >= t17)
                            throw $.ioore(1);
                          t13[1] = t13[1] + t9[1];
                          t17 = cp1.get$rA()._f;
                          t15 = t17.length;
                          if (0 >= t15)
                            throw $.ioore(0);
                          t18 = t17[0];
                          t12 = t6[1];
                          if (1 >= t15)
                            throw $.ioore(1);
                          t17 = t17[1];
                          t15 = t6[0];
                          t19 = cp2.get$rA()._f;
                          t20 = t19.length;
                          if (0 >= t20)
                            throw $.ioore(0);
                          t21 = t19[0];
                          t22 = t7[1];
                          if (1 >= t20)
                            throw $.ioore(1);
                          t19 = t19[1];
                          t20 = t7[0];
                          wA = t16.$sub(wA, invIA * (t18 * t12 - t17 * t15 + (t21 * t22 - t19 * t20)));
                          t19 = cp1.get$rB()._f;
                          t21 = t19.length;
                          if (0 >= t21)
                            throw $.ioore(0);
                          t17 = t19[0];
                          if (1 >= t21)
                            throw $.ioore(1);
                          t19 = t19[1];
                          t21 = cp2.get$rB()._f;
                          t18 = t21.length;
                          if (0 >= t18)
                            throw $.ioore(0);
                          t16 = t21[0];
                          if (1 >= t18)
                            throw $.ioore(1);
                          wB += invIB * (t17 * t12 - t19 * t15 + (t16 * t22 - t21[1] * t20));
                          cp1.set$normalImpulse(t5[0]);
                          if (1 >= t5.length)
                            throw $.ioore(1);
                          cp2.set$normalImpulse(t5[1]);
                          break $loop$1;
                        }
                        break $loop$1;
                      }
                  }
                t12 = bodyA.get$linearVelocity()._f;
                t15 = t14.length;
                if (0 >= t15)
                  throw $.ioore(0);
                t16 = t14[0];
                t17 = t12.length;
                if (0 >= t17)
                  throw $.ioore(0);
                t12[0] = t16;
                if (1 >= t15)
                  throw $.ioore(1);
                t14 = t14[1];
                if (1 >= t17)
                  throw $.ioore(1);
                t12[1] = t14;
                bodyA.set$angularVelocity(wA);
                t14 = bodyB.get$linearVelocity()._f;
                t12 = t13.length;
                if (0 >= t12)
                  throw $.ioore(0);
                t17 = t13[0];
                t15 = t14.length;
                if (0 >= t15)
                  throw $.ioore(0);
                t14[0] = t17;
                if (1 >= t12)
                  throw $.ioore(1);
                t13 = t13[1];
                if (1 >= t15)
                  throw $.ioore(1);
                t14[1] = t13;
                bodyB.set$angularVelocity(wB);
                ++i;
            }
    }
  },
  storeImpulses$0: function() {
    var i, t1, c, m, t2, j, t3;
    i = 0;
    while (true) {
      t1 = this.constraintCount;
      if (t1 == null)
        throw $.iae(t1);
      if (!(i < t1))
        break;
      c = $.$index$asx(this.constraints, i);
      m = c.get$manifold();
      t1 = $.getInterceptor$x(m);
      t2 = $.getInterceptor$x(c);
      j = 0;
      while (true) {
        t3 = c.get$pointCount();
        if (typeof t3 !== "number")
          throw $.iae(t3);
        if (!(j < t3))
          break;
        $.$index$asx(t1.get$points(m), j).set$normalImpulse($.$index$asx(t2.get$points(c), j).get$normalImpulse());
        $.$index$asx(t1.get$points(m), j).set$tangentImpulse($.$index$asx(t2.get$points(c), j).get$tangentImpulse());
        ++j;
      }
      ++i;
    }
  },
  solvePositionConstraints$1: function(baumgarte) {
    var t1, t2, t3, t4, psm, t5, t6, minSeparation, i, t7, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, j, t8, separation, t9, t10, C, t11, rnA, rnB, K, impulse, t12;
    t1 = this.P._f;
    t2 = this.temp1._f;
    t3 = this.rA._f;
    t4 = this.rB._f;
    psm = this.psolver;
    t5 = psm.point._f;
    t6 = psm.normal._f;
    minSeparation = 0;
    i = 0;
    while (true) {
      t7 = this.constraintCount;
      if (t7 == null)
        throw $.iae(t7);
      if (!(i < t7))
        break;
      t7 = this.constraints;
      if (typeof t7 !== "string" && (typeof t7 !== "object" || t7 === null || t7.constructor !== Array && !$.isJsIndexable(t7, t7[$.dispatchPropertyName])))
        return this.solvePositionConstraints$1$bailout(1, baumgarte, t2, t1, t3, i, t4, minSeparation, psm, t7, t6, t5);
      if (i >= t7.length)
        throw $.ioore(i);
      c = t7[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      t7 = bodyA.get$mass();
      if (typeof t7 !== "number")
        return this.solvePositionConstraints$1$bailout(2, baumgarte, t2, t1, t3, i, t4, minSeparation, psm, t7, t6, t5, c, bodyA, bodyB);
      invMassA = t7 * bodyA.get$invMass();
      invIA = t7 * bodyA.get$invInertia();
      t7 = bodyB.get$mass();
      if (typeof t7 !== "number")
        return this.solvePositionConstraints$1$bailout(3, baumgarte, t2, t1, t3, i, t4, minSeparation, psm, t7, t6, t5, c, bodyA, bodyB, invMassA, invIA);
      invMassB = t7 * bodyB.get$invMass();
      invIB = t7 * bodyB.get$invInertia();
      t7 = invMassA + invMassB;
      j = 0;
      while (true) {
        t8 = c.get$pointCount();
        if (typeof t8 !== "number")
          throw $.iae(t8);
        if (!(j < t8))
          break;
        psm.initialize$2(psm, c, j);
        separation = psm.separation;
        if (typeof separation !== "number")
          return this.solvePositionConstraints$1$bailout(4, baumgarte, t2, t1, t3, i, t4, minSeparation, psm, $.JSNumber_methods, t6, t5, c, bodyA, bodyB, invMassA, invIA, $.JSNumber_methods, invIB, j, $.JSNumber_methods, separation, invMassB);
        t8 = t5.length;
        if (0 >= t8)
          throw $.ioore(0);
        t9 = t5[0];
        t10 = t3.length;
        if (0 >= t10)
          throw $.ioore(0);
        t3[0] = t9;
        if (1 >= t8)
          throw $.ioore(1);
        t8 = t5[1];
        if (1 >= t10)
          throw $.ioore(1);
        t3[1] = t8;
        t8 = bodyA.get$sweep();
        t10 = t3[0];
        t8 = t8.center._f;
        t9 = t8.length;
        if (0 >= t9)
          throw $.ioore(0);
        t3[0] = t10 - t8[0];
        t10 = t3[1];
        if (1 >= t9)
          throw $.ioore(1);
        t3[1] = t10 - t8[1];
        t8 = t5[0];
        t10 = t4.length;
        if (0 >= t10)
          throw $.ioore(0);
        t4[0] = t8;
        t8 = t5[1];
        if (1 >= t10)
          throw $.ioore(1);
        t4[1] = t8;
        t8 = bodyB.get$sweep();
        t10 = t4[0];
        t8 = t8.center._f;
        t9 = t8.length;
        if (0 >= t9)
          throw $.ioore(0);
        t4[0] = t10 - t8[0];
        t10 = t4[1];
        if (1 >= t9)
          throw $.ioore(1);
        t4[1] = t10 - t8[1];
        minSeparation = $.min(minSeparation, separation);
        C = $.max(-0.2, $.min(baumgarte * (separation + 0.005), 0));
        t8 = t3.length;
        if (0 >= t8)
          throw $.ioore(0);
        t10 = t3[0];
        if (1 >= t6.length)
          throw $.ioore(1);
        t9 = t6[1];
        if (1 >= t8)
          throw $.ioore(1);
        t8 = t3[1];
        t11 = t6[0];
        rnA = t10 * t9 - t8 * t11;
        t8 = t4.length;
        if (0 >= t8)
          throw $.ioore(0);
        t10 = t4[0];
        if (1 >= t8)
          throw $.ioore(1);
        rnB = t10 * t9 - t4[1] * t11;
        K = t7 + invIA * rnA * rnA + invIB * rnB * rnB;
        impulse = K > 0 ? -C / K : 0;
        t8 = t1.length;
        if (0 >= t8)
          throw $.ioore(0);
        t1[0] = t11;
        t11 = t6[1];
        if (1 >= t8)
          throw $.ioore(1);
        t1[1] = t11;
        t1[0] = t1[0] * impulse;
        t1[1] = t1[1] * impulse;
        t11 = t1[0];
        t8 = t2.length;
        if (0 >= t8)
          throw $.ioore(0);
        t2[0] = t11;
        t11 = t1[1];
        if (1 >= t8)
          throw $.ioore(1);
        t2[1] = t11;
        t2[0] = t2[0] * invMassA;
        t2[1] = t2[1] * invMassA;
        t11 = bodyA.get$sweep().center._f;
        t8 = t11.length;
        if (0 >= t8)
          throw $.ioore(0);
        t11[0] = t11[0] - t2[0];
        if (1 >= t8)
          throw $.ioore(1);
        t11[1] = t11[1] - t2[1];
        t11 = bodyA.get$sweep();
        t8 = t11.angle;
        if (typeof t8 !== "number")
          return this.solvePositionConstraints$1$bailout(5, baumgarte, t2, t1, t3, i, t4, minSeparation, psm, $.JSNumber_methods, t6, t5, c, bodyA, bodyB, invMassA, invIA, $.JSNumber_methods, invIB, j, $.JSNumber_methods, 0, invMassB, t8, t11);
        t11.angle = t8 - invIA * (t3[0] * t1[1] - t3[1] * t1[0]);
        bodyA.synchronizeTransform$0();
        t8 = t1.length;
        if (0 >= t8)
          throw $.ioore(0);
        t11 = t1[0];
        t9 = t2.length;
        if (0 >= t9)
          throw $.ioore(0);
        t2[0] = t11;
        if (1 >= t8)
          throw $.ioore(1);
        t8 = t1[1];
        if (1 >= t9)
          throw $.ioore(1);
        t2[1] = t8;
        t2[0] = t2[0] * invMassB;
        t2[1] = t2[1] * invMassB;
        t8 = bodyB.get$sweep().center._f;
        t9 = t8.length;
        if (0 >= t9)
          throw $.ioore(0);
        t8[0] = t8[0] + t2[0];
        if (1 >= t9)
          throw $.ioore(1);
        t8[1] = t8[1] + t2[1];
        t8 = bodyB.get$sweep();
        t9 = t8.angle;
        if (typeof t9 !== "number")
          return this.solvePositionConstraints$1$bailout(6, baumgarte, t2, t1, t3, i, t4, minSeparation, psm, $.JSNumber_methods, t6, t5, c, bodyA, bodyB, invMassA, invIA, $.JSNumber_methods, invIB, j, $.JSNumber_methods, 0, invMassB, t8, 0, t9);
        t11 = t4.length;
        if (0 >= t11)
          throw $.ioore(0);
        t10 = t4[0];
        t12 = t1[1];
        if (1 >= t11)
          throw $.ioore(1);
        t8.angle = t9 + invIB * (t10 * t12 - t4[1] * t1[0]);
        bodyB.synchronizeTransform$0();
        ++j;
      }
      ++i;
    }
    return minSeparation >= -0.0075;
  },
  solvePositionConstraints$1$bailout: function(state0, baumgarte, t2, t1, t3, i, t4, minSeparation, psm, t7, t6, t5, c, bodyA, bodyB, invMassA, invIA, t8, invIB, j, t9, separation, invMassB, t10, t13, t11) {
    switch (state0) {
      case 0:
        t1 = this.P._f;
        t2 = this.temp1._f;
        t3 = this.rA._f;
        t4 = this.rB._f;
        psm = this.psolver;
        t5 = psm.point._f;
        t6 = psm.normal._f;
        minSeparation = 0;
        i = 0;
      default:
        var t12, C, rnA, rnB, K, impulse, t14;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t7 = this.constraintCount;
                if (t7 == null)
                  throw $.iae(t7);
                if (!(i < t7))
                  break L0;
                t7 = this.constraints;
              case 1:
                state0 = 0;
                c = $.$index$asx(t7, i);
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                t7 = bodyA.get$mass();
              case 2:
                state0 = 0;
                t8 = $.getInterceptor$n(t7);
                invMassA = t8.$mul(t7, bodyA.get$invMass());
                invIA = t8.$mul(t7, bodyA.get$invInertia());
                t7 = bodyB.get$mass();
              case 3:
                state0 = 0;
                t8 = $.getInterceptor$n(t7);
                invMassB = t8.$mul(t7, bodyB.get$invMass());
                invIB = t8.$mul(t7, bodyB.get$invInertia());
                t7 = $.getInterceptor$n(invIA);
                t8 = $.getInterceptor$n(invIB);
                t9 = $.getInterceptor$ns(invMassA);
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t10 = c.get$pointCount();
                        if (typeof t10 !== "number")
                          throw $.iae(t10);
                        if (!(j < t10))
                          break L1;
                        psm.initialize$2(psm, c, j);
                        separation = psm.separation;
                      case 4:
                        state0 = 0;
                        t10 = t5.length;
                        if (0 >= t10)
                          throw $.ioore(0);
                        t11 = t5[0];
                        t12 = t3.length;
                        if (0 >= t12)
                          throw $.ioore(0);
                        t3[0] = t11;
                        if (1 >= t10)
                          throw $.ioore(1);
                        t10 = t5[1];
                        if (1 >= t12)
                          throw $.ioore(1);
                        t3[1] = t10;
                        t10 = bodyA.get$sweep();
                        t12 = t3[0];
                        t10 = t10.center._f;
                        t11 = t10.length;
                        if (0 >= t11)
                          throw $.ioore(0);
                        t3[0] = t12 - t10[0];
                        t12 = t3[1];
                        if (1 >= t11)
                          throw $.ioore(1);
                        t3[1] = t12 - t10[1];
                        t10 = t5[0];
                        t12 = t4.length;
                        if (0 >= t12)
                          throw $.ioore(0);
                        t4[0] = t10;
                        t10 = t5[1];
                        if (1 >= t12)
                          throw $.ioore(1);
                        t4[1] = t10;
                        t10 = bodyB.get$sweep();
                        t12 = t4[0];
                        t10 = t10.center._f;
                        t11 = t10.length;
                        if (0 >= t11)
                          throw $.ioore(0);
                        t4[0] = t12 - t10[0];
                        t12 = t4[1];
                        if (1 >= t11)
                          throw $.ioore(1);
                        t4[1] = t12 - t10[1];
                        minSeparation = $.min(minSeparation, separation);
                        t10 = $.$add$ns(separation, 0.005);
                        if (typeof t10 !== "number")
                          throw $.iae(t10);
                        C = $.max(-0.2, $.min(baumgarte * t10, 0));
                        t10 = t3.length;
                        if (0 >= t10)
                          throw $.ioore(0);
                        t12 = t3[0];
                        if (1 >= t6.length)
                          throw $.ioore(1);
                        t11 = t6[1];
                        if (1 >= t10)
                          throw $.ioore(1);
                        t10 = t3[1];
                        t13 = t6[0];
                        rnA = t12 * t11 - t10 * t13;
                        t10 = t4.length;
                        if (0 >= t10)
                          throw $.ioore(0);
                        t12 = t4[0];
                        if (1 >= t10)
                          throw $.ioore(1);
                        rnB = t12 * t11 - t4[1] * t13;
                        K = $.$add$ns($.$add$ns(t9.$add(invMassA, invMassB), $.$mul$n(t7.$mul(invIA, rnA), rnA)), $.$mul$n(t8.$mul(invIB, rnB), rnB));
                        if ($.$gt$n(K, 0)) {
                          if (typeof K !== "number")
                            throw $.iae(K);
                          impulse = -C / K;
                        } else
                          impulse = 0;
                        t10 = t1.length;
                        if (0 >= t10)
                          throw $.ioore(0);
                        t1[0] = t13;
                        t13 = t6[1];
                        if (1 >= t10)
                          throw $.ioore(1);
                        t1[1] = t13;
                        t1[0] = t1[0] * impulse;
                        t1[1] = t1[1] * impulse;
                        t13 = t1[0];
                        t10 = t2.length;
                        if (0 >= t10)
                          throw $.ioore(0);
                        t2[0] = t13;
                        t13 = t1[1];
                        if (1 >= t10)
                          throw $.ioore(1);
                        t2[1] = t13;
                        t13 = t2[0];
                        if (typeof invMassA !== "number")
                          throw $.iae(invMassA);
                        t2[0] = t13 * invMassA;
                        t2[1] = t2[1] * invMassA;
                        t13 = bodyA.get$sweep().center._f;
                        t10 = t13.length;
                        if (0 >= t10)
                          throw $.ioore(0);
                        t13[0] = t13[0] - t2[0];
                        if (1 >= t10)
                          throw $.ioore(1);
                        t13[1] = t13[1] - t2[1];
                        t13 = bodyA.get$sweep();
                        t10 = t13.angle;
                      case 5:
                        state0 = 0;
                        t13.angle = $.$sub$n(t10, t7.$mul(invIA, t3[0] * t1[1] - t3[1] * t1[0]));
                        bodyA.synchronizeTransform$0();
                        t10 = t1.length;
                        if (0 >= t10)
                          throw $.ioore(0);
                        t13 = t1[0];
                        t11 = t2.length;
                        if (0 >= t11)
                          throw $.ioore(0);
                        t2[0] = t13;
                        if (1 >= t10)
                          throw $.ioore(1);
                        t10 = t1[1];
                        if (1 >= t11)
                          throw $.ioore(1);
                        t2[1] = t10;
                        t10 = t2[0];
                        if (typeof invMassB !== "number")
                          throw $.iae(invMassB);
                        t2[0] = t10 * invMassB;
                        t2[1] = t2[1] * invMassB;
                        t10 = bodyB.get$sweep().center._f;
                        t11 = t10.length;
                        if (0 >= t11)
                          throw $.ioore(0);
                        t10[0] = t10[0] + t2[0];
                        if (1 >= t11)
                          throw $.ioore(1);
                        t10[1] = t10[1] + t2[1];
                        t10 = bodyB.get$sweep();
                        t11 = t10.angle;
                      case 6:
                        state0 = 0;
                        t13 = t4.length;
                        if (0 >= t13)
                          throw $.ioore(0);
                        t12 = t4[0];
                        t14 = t1[1];
                        if (1 >= t13)
                          throw $.ioore(1);
                        t10.angle = $.$add$ns(t11, t8.$mul(invIB, t12 * t14 - t4[1] * t1[0]));
                        bodyB.synchronizeTransform$0();
                        ++j;
                    }
                ++i;
            }
        return minSeparation >= -0.0075;
    }
  }
},

ContactSolver_closure: {"": "Closure;",
  call$1: function(i) {
    return $.ContactConstraint$();
  }
},

PositionSolverManifold: {"": "Object;normal<,point,separation,pointA<,pointB<,temp,planePoint,clipPoint",
  initialize$2: function(_, cc, index) {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    t1 = $.getInterceptor$x(cc);
    switch (t1.get$type(cc)) {
      case 0:
        t2 = this.pointA;
        cc.get$bodyA().getWorldPointToOut$2(cc.get$localPoint(), t2);
        t3 = this.pointB;
        cc.get$bodyB().getWorldPointToOut$2($.$index$asx(t1.get$points(cc), 0).get$localPoint(), t3);
        t1 = this.normal;
        if ($.MathBox_distanceSquared(t2, t3) > 1.4208639999999999e-14) {
          t4 = t1._f;
          t5 = t3._f;
          t6 = t5.length;
          if (0 >= t6)
            throw $.ioore(0);
          t7 = t5[0];
          t8 = t4.length;
          if (0 >= t8)
            throw $.ioore(0);
          t4[0] = t7;
          if (1 >= t6)
            throw $.ioore(1);
          t5 = t5[1];
          if (1 >= t8)
            throw $.ioore(1);
          t4[1] = t5;
          t5 = t4[0];
          t8 = t2._f;
          t6 = t8.length;
          if (0 >= t6)
            throw $.ioore(0);
          t4[0] = t5 - t8[0];
          t5 = t4[1];
          if (1 >= t6)
            throw $.ioore(1);
          t4[1] = t5 - t8[1];
          t1.normalize$0();
        } else {
          t1 = t1._f;
          t4 = t1.length;
          if (0 >= t4)
            throw $.ioore(0);
          t1[0] = 1;
          if (1 >= t4)
            throw $.ioore(1);
          t1[1] = 0;
        }
        t1 = this.point._f;
        t2 = t2._f;
        t4 = t2.length;
        if (0 >= t4)
          throw $.ioore(0);
        t5 = t2[0];
        t6 = t1.length;
        if (0 >= t6)
          throw $.ioore(0);
        t1[0] = t5;
        if (1 >= t4)
          throw $.ioore(1);
        t4 = t2[1];
        if (1 >= t6)
          throw $.ioore(1);
        t1[1] = t4;
        t4 = t1[0];
        t3 = t3._f;
        t6 = t3.length;
        if (0 >= t6)
          throw $.ioore(0);
        t1[0] = t4 + t3[0];
        t4 = t1[1];
        if (1 >= t6)
          throw $.ioore(1);
        t1[1] = t4 + t3[1];
        t1[0] = t1[0] * 0.5;
        t1[1] = t1[1] * 0.5;
        t1 = this.temp;
        t4 = t1._f;
        t6 = t3[0];
        t5 = t4.length;
        if (0 >= t5)
          throw $.ioore(0);
        t4[0] = t6;
        t3 = t3[1];
        if (1 >= t5)
          throw $.ioore(1);
        t4[1] = t3;
        t4[0] = t4[0] - t2[0];
        t4[1] = t4[1] - t2[1];
        t2 = this.normal;
        t4 = t1.get$x(t1);
        t3 = t2.get$x(t2);
        t1 = t1.get$y(t1);
        t2 = t2.get$y(t2);
        t5 = cc.get$radius();
        if (typeof t5 !== "number")
          throw $.iae(t5);
        this.separation = t4 * t3 + t1 * t2 - t5;
        break;
      case 1:
        t2 = this.normal;
        cc.get$bodyA().getWorldVectorToOut$2(cc.get$localNormal(), t2);
        t3 = this.planePoint;
        cc.get$bodyA().getWorldPointToOut$2(cc.get$localPoint(), t3);
        t4 = this.clipPoint;
        cc.get$bodyB().getWorldPointToOut$2($.$index$asx(t1.get$points(cc), index).get$localPoint(), t4);
        t1 = this.temp;
        t5 = t1._f;
        t4 = t4._f;
        t6 = t4.length;
        if (0 >= t6)
          throw $.ioore(0);
        t7 = t4[0];
        t8 = t5.length;
        if (0 >= t8)
          throw $.ioore(0);
        t5[0] = t7;
        if (1 >= t6)
          throw $.ioore(1);
        t6 = t4[1];
        if (1 >= t8)
          throw $.ioore(1);
        t5[1] = t6;
        t6 = t5[0];
        t3 = t3._f;
        t8 = t3.length;
        if (0 >= t8)
          throw $.ioore(0);
        t5[0] = t6 - t3[0];
        t6 = t5[1];
        if (1 >= t8)
          throw $.ioore(1);
        t5[1] = t6 - t3[1];
        t3 = t1.get$x(t1);
        t6 = t2.get$x(t2);
        t1 = t1.get$y(t1);
        t2 = t2.get$y(t2);
        t5 = cc.get$radius();
        if (typeof t5 !== "number")
          throw $.iae(t5);
        this.separation = t3 * t6 + t1 * t2 - t5;
        t5 = this.point._f;
        t2 = t4.length;
        if (0 >= t2)
          throw $.ioore(0);
        t1 = t4[0];
        t6 = t5.length;
        if (0 >= t6)
          throw $.ioore(0);
        t5[0] = t1;
        if (1 >= t2)
          throw $.ioore(1);
        t4 = t4[1];
        if (1 >= t6)
          throw $.ioore(1);
        t5[1] = t4;
        break;
      case 2:
        t2 = this.normal;
        cc.get$bodyB().getWorldVectorToOut$2(cc.get$localNormal(), t2);
        t3 = this.planePoint;
        cc.get$bodyB().getWorldPointToOut$2(cc.get$localPoint(), t3);
        t4 = this.clipPoint;
        cc.get$bodyA().getWorldPointToOut$2($.$index$asx(t1.get$points(cc), index).get$localPoint(), t4);
        t1 = this.temp;
        t5 = t1._f;
        t4 = t4._f;
        t6 = t4.length;
        if (0 >= t6)
          throw $.ioore(0);
        t7 = t4[0];
        t8 = t5.length;
        if (0 >= t8)
          throw $.ioore(0);
        t5[0] = t7;
        if (1 >= t6)
          throw $.ioore(1);
        t6 = t4[1];
        if (1 >= t8)
          throw $.ioore(1);
        t5[1] = t6;
        t6 = t5[0];
        t3 = t3._f;
        t8 = t3.length;
        if (0 >= t8)
          throw $.ioore(0);
        t5[0] = t6 - t3[0];
        t6 = t5[1];
        if (1 >= t8)
          throw $.ioore(1);
        t5[1] = t6 - t3[1];
        t3 = t1.get$x(t1);
        t6 = t2.get$x(t2);
        t1 = t1.get$y(t1);
        t5 = t2.get$y(t2);
        t8 = cc.get$radius();
        if (typeof t8 !== "number")
          throw $.iae(t8);
        this.separation = t3 * t6 + t1 * t5 - t8;
        t8 = this.point._f;
        t5 = t4.length;
        if (0 >= t5)
          throw $.ioore(0);
        t1 = t4[0];
        t6 = t8.length;
        if (0 >= t6)
          throw $.ioore(0);
        t8[0] = t1;
        if (1 >= t5)
          throw $.ioore(1);
        t4 = t4[1];
        if (1 >= t6)
          throw $.ioore(1);
        t8[1] = t4;
        t2 = t2._f;
        t4 = t2.length;
        if (0 >= t4)
          throw $.ioore(0);
        t2[0] = -t2[0];
        if (1 >= t4)
          throw $.ioore(1);
        t2[1] = -t2[1];
        break;
    }
  }
},

PolygonAndCircleContact: {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collidePolygonAndCircle$5(argManifold, $.get$shape$x(this.fixtureA), xfA, $.get$shape$x(this.fixtureB), xfB);
  }
},

PolygonContact: {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collidePolygons$5(argManifold, $.get$shape$x(this.fixtureA), xfA, $.get$shape$x(this.fixtureB), xfB);
  }
},

TimeOfImpactConstraint: {"": "Object;localPoints<,localNormal<,localPoint<,type*,radius@,pointCount@,bodyA@,bodyB@",
  setFrom$1: function(argOther) {
    var t1, i, t2, t3, t4, t5;
    t1 = this.localPoints;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
      return this.setFrom$1$bailout(1, argOther, t1);
    i = 0;
    for (; i < t1.length; ++i)
      t1[i].setFrom$1($.$index$asx(argOther.get$localPoints(), i));
    t1 = this.localNormal._f;
    t2 = argOther.get$localNormal()._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t4;
    if (1 >= t3)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = this.localPoint._f;
    t1 = argOther.get$localPoint()._f;
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = t2.length;
    if (0 >= t4)
      throw $.ioore(0);
    t2[0] = t3;
    if (1 >= t5)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t4)
      throw $.ioore(1);
    t2[1] = t1;
    this.type = $.get$type$x(argOther);
    this.radius = argOther.get$radius();
    this.pointCount = argOther.get$pointCount();
    this.bodyA = argOther.get$bodyA();
    this.bodyB = argOther.get$bodyB();
  },
  setFrom$1$bailout: function(state0, argOther, t1) {
    switch (state0) {
      case 0:
        t1 = this.localPoints;
      case 1:
        var t2, i, t3, t4, t5;
        state0 = 0;
        t2 = $.getInterceptor$asx(t1);
        i = 0;
        while (true) {
          t3 = t2.get$length(t1);
          if (typeof t3 !== "number")
            throw $.iae(t3);
          if (!(i < t3))
            break;
          t2.$index(t1, i).setFrom$1($.$index$asx(argOther.get$localPoints(), i));
          ++i;
        }
        t1 = this.localNormal._f;
        t2 = argOther.get$localNormal()._f;
        t3 = t2.length;
        if (0 >= t3)
          throw $.ioore(0);
        t4 = t2[0];
        t5 = t1.length;
        if (0 >= t5)
          throw $.ioore(0);
        t1[0] = t4;
        if (1 >= t3)
          throw $.ioore(1);
        t2 = t2[1];
        if (1 >= t5)
          throw $.ioore(1);
        t1[1] = t2;
        t2 = this.localPoint._f;
        t1 = argOther.get$localPoint()._f;
        t5 = t1.length;
        if (0 >= t5)
          throw $.ioore(0);
        t3 = t1[0];
        t4 = t2.length;
        if (0 >= t4)
          throw $.ioore(0);
        t2[0] = t3;
        if (1 >= t5)
          throw $.ioore(1);
        t1 = t1[1];
        if (1 >= t4)
          throw $.ioore(1);
        t2[1] = t1;
        this.type = $.get$type$x(argOther);
        this.radius = argOther.get$radius();
        this.pointCount = argOther.get$pointCount();
        this.bodyA = argOther.get$bodyA();
        this.bodyB = argOther.get$bodyB();
    }
  }
},

TimeOfImpactConstraint_closure: {"": "Closure;",
  call$1: function(i) {
    var t1, t2, t3;
    t1 = new $.Vector(new Float64Array(2));
    t2 = t1._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t2[0] = 0;
    if (1 >= t3)
      throw $.ioore(1);
    t2[1] = 0;
    return t1;
  }
},

TimeOfImpactSolver: {"": "Object;constraints,count@,toiBody,psm,rA<,rB<,P,temp",
  initialize$3: function(_, contacts, argCount, argToiBody) {
    var old, t1, i, t2, contact, fixtureA, fixtureB, shapeA, t3, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, constraint, t4, t5, t6, j, cp;
    this.count = argCount;
    this.toiBody = argToiBody;
    if ($.$ge$n(this.count, $.get$length$asx(this.constraints))) {
      old = this.constraints;
      t1 = $.getInterceptor$asx(old);
      this.constraints = $.List_List($.max(this.count, $.$mul$n(t1.get$length(old), 2)));
      $.setRange$3$ax(this.constraints, 0, t1.get$length(old), old);
      i = t1.get$length(old);
      if (typeof i !== "number")
        return this.initialize$3$bailout(1, contacts, i);
      while (true) {
        t1 = $.get$length$asx(this.constraints);
        if (typeof t1 !== "number")
          throw $.iae(t1);
        if (!(i < t1))
          break;
        $.$indexSet$ax(this.constraints, i, $.TimeOfImpactConstraint$());
        ++i;
      }
    }
    t1 = contacts.length;
    i = 0;
    while (true) {
      t2 = this.count;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      if (i >= t1)
        throw $.ioore(i);
      contact = contacts[i];
      fixtureA = contact.get$fixtureA();
      fixtureB = contact.get$fixtureB();
      t2 = $.getInterceptor$x(fixtureA);
      shapeA = t2.get$shape(fixtureA);
      t3 = $.getInterceptor$x(fixtureB);
      shapeB = t3.get$shape(fixtureB);
      radiusA = shapeA.get$radius();
      radiusB = shapeB.get$radius();
      bodyA = t2.get$body(fixtureA);
      bodyB = t3.get$body(fixtureB);
      manifold = contact.get$manifold();
      constraint = $.$index$asx(this.constraints, i);
      constraint.set$bodyA(bodyA);
      constraint.set$bodyB(bodyB);
      t3 = constraint.get$localNormal();
      t3 = t3._f;
      t2 = manifold.get$localNormal()._f;
      t4 = t2.length;
      if (0 >= t4)
        throw $.ioore(0);
      t5 = t2[0];
      t6 = t3.length;
      if (0 >= t6)
        throw $.ioore(0);
      t3[0] = t5;
      if (1 >= t4)
        throw $.ioore(1);
      t2 = t2[1];
      if (1 >= t6)
        throw $.ioore(1);
      t3[1] = t2;
      t2 = constraint.get$localPoint();
      t2 = t2._f;
      t3 = manifold.get$localPoint()._f;
      t6 = t3.length;
      if (0 >= t6)
        throw $.ioore(0);
      t4 = t3[0];
      t5 = t2.length;
      if (0 >= t5)
        throw $.ioore(0);
      t2[0] = t4;
      if (1 >= t6)
        throw $.ioore(1);
      t3 = t3[1];
      if (1 >= t5)
        throw $.ioore(1);
      t2[1] = t3;
      t3 = $.getInterceptor$x(manifold);
      $.set$type$x(constraint, t3.get$type(manifold));
      constraint.set$pointCount(manifold.get$pointCount());
      constraint.set$radius($.$add$ns(radiusA, radiusB));
      j = 0;
      while (true) {
        t2 = constraint.get$pointCount();
        if (typeof t2 !== "number")
          throw $.iae(t2);
        if (!(j < t2))
          break;
        cp = $.$index$asx(t3.get$points(manifold), j);
        $.$indexSet$ax(constraint.get$localPoints(), j, cp.get$localPoint());
        ++j;
      }
      ++i;
    }
  },
  initialize$3$bailout: function(state0, contacts, i) {
    switch (state0) {
      case 0:
        this.count = argCount;
        this.toiBody = argToiBody;
      case 1:
        var old, t1, t2, contact, fixtureA, fixtureB, shapeA, t3, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, constraint, t4, t5, t6, j, cp;
        if (state0 === 1 || state0 === 0 && $.$ge$n(this.count, $.get$length$asx(this.constraints)))
          switch (state0) {
            case 0:
              old = this.constraints;
              t1 = $.getInterceptor$asx(old);
              this.constraints = $.List_List($.max(this.count, $.$mul$n(t1.get$length(old), 2)));
              $.setRange$3$ax(this.constraints, 0, t1.get$length(old), old);
              i = t1.get$length(old);
            case 1:
              state0 = 0;
              while (true) {
                t1 = $.get$length$asx(this.constraints);
                t2 = $.getInterceptor$n(i);
                if (typeof t1 !== "number")
                  throw $.iae(t1);
                if (!t2.$lt(i, t1))
                  break;
                $.$indexSet$ax(this.constraints, i, $.TimeOfImpactConstraint$());
                i = t2.$add(i, 1);
              }
          }
        t1 = contacts.length;
        i = 0;
        while (true) {
          t2 = this.count;
          if (typeof t2 !== "number")
            throw $.iae(t2);
          if (!(i < t2))
            break;
          if (i >= t1)
            throw $.ioore(i);
          contact = contacts[i];
          fixtureA = contact.get$fixtureA();
          fixtureB = contact.get$fixtureB();
          t2 = $.getInterceptor$x(fixtureA);
          shapeA = t2.get$shape(fixtureA);
          t3 = $.getInterceptor$x(fixtureB);
          shapeB = t3.get$shape(fixtureB);
          radiusA = shapeA.get$radius();
          radiusB = shapeB.get$radius();
          bodyA = t2.get$body(fixtureA);
          bodyB = t3.get$body(fixtureB);
          manifold = contact.get$manifold();
          constraint = $.$index$asx(this.constraints, i);
          constraint.set$bodyA(bodyA);
          constraint.set$bodyB(bodyB);
          t3 = constraint.get$localNormal();
          t3 = t3._f;
          t2 = manifold.get$localNormal()._f;
          t4 = t2.length;
          if (0 >= t4)
            throw $.ioore(0);
          t5 = t2[0];
          t6 = t3.length;
          if (0 >= t6)
            throw $.ioore(0);
          t3[0] = t5;
          if (1 >= t4)
            throw $.ioore(1);
          t2 = t2[1];
          if (1 >= t6)
            throw $.ioore(1);
          t3[1] = t2;
          t2 = constraint.get$localPoint();
          t2 = t2._f;
          t3 = manifold.get$localPoint()._f;
          t6 = t3.length;
          if (0 >= t6)
            throw $.ioore(0);
          t4 = t3[0];
          t5 = t2.length;
          if (0 >= t5)
            throw $.ioore(0);
          t2[0] = t4;
          if (1 >= t6)
            throw $.ioore(1);
          t3 = t3[1];
          if (1 >= t5)
            throw $.ioore(1);
          t2[1] = t3;
          t3 = $.getInterceptor$x(manifold);
          $.set$type$x(constraint, t3.get$type(manifold));
          constraint.set$pointCount(manifold.get$pointCount());
          constraint.set$radius($.$add$ns(radiusA, radiusB));
          j = 0;
          while (true) {
            t2 = constraint.get$pointCount();
            if (typeof t2 !== "number")
              throw $.iae(t2);
            if (!(j < t2))
              break;
            cp = $.$index$asx(t3.get$points(manifold), j);
            $.$indexSet$ax(constraint.get$localPoints(), j, cp.get$localPoint());
            ++j;
          }
          ++i;
        }
    }
  },
  solve$1: function(baumgarte) {
    var t1, t2, t3, t4, t5, t6, t7, minSeparation, i, t8, c, bodyA, bodyB, massA, massB, invMassA, invIA, invMassB, invIB, j, t9, separation, t10, t11, C, t12, rnA, rnB, K, impulse, t13;
    t1 = this.P._f;
    t2 = this.temp._f;
    t3 = this.rA._f;
    t4 = this.rB._f;
    t5 = this.psm;
    t6 = t5.point._f;
    t7 = t5.normal._f;
    minSeparation = 0;
    i = 0;
    while (true) {
      t8 = this.count;
      if (typeof t8 !== "number")
        throw $.iae(t8);
      if (!(i < t8))
        break;
      t8 = this.constraints;
      if (typeof t8 !== "string" && (typeof t8 !== "object" || t8 === null || t8.constructor !== Array && !$.isJsIndexable(t8, t8[$.dispatchPropertyName])))
        return this.solve$1$bailout(1, baumgarte, t1, t8, t5, minSeparation, t3, t4, i, t2, t7, t6);
      if (i >= t8.length)
        throw $.ioore(i);
      c = t8[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      massA = bodyA.get$mass();
      if (typeof massA !== "number")
        return this.solve$1$bailout(2, baumgarte, t1, 0, t5, minSeparation, t3, t4, i, t2, t7, t6, bodyA, bodyB, massA, c);
      massB = bodyB.get$mass();
      if (typeof massB !== "number")
        return this.solve$1$bailout(3, baumgarte, t1, 0, t5, minSeparation, t3, t4, i, t2, t7, t6, bodyA, bodyB, massA, c, massB);
      if ($.$eq(bodyA, this.toiBody))
        massB = 0;
      else
        massA = 0;
      invMassA = massA * bodyA.get$invMass();
      invIA = massA * bodyA.get$invInertia();
      invMassB = massB * bodyB.get$invMass();
      invIB = massB * bodyB.get$invInertia();
      t8 = invMassA + invMassB;
      j = 0;
      while (true) {
        t9 = c.get$pointCount();
        if (typeof t9 !== "number")
          throw $.iae(t9);
        if (!(j < t9))
          break;
        t5.initialize$2(t5, c, j);
        separation = t5.separation;
        if (typeof separation !== "number")
          return this.solve$1$bailout(4, baumgarte, t1, $.JSNumber_methods, t5, minSeparation, t3, t4, i, t2, t7, t6, bodyA, bodyB, 0, c, 0, $.JSNumber_methods, invMassA, invIA, invMassB, invIB, separation, $.JSNumber_methods, j);
        t9 = t6.length;
        if (0 >= t9)
          throw $.ioore(0);
        t10 = t6[0];
        t11 = t3.length;
        if (0 >= t11)
          throw $.ioore(0);
        t3[0] = t10;
        if (1 >= t9)
          throw $.ioore(1);
        t9 = t6[1];
        if (1 >= t11)
          throw $.ioore(1);
        t3[1] = t9;
        t9 = bodyA.get$sweep();
        t11 = t3[0];
        t9 = t9.center._f;
        t10 = t9.length;
        if (0 >= t10)
          throw $.ioore(0);
        t3[0] = t11 - t9[0];
        t11 = t3[1];
        if (1 >= t10)
          throw $.ioore(1);
        t3[1] = t11 - t9[1];
        t9 = t6[0];
        t11 = t4.length;
        if (0 >= t11)
          throw $.ioore(0);
        t4[0] = t9;
        t9 = t6[1];
        if (1 >= t11)
          throw $.ioore(1);
        t4[1] = t9;
        t9 = bodyB.get$sweep();
        t11 = t4[0];
        t9 = t9.center._f;
        t10 = t9.length;
        if (0 >= t10)
          throw $.ioore(0);
        t4[0] = t11 - t9[0];
        t11 = t4[1];
        if (1 >= t10)
          throw $.ioore(1);
        t4[1] = t11 - t9[1];
        minSeparation = $.min(minSeparation, separation);
        C = $.max(-0.2, $.min(baumgarte * (separation + 0.005), 0));
        t9 = t3.length;
        if (0 >= t9)
          throw $.ioore(0);
        t11 = t3[0];
        if (1 >= t7.length)
          throw $.ioore(1);
        t10 = t7[1];
        if (1 >= t9)
          throw $.ioore(1);
        t9 = t3[1];
        t12 = t7[0];
        rnA = t11 * t10 - t9 * t12;
        t9 = t4.length;
        if (0 >= t9)
          throw $.ioore(0);
        t11 = t4[0];
        if (1 >= t9)
          throw $.ioore(1);
        rnB = t11 * t10 - t4[1] * t12;
        K = t8 + invIA * rnA * rnA + invIB * rnB * rnB;
        impulse = K > 0 ? -C / K : 0;
        t9 = t1.length;
        if (0 >= t9)
          throw $.ioore(0);
        t1[0] = t12;
        t12 = t7[1];
        if (1 >= t9)
          throw $.ioore(1);
        t1[1] = t12;
        t1[0] = t1[0] * impulse;
        t1[1] = t1[1] * impulse;
        t12 = t1[0];
        t9 = t2.length;
        if (0 >= t9)
          throw $.ioore(0);
        t2[0] = t12;
        t12 = t1[1];
        if (1 >= t9)
          throw $.ioore(1);
        t2[1] = t12;
        t2[0] = t2[0] * invMassA;
        t2[1] = t2[1] * invMassA;
        t12 = bodyA.get$sweep().center._f;
        t9 = t12.length;
        if (0 >= t9)
          throw $.ioore(0);
        t12[0] = t12[0] - t2[0];
        if (1 >= t9)
          throw $.ioore(1);
        t12[1] = t12[1] - t2[1];
        t12 = bodyA.get$sweep();
        t9 = t12.angle;
        if (typeof t9 !== "number")
          return this.solve$1$bailout(5, baumgarte, t1, $.JSNumber_methods, t5, minSeparation, t3, t4, i, t2, t7, t6, bodyA, bodyB, 0, c, 0, $.JSNumber_methods, invMassA, invIA, invMassB, invIB, 0, $.JSNumber_methods, j, t12, t9);
        t12.angle = t9 - invIA * (t3[0] * t1[1] - t3[1] * t1[0]);
        bodyA.synchronizeTransform$0();
        t9 = t1.length;
        if (0 >= t9)
          throw $.ioore(0);
        t12 = t1[0];
        t10 = t2.length;
        if (0 >= t10)
          throw $.ioore(0);
        t2[0] = t12;
        if (1 >= t9)
          throw $.ioore(1);
        t9 = t1[1];
        if (1 >= t10)
          throw $.ioore(1);
        t2[1] = t9;
        t2[0] = t2[0] * invMassB;
        t2[1] = t2[1] * invMassB;
        t9 = bodyB.get$sweep().center._f;
        t10 = t9.length;
        if (0 >= t10)
          throw $.ioore(0);
        t9[0] = t9[0] + t2[0];
        if (1 >= t10)
          throw $.ioore(1);
        t9[1] = t9[1] + t2[1];
        t9 = bodyB.get$sweep();
        t10 = t9.angle;
        if (typeof t10 !== "number")
          return this.solve$1$bailout(6, baumgarte, t1, $.JSNumber_methods, t5, minSeparation, t3, t4, i, t2, t7, t6, bodyA, bodyB, 0, c, 0, $.JSNumber_methods, invMassA, invIA, invMassB, invIB, 0, $.JSNumber_methods, j, 0, t9, t10);
        t12 = t4.length;
        if (0 >= t12)
          throw $.ioore(0);
        t11 = t4[0];
        t13 = t1[1];
        if (1 >= t12)
          throw $.ioore(1);
        t9.angle = t10 + invIB * (t11 * t13 - t4[1] * t1[0]);
        bodyB.synchronizeTransform$0();
        ++j;
      }
      ++i;
    }
    return minSeparation >= -0.0075;
  },
  solve$1$bailout: function(state0, baumgarte, t1, t8, t5, minSeparation, t3, t4, i, t2, t7, t6, bodyA, bodyB, massA, c, massB, t10, invMassA, invIA, invMassB, invIB, separation, t9, j, t14, t11, t12) {
    switch (state0) {
      case 0:
        t1 = this.P._f;
        t2 = this.temp._f;
        t3 = this.rA._f;
        t4 = this.rB._f;
        t5 = this.psm;
        t6 = t5.point._f;
        t7 = t5.normal._f;
        minSeparation = 0;
        i = 0;
      default:
        var t13, C, rnA, rnB, K, impulse, t15;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t8 = this.count;
                if (typeof t8 !== "number")
                  throw $.iae(t8);
                if (!(i < t8))
                  break L0;
                t8 = this.constraints;
              case 1:
                state0 = 0;
                c = $.$index$asx(t8, i);
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                massA = bodyA.get$mass();
              case 2:
                state0 = 0;
                massB = bodyB.get$mass();
              case 3:
                state0 = 0;
                if ($.$eq(bodyA, this.toiBody))
                  massB = 0;
                else
                  massA = 0;
                t8 = $.getInterceptor$n(massA);
                invMassA = t8.$mul(massA, bodyA.get$invMass());
                invIA = t8.$mul(massA, bodyA.get$invInertia());
                t8 = $.getInterceptor$n(massB);
                invMassB = t8.$mul(massB, bodyB.get$invMass());
                invIB = t8.$mul(massB, bodyB.get$invInertia());
                t8 = $.getInterceptor$n(invIA);
                t9 = $.getInterceptor$n(invIB);
                t10 = $.getInterceptor$ns(invMassA);
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t11 = c.get$pointCount();
                        if (typeof t11 !== "number")
                          throw $.iae(t11);
                        if (!(j < t11))
                          break L1;
                        t5.initialize$2(t5, c, j);
                        separation = t5.separation;
                      case 4:
                        state0 = 0;
                        t11 = t6.length;
                        if (0 >= t11)
                          throw $.ioore(0);
                        t12 = t6[0];
                        t13 = t3.length;
                        if (0 >= t13)
                          throw $.ioore(0);
                        t3[0] = t12;
                        if (1 >= t11)
                          throw $.ioore(1);
                        t11 = t6[1];
                        if (1 >= t13)
                          throw $.ioore(1);
                        t3[1] = t11;
                        t11 = bodyA.get$sweep();
                        t13 = t3[0];
                        t11 = t11.center._f;
                        t12 = t11.length;
                        if (0 >= t12)
                          throw $.ioore(0);
                        t3[0] = t13 - t11[0];
                        t13 = t3[1];
                        if (1 >= t12)
                          throw $.ioore(1);
                        t3[1] = t13 - t11[1];
                        t11 = t6[0];
                        t13 = t4.length;
                        if (0 >= t13)
                          throw $.ioore(0);
                        t4[0] = t11;
                        t11 = t6[1];
                        if (1 >= t13)
                          throw $.ioore(1);
                        t4[1] = t11;
                        t11 = bodyB.get$sweep();
                        t13 = t4[0];
                        t11 = t11.center._f;
                        t12 = t11.length;
                        if (0 >= t12)
                          throw $.ioore(0);
                        t4[0] = t13 - t11[0];
                        t13 = t4[1];
                        if (1 >= t12)
                          throw $.ioore(1);
                        t4[1] = t13 - t11[1];
                        minSeparation = $.min(minSeparation, separation);
                        t11 = $.$add$ns(separation, 0.005);
                        if (typeof t11 !== "number")
                          throw $.iae(t11);
                        C = $.max(-0.2, $.min(baumgarte * t11, 0));
                        t11 = t3.length;
                        if (0 >= t11)
                          throw $.ioore(0);
                        t13 = t3[0];
                        if (1 >= t7.length)
                          throw $.ioore(1);
                        t12 = t7[1];
                        if (1 >= t11)
                          throw $.ioore(1);
                        t11 = t3[1];
                        t14 = t7[0];
                        rnA = t13 * t12 - t11 * t14;
                        t11 = t4.length;
                        if (0 >= t11)
                          throw $.ioore(0);
                        t13 = t4[0];
                        if (1 >= t11)
                          throw $.ioore(1);
                        rnB = t13 * t12 - t4[1] * t14;
                        K = $.$add$ns($.$add$ns(t10.$add(invMassA, invMassB), $.$mul$n(t8.$mul(invIA, rnA), rnA)), $.$mul$n(t9.$mul(invIB, rnB), rnB));
                        if ($.$gt$n(K, 0)) {
                          if (typeof K !== "number")
                            throw $.iae(K);
                          impulse = -C / K;
                        } else
                          impulse = 0;
                        t11 = t1.length;
                        if (0 >= t11)
                          throw $.ioore(0);
                        t1[0] = t14;
                        t14 = t7[1];
                        if (1 >= t11)
                          throw $.ioore(1);
                        t1[1] = t14;
                        t1[0] = t1[0] * impulse;
                        t1[1] = t1[1] * impulse;
                        t14 = t1[0];
                        t11 = t2.length;
                        if (0 >= t11)
                          throw $.ioore(0);
                        t2[0] = t14;
                        t14 = t1[1];
                        if (1 >= t11)
                          throw $.ioore(1);
                        t2[1] = t14;
                        t14 = t2[0];
                        if (typeof invMassA !== "number")
                          throw $.iae(invMassA);
                        t2[0] = t14 * invMassA;
                        t2[1] = t2[1] * invMassA;
                        t14 = bodyA.get$sweep().center._f;
                        t11 = t14.length;
                        if (0 >= t11)
                          throw $.ioore(0);
                        t14[0] = t14[0] - t2[0];
                        if (1 >= t11)
                          throw $.ioore(1);
                        t14[1] = t14[1] - t2[1];
                        t14 = bodyA.get$sweep();
                        t11 = t14.angle;
                      case 5:
                        state0 = 0;
                        t14.angle = $.$sub$n(t11, t8.$mul(invIA, t3[0] * t1[1] - t3[1] * t1[0]));
                        bodyA.synchronizeTransform$0();
                        t11 = t1.length;
                        if (0 >= t11)
                          throw $.ioore(0);
                        t14 = t1[0];
                        t12 = t2.length;
                        if (0 >= t12)
                          throw $.ioore(0);
                        t2[0] = t14;
                        if (1 >= t11)
                          throw $.ioore(1);
                        t11 = t1[1];
                        if (1 >= t12)
                          throw $.ioore(1);
                        t2[1] = t11;
                        t11 = t2[0];
                        if (typeof invMassB !== "number")
                          throw $.iae(invMassB);
                        t2[0] = t11 * invMassB;
                        t2[1] = t2[1] * invMassB;
                        t11 = bodyB.get$sweep().center._f;
                        t12 = t11.length;
                        if (0 >= t12)
                          throw $.ioore(0);
                        t11[0] = t11[0] + t2[0];
                        if (1 >= t12)
                          throw $.ioore(1);
                        t11[1] = t11[1] + t2[1];
                        t11 = bodyB.get$sweep();
                        t12 = t11.angle;
                      case 6:
                        state0 = 0;
                        t14 = t4.length;
                        if (0 >= t14)
                          throw $.ioore(0);
                        t13 = t4[0];
                        t15 = t1[1];
                        if (1 >= t14)
                          throw $.ioore(1);
                        t11.angle = $.$add$ns(t12, t9.$mul(invIB, t13 * t15 - t4[1] * t1[0]));
                        bodyB.synchronizeTransform$0();
                        ++j;
                    }
                ++i;
            }
        return minSeparation >= -0.0075;
    }
  }
},

TimeOfImpactSolver_closure: {"": "Closure;",
  call$1: function(i) {
    return $.TimeOfImpactConstraint$();
  }
},

TimeOfImpactSolverManifold: {"": "Object;normal<,point,separation,pointA<,pointB<,temp,planePoint,clipPoint",
  initialize$2: function(_, cc, index) {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    switch ($.get$type$x(cc)) {
      case 0:
        t1 = this.pointA;
        t2 = t1._f;
        t3 = cc.get$bodyA().getWorldPoint$1(cc.get$localPoint())._f;
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t5 = t3[0];
        t6 = t2.length;
        if (0 >= t6)
          throw $.ioore(0);
        t2[0] = t5;
        if (1 >= t4)
          throw $.ioore(1);
        t3 = t3[1];
        if (1 >= t6)
          throw $.ioore(1);
        t2[1] = t3;
        t3 = this.pointB;
        t6 = t3._f;
        t4 = cc.get$bodyB().getWorldPoint$1($.$index$asx(cc.get$localPoints(), 0))._f;
        t5 = t4.length;
        if (0 >= t5)
          throw $.ioore(0);
        t7 = t4[0];
        t8 = t6.length;
        if (0 >= t8)
          throw $.ioore(0);
        t6[0] = t7;
        if (1 >= t5)
          throw $.ioore(1);
        t4 = t4[1];
        if (1 >= t8)
          throw $.ioore(1);
        t6[1] = t4;
        t4 = this.normal;
        if ($.MathBox_distanceSquared(t1, t3) > 1.4208639999999999e-14) {
          t1 = t4._f;
          t3 = t6.length;
          if (0 >= t3)
            throw $.ioore(0);
          t5 = t6[0];
          t7 = t1.length;
          if (0 >= t7)
            throw $.ioore(0);
          t1[0] = t5;
          if (1 >= t3)
            throw $.ioore(1);
          t3 = t6[1];
          if (1 >= t7)
            throw $.ioore(1);
          t1[1] = t3;
          t3 = t1[0];
          t7 = t2.length;
          if (0 >= t7)
            throw $.ioore(0);
          t1[0] = t3 - t2[0];
          t3 = t1[1];
          if (1 >= t7)
            throw $.ioore(1);
          t1[1] = t3 - t2[1];
          t4.normalize$0();
        } else {
          t1 = t4._f;
          t3 = t1.length;
          if (0 >= t3)
            throw $.ioore(0);
          t1[0] = 1;
          if (1 >= t3)
            throw $.ioore(1);
          t1[1] = 0;
        }
        t1 = this.point._f;
        t3 = t2.length;
        if (0 >= t3)
          throw $.ioore(0);
        t4 = t2[0];
        t5 = t1.length;
        if (0 >= t5)
          throw $.ioore(0);
        t1[0] = t4;
        if (1 >= t3)
          throw $.ioore(1);
        t3 = t2[1];
        if (1 >= t5)
          throw $.ioore(1);
        t1[1] = t3;
        t3 = t1[0];
        t5 = t6.length;
        if (0 >= t5)
          throw $.ioore(0);
        t1[0] = t3 + t6[0];
        t3 = t1[1];
        if (1 >= t5)
          throw $.ioore(1);
        t1[1] = t3 + t6[1];
        t1[0] = t1[0] * 0.5;
        t1[1] = t1[1] * 0.5;
        t1 = this.temp;
        t3 = t1._f;
        t5 = t6[0];
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t3[0] = t5;
        t6 = t6[1];
        if (1 >= t4)
          throw $.ioore(1);
        t3[1] = t6;
        t3[0] = t3[0] - t2[0];
        t3[1] = t3[1] - t2[1];
        t2 = this.normal;
        t3 = t1.get$x(t1);
        t6 = t2.get$x(t2);
        t1 = t1.get$y(t1);
        t2 = t2.get$y(t2);
        t4 = cc.get$radius();
        if (typeof t4 !== "number")
          throw $.iae(t4);
        this.separation = t3 * t6 + t1 * t2 - t4;
        break;
      case 1:
        t1 = this.normal;
        t2 = t1._f;
        t3 = cc.get$bodyA().getWorldVector$1(cc.get$localNormal())._f;
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t5 = t3[0];
        t6 = t2.length;
        if (0 >= t6)
          throw $.ioore(0);
        t2[0] = t5;
        if (1 >= t4)
          throw $.ioore(1);
        t3 = t3[1];
        if (1 >= t6)
          throw $.ioore(1);
        t2[1] = t3;
        t3 = this.planePoint._f;
        t2 = cc.get$bodyA().getWorldPoint$1(cc.get$localPoint())._f;
        t6 = t2.length;
        if (0 >= t6)
          throw $.ioore(0);
        t4 = t2[0];
        t5 = t3.length;
        if (0 >= t5)
          throw $.ioore(0);
        t3[0] = t4;
        if (1 >= t6)
          throw $.ioore(1);
        t2 = t2[1];
        if (1 >= t5)
          throw $.ioore(1);
        t3[1] = t2;
        t2 = this.clipPoint._f;
        t5 = cc.get$bodyB().getWorldPoint$1($.$index$asx(cc.get$localPoints(), index))._f;
        t6 = t5.length;
        if (0 >= t6)
          throw $.ioore(0);
        t4 = t5[0];
        t7 = t2.length;
        if (0 >= t7)
          throw $.ioore(0);
        t2[0] = t4;
        if (1 >= t6)
          throw $.ioore(1);
        t5 = t5[1];
        if (1 >= t7)
          throw $.ioore(1);
        t2[1] = t5;
        t5 = this.temp;
        t7 = t5._f;
        t6 = t2[0];
        t4 = t7.length;
        if (0 >= t4)
          throw $.ioore(0);
        t7[0] = t6;
        t6 = t2[1];
        if (1 >= t4)
          throw $.ioore(1);
        t7[1] = t6;
        t6 = t7[0];
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t7[0] = t6 - t3[0];
        t6 = t7[1];
        if (1 >= t4)
          throw $.ioore(1);
        t7[1] = t6 - t3[1];
        t3 = t5.get$x(t5);
        t6 = t1.get$x(t1);
        t5 = t5.get$y(t5);
        t1 = t1.get$y(t1);
        t7 = cc.get$radius();
        if (typeof t7 !== "number")
          throw $.iae(t7);
        this.separation = t3 * t6 + t5 * t1 - t7;
        t7 = this.point._f;
        t1 = t2.length;
        if (0 >= t1)
          throw $.ioore(0);
        t5 = t2[0];
        t6 = t7.length;
        if (0 >= t6)
          throw $.ioore(0);
        t7[0] = t5;
        if (1 >= t1)
          throw $.ioore(1);
        t2 = t2[1];
        if (1 >= t6)
          throw $.ioore(1);
        t7[1] = t2;
        break;
      case 2:
        t1 = this.normal;
        t2 = t1._f;
        t3 = cc.get$bodyB().getWorldVector$1(cc.get$localNormal())._f;
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t5 = t3[0];
        t6 = t2.length;
        if (0 >= t6)
          throw $.ioore(0);
        t2[0] = t5;
        if (1 >= t4)
          throw $.ioore(1);
        t3 = t3[1];
        if (1 >= t6)
          throw $.ioore(1);
        t2[1] = t3;
        t3 = this.planePoint._f;
        t6 = cc.get$bodyB().getWorldPoint$1(cc.get$localPoint())._f;
        t4 = t6.length;
        if (0 >= t4)
          throw $.ioore(0);
        t5 = t6[0];
        t7 = t3.length;
        if (0 >= t7)
          throw $.ioore(0);
        t3[0] = t5;
        if (1 >= t4)
          throw $.ioore(1);
        t6 = t6[1];
        if (1 >= t7)
          throw $.ioore(1);
        t3[1] = t6;
        t6 = this.clipPoint._f;
        t7 = cc.get$bodyA().getWorldPoint$1($.$index$asx(cc.get$localPoints(), index))._f;
        t4 = t7.length;
        if (0 >= t4)
          throw $.ioore(0);
        t5 = t7[0];
        t8 = t6.length;
        if (0 >= t8)
          throw $.ioore(0);
        t6[0] = t5;
        if (1 >= t4)
          throw $.ioore(1);
        t7 = t7[1];
        if (1 >= t8)
          throw $.ioore(1);
        t6[1] = t7;
        t7 = this.temp;
        t8 = t7._f;
        t4 = t6[0];
        t5 = t8.length;
        if (0 >= t5)
          throw $.ioore(0);
        t8[0] = t4;
        t4 = t6[1];
        if (1 >= t5)
          throw $.ioore(1);
        t8[1] = t4;
        t4 = t8[0];
        t5 = t3.length;
        if (0 >= t5)
          throw $.ioore(0);
        t8[0] = t4 - t3[0];
        t4 = t8[1];
        if (1 >= t5)
          throw $.ioore(1);
        t8[1] = t4 - t3[1];
        t3 = t7.get$x(t7);
        t4 = t1.get$x(t1);
        t7 = t7.get$y(t7);
        t1 = t1.get$y(t1);
        t8 = cc.get$radius();
        if (typeof t8 !== "number")
          throw $.iae(t8);
        this.separation = t3 * t4 + t7 * t1 - t8;
        t8 = this.point._f;
        t1 = t6.length;
        if (0 >= t1)
          throw $.ioore(0);
        t7 = t6[0];
        t4 = t8.length;
        if (0 >= t4)
          throw $.ioore(0);
        t8[0] = t7;
        if (1 >= t1)
          throw $.ioore(1);
        t6 = t6[1];
        if (1 >= t4)
          throw $.ioore(1);
        t8[1] = t6;
        t6 = t2.length;
        if (0 >= t6)
          throw $.ioore(0);
        t2[0] = -t2[0];
        if (1 >= t6)
          throw $.ioore(1);
        t2[1] = -t2[1];
        break;
    }
  }
},

Filter: {"": "Object;categoryBits<,maskBits<,groupIndex<",
  setFrom$1: function(other) {
    this.categoryBits = other.get$categoryBits();
    this.maskBits = other.get$maskBits();
    this.groupIndex = other.get$groupIndex();
  }
},

Fixture: {"": "Object;box<,density<,next@,body>,shape>,friction@,restitution@,proxy<,filter<,isSensor<,userData@,_poolOne,_poolTwo",
  create$2: function(b, def) {
    var t1, t2;
    this.userData = def.userData;
    this.friction = def.friction;
    this.restitution = def.restitution;
    this.body = b;
    this.next = null;
    t1 = this.filter;
    t2 = def.filter;
    t1.categoryBits = t2.categoryBits;
    t1.maskBits = t2.maskBits;
    t1.groupIndex = t2.groupIndex;
    this.isSensor = def.isSensor;
    t2 = def.shape;
    this.shape = t2.clone$0(t2);
    this.density = def.density;
  },
  synchronize$3: function(broadPhase, transformOne, transformTwo) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13;
    if (this.proxy == null)
      return;
    t1 = this._poolOne;
    this.shape.computeAxisAlignedBox$2(t1, transformOne);
    t2 = this._poolTwo;
    this.shape.computeAxisAlignedBox$2(t2, transformTwo);
    t3 = this.box;
    t4 = t3.lowerBound;
    t5 = t1.lowerBound;
    t5.get$x;
    t6 = t5._f;
    t7 = t6.length;
    if (0 >= t7)
      throw $.ioore(0);
    t8 = t6[0];
    t9 = t2.lowerBound;
    t9.get$x;
    t10 = t9._f;
    t11 = t10.length;
    if (0 >= t11)
      throw $.ioore(0);
    t12 = t10[0];
    t8 = t8 < t12 ? t8 : t12;
    t4.set$x;
    t12 = t4._f;
    t13 = t12.length;
    if (0 >= t13)
      throw $.ioore(0);
    t12[0] = t8;
    t5.get$y;
    if (1 >= t7)
      throw $.ioore(1);
    t7 = t6[1];
    t9.get$y;
    if (1 >= t11)
      throw $.ioore(1);
    t10 = t10[1];
    t7 = t7 < t10 ? t7 : t10;
    t4.set$y;
    if (1 >= t13)
      throw $.ioore(1);
    t12[1] = t7;
    t7 = t3.upperBound;
    t1 = t1.upperBound;
    t1.get$x;
    t4 = t1._f;
    t8 = t4.length;
    if (0 >= t8)
      throw $.ioore(0);
    t9 = t4[0];
    t2 = t2.upperBound;
    t2.get$x;
    t10 = t2._f;
    t11 = t10.length;
    if (0 >= t11)
      throw $.ioore(0);
    t12 = t10[0];
    t9 = t9 > t12 ? t9 : t12;
    t7.set$x;
    t12 = t7._f;
    t13 = t12.length;
    if (0 >= t13)
      throw $.ioore(0);
    t12[0] = t9;
    t1.get$y;
    if (1 >= t8)
      throw $.ioore(1);
    t1 = t4[1];
    t2.get$y;
    if (1 >= t11)
      throw $.ioore(1);
    t10 = t10[1];
    t1 = t1 > t10 ? t1 : t10;
    t7.set$y;
    if (1 >= t13)
      throw $.ioore(1);
    t12[1] = t1;
    t1 = transformTwo.position._f;
    t12 = t1.length;
    if (0 >= t12)
      throw $.ioore(0);
    t13 = t1[0];
    t7 = transformOne.position._f;
    t2 = t7.length;
    if (0 >= t2)
      throw $.ioore(0);
    t4 = t7[0];
    t5.set$x;
    t6[0] = t13 - t4;
    if (1 >= t12)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t2)
      throw $.ioore(1);
    t7 = t7[1];
    t5.set$y;
    t6[1] = t1 - t7;
    t7 = this.proxy;
    if (broadPhase._tree.moveProxy$3(t7, t3, t5))
      broadPhase.moveBuffer.push(t7);
  },
  getMassData$1: function(massData) {
    this.shape.computeMass$2(massData, this.density);
  },
  get$type: function(_) {
    return this.shape.type;
  }
},

FixtureDef: {"": "Object;shape>,userData@,friction@,restitution@,density<,isSensor<,filter<",
  FixtureDef$0: function() {
    var t1 = this.filter;
    t1.categoryBits = 1;
    t1.maskBits = 65535;
    t1.groupIndex = 0;
  }
},

Island: {"": "Object;listener,bodies,contacts,joints,positions,velocities,bodyCount,jointCount,contactCount,bodyCapacity,contactCapacity,jointCapacity,positionIterationCount,_contactSolver,_translation,impulse",
  init$4: function(argBodyCapacity, argContactCapacity, argJointCapacity, argListener) {
    var t1, t2, old, t3, i, t4, t5;
    this.bodyCapacity = argBodyCapacity;
    this.contactCapacity = argContactCapacity;
    this.jointCapacity = argJointCapacity;
    this.bodyCount = 0;
    this.contactCount = 0;
    this.listener = argListener;
    t1 = this.bodies;
    if (t1 != null) {
      t2 = this.bodyCapacity;
      t1 = t1.length;
      if (t2 == null)
        throw t2.$gt();
      t1 = t2 > t1;
    } else
      t1 = true;
    if (t1)
      this.bodies = $.List_List(this.bodyCapacity);
    t1 = this.contacts;
    if (t1 != null) {
      t2 = this.contactCapacity;
      t1 = t1.length;
      if (t2 == null)
        throw t2.$gt();
      t1 = t2 > t1;
    } else
      t1 = true;
    if (t1)
      this.contacts = $.List_List(this.contactCapacity);
    t1 = this.joints;
    if (t1 != null) {
      t2 = this.jointCapacity;
      t1 = t1.length;
      if (t2 == null)
        throw t2.$gt();
      t1 = t2 > t1;
    } else
      t1 = true;
    if (t1)
      this.joints = $.List_List(this.jointCapacity);
    old = this.velocities;
    t1 = old == null;
    if (!t1) {
      t2 = this.bodyCapacity;
      t3 = old.length;
      if (t2 == null)
        throw t2.$gt();
      t3 = t2 > t3;
      t2 = t3;
    } else
      t2 = true;
    if (t2) {
      if (t1)
        old = $.List_List(0);
      this.velocities = $.List_List(this.bodyCapacity);
      t1 = this.velocities;
      i = old.length;
      t1.setRange$4;
      if (typeof t1 !== "object" || t1 === null || !!t1.immutable$list)
        $.throwExpression(new $.UnsupportedError("set range"));
      $.IterableMixinWorkaround_setRangeList(t1, 0, i, old, 0);
      for (; t1 = this.velocities, i < t1.length; ++i) {
        t2 = new $.Velocity(null, null);
        t3 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
        t4 = t3._f;
        t5 = t4.length;
        if (0 >= t5)
          throw $.ioore(0);
        t4[0] = 0;
        if (1 >= t5)
          throw $.ioore(1);
        t4[1] = 0;
        t2.v = t3;
        t2.a = 0;
        t1[i] = t2;
      }
    }
    old = this.positions;
    t1 = old == null;
    if (!t1) {
      t2 = this.bodyCapacity;
      t3 = old.length;
      if (t2 == null)
        throw t2.$gt();
      t3 = t2 > t3;
      t2 = t3;
    } else
      t2 = true;
    if (t2) {
      if (t1)
        old = $.List_List(0);
      this.positions = $.List_List(this.bodyCapacity);
      t1 = this.positions;
      i = old.length;
      t1.setRange$4;
      if (typeof t1 !== "object" || t1 === null || !!t1.immutable$list)
        $.throwExpression(new $.UnsupportedError("set range"));
      $.IterableMixinWorkaround_setRangeList(t1, 0, i, old, 0);
      for (; t1 = this.positions, i < t1.length; ++i) {
        t2 = new $.Position(null, null);
        t3 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
        t4 = t3._f;
        t5 = t4.length;
        if (0 >= t5)
          throw $.ioore(0);
        t4[0] = 0;
        if (1 >= t5)
          throw $.ioore(1);
        t4[1] = 0;
        t2.x = t3;
        t2.a = 0;
        t1[i] = t2;
      }
    }
  },
  solve$3: function(step, gravity, allowSleep) {
    var t1, i, t2, b, t3, t4, t5, t6, t7, t8, t9, a, a1, a2, b1, i1, i2, fixtureA, fixtureB, bodyA, bodyB, nonStatic, temp, j, ratio, rotation, contactsOkay, jointsOkay, jointOkay, minSleepTime;
    t1 = gravity._f;
    i = 0;
    while (true) {
      t2 = this.bodyCount;
      if (t2 == null)
        throw $.iae(t2);
      if (!(i < t2))
        break;
      c$0: {
        t2 = this.bodies;
        if (i >= t2.length)
          throw $.ioore(i);
        b = t2[i];
        t2 = $.get$type$x(b);
        if (typeof t2 !== "number")
          return this.solve$3$bailout(1, step, allowSleep, b, i, t1, t2);
        if (t2 !== 2)
          break c$0;
        t2 = b.get$_force()._f;
        t3 = t2.length;
        if (0 >= t3)
          throw $.ioore(0);
        t4 = t2[0];
        t5 = b.get$invMass();
        t6 = t1.length;
        if (0 >= t6)
          throw $.ioore(0);
        t7 = t1[0];
        t8 = step.dt;
        if (1 >= t3)
          throw $.ioore(1);
        t2 = t2[1];
        if (1 >= t6)
          throw $.ioore(1);
        t6 = t1[1];
        t3 = new $.Vector(new Float64Array(2))._f;
        t9 = t3.length;
        if (0 >= t9)
          throw $.ioore(0);
        t3[0] = (t4 * t5 + t7) * t8;
        if (1 >= t9)
          throw $.ioore(1);
        t3[1] = (t2 * t5 + t6) * t8;
        t8 = b.get$linearVelocity()._f;
        t6 = t8.length;
        if (0 >= t6)
          throw $.ioore(0);
        t5 = t8[0];
        t2 = t3.length;
        if (0 >= t2)
          throw $.ioore(0);
        t8[0] = t5 + t3[0];
        if (1 >= t6)
          throw $.ioore(1);
        t6 = t8[1];
        if (1 >= t2)
          throw $.ioore(1);
        t8[1] = t6 + t3[1];
        t3 = b.get$angularVelocity();
        if (typeof t3 !== "number")
          return this.solve$3$bailout(2, step, allowSleep, b, i, t1, 0, t3);
        b.set$angularVelocity(t3 + step.dt * b.get$invInertia() * b.get$_torque());
        a = 1 - step.dt * b.get$linearDamping();
        t2 = a < 1;
        if (0 > (t2 ? a : 1))
          a1 = 0;
        else
          a1 = t2 ? a : 1;
        t2 = b.get$linearVelocity()._f;
        t3 = t2.length;
        if (0 >= t3)
          throw $.ioore(0);
        t2[0] = t2[0] * a1;
        if (1 >= t3)
          throw $.ioore(1);
        t2[1] = t2[1] * a1;
        a2 = 1 - step.dt * b.get$angularDamping();
        b1 = a2 < 1 ? a2 : 1;
        t2 = b.get$angularVelocity();
        if (typeof t2 !== "number")
          return this.solve$3$bailout(3, step, allowSleep, b, i, t1, t2, 0, b1);
        b.set$angularVelocity(t2 * (0 > b1 ? 0 : b1));
      }
      ++i;
    }
    i1 = -1;
    i2 = 0;
    while (true) {
      t1 = this.contactCount;
      if (t1 == null)
        throw $.iae(t1);
      t2 = this.contacts;
      if (!(i2 < t1))
        break;
      if (i2 >= t2.length)
        throw $.ioore(i2);
      t1 = t2[i2];
      fixtureA = t1.get$fixtureA();
      fixtureB = t1.get$fixtureB();
      bodyA = $.get$body$x(fixtureA);
      bodyB = $.get$body$x(fixtureB);
      t1 = bodyA.get$type(bodyA);
      if (typeof t1 !== "number")
        return this.solve$3$bailout(4, step, allowSleep, 0, 0, t1, 0, 0, 0, i2, bodyB, i1);
      if (t1 !== 0) {
        t1 = bodyB.get$type(bodyB);
        if (typeof t1 !== "number")
          return this.solve$3$bailout(5, step, allowSleep, 0, 0, t1, 0, 0, 0, i2, 0, i1);
        nonStatic = t1 !== 0;
      } else
        nonStatic = false;
      if (nonStatic) {
        ++i1;
        t1 = this.contacts;
        t2 = t1.length;
        if (i1 >= t2)
          throw $.ioore(i1);
        temp = t1[i1];
        if (i2 >= t2)
          throw $.ioore(i2);
        t1[i1] = t1[i2];
        t1[i2] = temp;
      }
      ++i2;
    }
    t3 = this._contactSolver;
    t3.init$3(t2, t1, step.dtRatio);
    t3.warmStart$0();
    t1 = this.jointCount;
    if (t1 == null)
      throw $.iae(t1);
    t2 = this.joints;
    i = 0;
    for (; i < t1; ++i) {
      if (i >= t2.length)
        throw $.ioore(i);
      t2[i].initVelocityConstraints$1(step);
    }
    for (i = 0; i < step.velocityIterations; ++i) {
      t1 = this.jointCount;
      if (t1 == null)
        throw $.iae(t1);
      t2 = this.joints;
      j = 0;
      for (; j < t1; ++j) {
        if (j >= t2.length)
          throw $.ioore(j);
        t2[j].solveVelocityConstraints$1(step);
      }
      t3.solveVelocityConstraints$0();
    }
    t3.storeImpulses$0();
    t1 = new $.Vector(new Float64Array(2))._f;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = 0;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = 0;
    t2 = this._translation;
    t4 = t2._f;
    i = 0;
    while (true) {
      t5 = this.bodyCount;
      if (t5 == null)
        throw $.iae(t5);
      if (!(i < t5))
        break;
      c$0: {
        t5 = this.bodies;
        if (i >= t5.length)
          throw $.ioore(i);
        b = t5[i];
        t5 = $.get$type$x(b);
        if (typeof t5 !== "number")
          return this.solve$3$bailout(6, step, allowSleep, b, i, t1, t2, t3, 0, 0, 0, 0, t5, t4);
        if (t5 === 0)
          break c$0;
        t5 = b.get$linearVelocity()._f;
        t6 = t5.length;
        if (0 >= t6)
          throw $.ioore(0);
        t7 = t5[0];
        t8 = t4.length;
        if (0 >= t8)
          throw $.ioore(0);
        t4[0] = t7;
        if (1 >= t6)
          throw $.ioore(1);
        t5 = t5[1];
        if (1 >= t8)
          throw $.ioore(1);
        t4[1] = t5;
        t5 = step.dt;
        t4[0] = t4[0] * t5;
        t4[1] = t4[1] * t5;
        if (t2.get$x(t2) * t2.get$x(t2) + t2.get$y(t2) * t2.get$y(t2) > 4) {
          t5 = t4.length;
          if (0 >= t5)
            throw $.ioore(0);
          t6 = t4[0];
          if (1 >= t5)
            throw $.ioore(1);
          t5 = t4[1];
          t5 = t6 * t6 + t5 * t5;
          ratio = 2 / Math.sqrt(t5);
          t5 = b.get$linearVelocity()._f;
          t6 = t5.length;
          if (0 >= t6)
            throw $.ioore(0);
          t5[0] = t5[0] * ratio;
          if (1 >= t6)
            throw $.ioore(1);
          t5[1] = t5[1] * ratio;
        }
        t5 = step.dt;
        t6 = b.get$angularVelocity();
        if (typeof t6 !== "number")
          throw $.iae(t6);
        rotation = t5 * t6;
        if (rotation * rotation > 2.4674011002723395) {
          ratio = 1.5707963267948966 / Math.abs(rotation);
          t5 = b.get$angularVelocity();
          if (typeof t5 !== "number")
            return this.solve$3$bailout(7, step, allowSleep, b, i, t1, t2, t3, 0, 0, 0, 0, t5, t4, ratio);
          b.set$angularVelocity(t5 * ratio);
        }
        t5 = b.get$sweep();
        t6 = t5.centerZero._f;
        t5 = t5.center._f;
        t7 = t5.length;
        if (0 >= t7)
          throw $.ioore(0);
        t8 = t5[0];
        t9 = t6.length;
        if (0 >= t9)
          throw $.ioore(0);
        t6[0] = t8;
        if (1 >= t7)
          throw $.ioore(1);
        t5 = t5[1];
        if (1 >= t9)
          throw $.ioore(1);
        t6[1] = t5;
        t5 = b.get$sweep();
        t5.angleZero = t5.angle;
        t5 = b.get$linearVelocity()._f;
        t6 = t5.length;
        if (0 >= t6)
          throw $.ioore(0);
        t9 = t5[0];
        t7 = t1.length;
        if (0 >= t7)
          throw $.ioore(0);
        t1[0] = t9;
        if (1 >= t6)
          throw $.ioore(1);
        t5 = t5[1];
        if (1 >= t7)
          throw $.ioore(1);
        t1[1] = t5;
        t5 = step.dt;
        t1[0] = t1[0] * t5;
        t1[1] = t1[1] * t5;
        t7 = b.get$sweep().center._f;
        t6 = t7.length;
        if (0 >= t6)
          throw $.ioore(0);
        t7[0] = t7[0] + t1[0];
        if (1 >= t6)
          throw $.ioore(1);
        t7[1] = t7[1] + t1[1];
        t7 = b.get$sweep();
        t6 = t7.angle;
        if (typeof t6 !== "number")
          return this.solve$3$bailout(8, step, allowSleep, b, i, t1, t2, t3, 0, 0, 0, 0, t5, t4, 0, t7, t6);
        t9 = b.get$angularVelocity();
        if (typeof t9 !== "number")
          throw $.iae(t9);
        t7.angle = t6 + t5 * t9;
        b.synchronizeTransform$0();
      }
      ++i;
    }
    for (i = 0; i < step.positionIterations; ++i) {
      contactsOkay = t3.solvePositionConstraints$1(0.2);
      jointsOkay = true;
      j = 0;
      while (true) {
        t1 = this.jointCount;
        if (t1 == null)
          throw $.iae(t1);
        if (!(j < t1))
          break;
        t1 = this.joints;
        if (j >= t1.length)
          throw $.ioore(j);
        jointOkay = t1[j].solvePositionConstraints$1(0.2);
        jointsOkay = jointsOkay && jointOkay;
        ++j;
      }
      if (contactsOkay && jointsOkay)
        break;
    }
    this.report$1(t3.constraints);
    if (allowSleep) {
      minSleepTime = 99999999999999;
      i = 0;
      while (true) {
        t1 = this.bodyCount;
        if (t1 == null)
          throw $.iae(t1);
        if (!(i < t1))
          break;
        c$0: {
          t1 = this.bodies;
          if (i >= t1.length)
            throw $.ioore(i);
          b = t1[i];
          t1 = $.get$type$x(b);
          if (typeof t1 !== "number")
            return this.solve$3$bailout(9, step, 0, b, i, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if (t1 === 0)
            break c$0;
          t1 = b.get$flags();
          if (t1 == null)
            return this.solve$3$bailout(10, step, 0, b, i, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if ((t1 & 4) === 0) {
            b.set$sleepTime(0);
            minSleepTime = 0;
          }
          t1 = b.get$flags();
          if (t1 == null)
            return this.solve$3$bailout(12, step, 0, b, i, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if ((t1 & 4) !== 0) {
            t1 = b.get$angularVelocity();
            if (typeof t1 !== "number")
              return this.solve$3$bailout(13, step, 0, b, i, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
            t2 = b.get$angularVelocity();
            if (typeof t2 !== "number")
              return this.solve$3$bailout(14, step, 0, b, i, t1, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
            if (!(t1 * t2 > 0.0012184696791468343)) {
              t1 = b.get$linearVelocity();
              t2 = b.get$linearVelocity();
              t2 = t1.get$x(t1) * t2.get$x(t2) + t1.get$y(t1) * t2.get$y(t2) > 0.0001;
              t1 = t2;
            } else
              t1 = true;
          } else
            t1 = true;
          if (t1) {
            b.set$sleepTime(0);
            minSleepTime = 0;
          } else {
            b.set$sleepTime(b.get$sleepTime() + step.dt);
            minSleepTime = $.min(minSleepTime, b.get$sleepTime());
          }
        }
        ++i;
      }
      if (minSleepTime >= 0.5) {
        i = 0;
        while (true) {
          t1 = this.bodyCount;
          if (t1 == null)
            throw $.iae(t1);
          if (!(i < t1))
            break;
          t1 = this.bodies;
          if (i >= t1.length)
            throw $.ioore(i);
          t1[i].set$awake(false);
          ++i;
        }
      }
    }
  },
  solve$3$bailout: function(state0, step, allowSleep, b, i, t1, t2, t3, b1, i2, bodyB, i1, t5, t4, ratio, t7, t6, minSleepTime) {
    switch (state0) {
      case 0:
        t1 = gravity._f;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = this.bodyCount;
                if (t2 == null)
                  throw $.iae(t2);
                if (!(i < t2))
                  break L0;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      t2 = this.bodies;
                      if (i >= t2.length)
                        throw $.ioore(i);
                      b = t2[i];
                      t2 = $.get$type$x(b);
                    case 1:
                      state0 = 0;
                      if (!$.$eq(t2, 2))
                        break c$0;
                      t2 = b.get$_force()._f;
                      t3 = t2.length;
                      if (0 >= t3)
                        throw $.ioore(0);
                      t4 = t2[0];
                      t5 = b.get$invMass();
                      t6 = t1.length;
                      if (0 >= t6)
                        throw $.ioore(0);
                      t7 = t1[0];
                      t8 = step.dt;
                      if (1 >= t3)
                        throw $.ioore(1);
                      t2 = t2[1];
                      if (1 >= t6)
                        throw $.ioore(1);
                      t6 = t1[1];
                      t3 = new $.Vector(new Float64Array(2))._f;
                      t9 = t3.length;
                      if (0 >= t9)
                        throw $.ioore(0);
                      t3[0] = (t4 * t5 + t7) * t8;
                      if (1 >= t9)
                        throw $.ioore(1);
                      t3[1] = (t2 * t5 + t6) * t8;
                      t8 = b.get$linearVelocity()._f;
                      t6 = t8.length;
                      if (0 >= t6)
                        throw $.ioore(0);
                      t5 = t8[0];
                      t2 = t3.length;
                      if (0 >= t2)
                        throw $.ioore(0);
                      t8[0] = t5 + t3[0];
                      if (1 >= t6)
                        throw $.ioore(1);
                      t6 = t8[1];
                      if (1 >= t2)
                        throw $.ioore(1);
                      t8[1] = t6 + t3[1];
                      t3 = b.get$angularVelocity();
                    case 2:
                      state0 = 0;
                      b.set$angularVelocity($.$add$ns(t3, step.dt * b.get$invInertia() * b.get$_torque()));
                      a = 1 - step.dt * b.get$linearDamping();
                      t2 = a < 1;
                      if (0 > (t2 ? a : 1))
                        a1 = 0;
                      else
                        a1 = t2 ? a : 1;
                      t2 = b.get$linearVelocity()._f;
                      t3 = t2.length;
                      if (0 >= t3)
                        throw $.ioore(0);
                      t2[0] = t2[0] * a1;
                      if (1 >= t3)
                        throw $.ioore(1);
                      t2[1] = t2[1] * a1;
                      a2 = 1 - step.dt * b.get$angularDamping();
                      b1 = a2 < 1 ? a2 : 1;
                      t2 = b.get$angularVelocity();
                    case 3:
                      state0 = 0;
                      b.set$angularVelocity($.$mul$n(t2, 0 > b1 ? 0 : b1));
                  }
                }
                ++i;
            }
        i1 = -1;
        i2 = 0;
      case 4:
      case 5:
        L1:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.contactCount;
                if (t1 == null)
                  throw $.iae(t1);
                t2 = this.contacts;
                if (!(i2 < t1))
                  break L1;
                if (i2 >= t2.length)
                  throw $.ioore(i2);
                t1 = t2[i2];
                fixtureA = t1.get$fixtureA();
                fixtureB = t1.get$fixtureB();
                bodyA = $.get$body$x(fixtureA);
                bodyB = $.get$body$x(fixtureB);
                t1 = bodyA.get$type(bodyA);
              case 4:
                state0 = 0;
              case 5:
                if (state0 === 5 || state0 === 0 && !$.$eq(t1, 0))
                  switch (state0) {
                    case 0:
                      t1 = bodyB.get$type(bodyB);
                    case 5:
                      state0 = 0;
                      nonStatic = !$.$eq(t1, 0);
                  }
                else
                  nonStatic = false;
                if (nonStatic) {
                  ++i1;
                  t1 = this.contacts;
                  t2 = t1.length;
                  if (i1 >= t2)
                    throw $.ioore(i1);
                  temp = t1[i1];
                  if (i2 >= t2)
                    throw $.ioore(i2);
                  t1[i1] = t1[i2];
                  t1[i2] = temp;
                }
                ++i2;
            }
        t3 = this._contactSolver;
        t3.init$3(t2, t1, step.dtRatio);
        t3.warmStart$0();
        t1 = this.jointCount;
        if (t1 == null)
          throw $.iae(t1);
        t2 = this.joints;
        i = 0;
        for (; i < t1; ++i) {
          if (i >= t2.length)
            throw $.ioore(i);
          t2[i].initVelocityConstraints$1(step);
        }
        for (i = 0; i < step.velocityIterations; ++i) {
          t1 = this.jointCount;
          if (t1 == null)
            throw $.iae(t1);
          t2 = this.joints;
          j = 0;
          for (; j < t1; ++j) {
            if (j >= t2.length)
              throw $.ioore(j);
            t2[j].solveVelocityConstraints$1(step);
          }
          t3.solveVelocityConstraints$0();
        }
        t3.storeImpulses$0();
        t1 = new $.Vector(new Float64Array(2))._f;
        t2 = t1.length;
        if (0 >= t2)
          throw $.ioore(0);
        t1[0] = 0;
        if (1 >= t2)
          throw $.ioore(1);
        t1[1] = 0;
        t2 = this._translation;
        t4 = t2._f;
        i = 0;
      case 6:
      case 7:
      case 8:
        L2:
          while (true)
            switch (state0) {
              case 0:
                t5 = this.bodyCount;
                if (t5 == null)
                  throw $.iae(t5);
                if (!(i < t5))
                  break L2;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      t5 = this.bodies;
                      if (i >= t5.length)
                        throw $.ioore(i);
                      b = t5[i];
                      t5 = $.get$type$x(b);
                    case 6:
                      state0 = 0;
                      if ($.$eq(t5, 0))
                        break c$0;
                      t5 = b.get$linearVelocity()._f;
                      t6 = t5.length;
                      if (0 >= t6)
                        throw $.ioore(0);
                      t7 = t5[0];
                      t8 = t4.length;
                      if (0 >= t8)
                        throw $.ioore(0);
                      t4[0] = t7;
                      if (1 >= t6)
                        throw $.ioore(1);
                      t5 = t5[1];
                      if (1 >= t8)
                        throw $.ioore(1);
                      t4[1] = t5;
                      t5 = step.dt;
                      t4[0] = t4[0] * t5;
                      t4[1] = t4[1] * t5;
                      if (t2.get$x(t2) * t2.get$x(t2) + t2.get$y(t2) * t2.get$y(t2) > 4) {
                        t5 = t4.length;
                        if (0 >= t5)
                          throw $.ioore(0);
                        t6 = t4[0];
                        if (1 >= t5)
                          throw $.ioore(1);
                        t5 = t4[1];
                        t5 = t6 * t6 + t5 * t5;
                        ratio = 2 / Math.sqrt(t5);
                        t5 = b.get$linearVelocity()._f;
                        t6 = t5.length;
                        if (0 >= t6)
                          throw $.ioore(0);
                        t5[0] = t5[0] * ratio;
                        if (1 >= t6)
                          throw $.ioore(1);
                        t5[1] = t5[1] * ratio;
                      }
                      t5 = step.dt;
                      t6 = b.get$angularVelocity();
                      if (typeof t6 !== "number")
                        throw $.iae(t6);
                      rotation = t5 * t6;
                    case 7:
                      if (state0 === 7 || state0 === 0 && rotation * rotation > 2.4674011002723395)
                        switch (state0) {
                          case 0:
                            ratio = 1.5707963267948966 / Math.abs(rotation);
                            t5 = b.get$angularVelocity();
                          case 7:
                            state0 = 0;
                            b.set$angularVelocity($.$mul$n(t5, ratio));
                        }
                      t5 = b.get$sweep();
                      t6 = t5.centerZero._f;
                      t5 = t5.center._f;
                      t7 = t5.length;
                      if (0 >= t7)
                        throw $.ioore(0);
                      t8 = t5[0];
                      t9 = t6.length;
                      if (0 >= t9)
                        throw $.ioore(0);
                      t6[0] = t8;
                      if (1 >= t7)
                        throw $.ioore(1);
                      t5 = t5[1];
                      if (1 >= t9)
                        throw $.ioore(1);
                      t6[1] = t5;
                      t5 = b.get$sweep();
                      t5.angleZero = t5.angle;
                      t5 = b.get$linearVelocity()._f;
                      t6 = t5.length;
                      if (0 >= t6)
                        throw $.ioore(0);
                      t9 = t5[0];
                      t7 = t1.length;
                      if (0 >= t7)
                        throw $.ioore(0);
                      t1[0] = t9;
                      if (1 >= t6)
                        throw $.ioore(1);
                      t5 = t5[1];
                      if (1 >= t7)
                        throw $.ioore(1);
                      t1[1] = t5;
                      t5 = step.dt;
                      t1[0] = t1[0] * t5;
                      t1[1] = t1[1] * t5;
                      t7 = b.get$sweep().center._f;
                      t6 = t7.length;
                      if (0 >= t6)
                        throw $.ioore(0);
                      t7[0] = t7[0] + t1[0];
                      if (1 >= t6)
                        throw $.ioore(1);
                      t7[1] = t7[1] + t1[1];
                      t7 = b.get$sweep();
                      t6 = t7.angle;
                    case 8:
                      state0 = 0;
                      t9 = b.get$angularVelocity();
                      if (typeof t9 !== "number")
                        throw $.iae(t9);
                      t7.angle = $.$add$ns(t6, t5 * t9);
                      b.synchronizeTransform$0();
                  }
                }
                ++i;
            }
        for (i = 0; i < step.positionIterations; ++i) {
          contactsOkay = t3.solvePositionConstraints$1(0.2);
          jointsOkay = true;
          j = 0;
          while (true) {
            t1 = this.jointCount;
            if (t1 == null)
              throw $.iae(t1);
            if (!(j < t1))
              break;
            t1 = this.joints;
            if (j >= t1.length)
              throw $.ioore(j);
            jointOkay = t1[j].solvePositionConstraints$1(0.2);
            jointsOkay = jointsOkay && jointOkay;
            ++j;
          }
          if (contactsOkay && jointsOkay)
            break;
        }
        this.report$1(t3.constraints);
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
        var t8, t9, a, a1, a2, fixtureA, fixtureB, bodyA, nonStatic, temp, j, rotation, contactsOkay, jointsOkay, jointOkay;
        if (state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 0 && allowSleep)
          switch (state0) {
            case 0:
              minSleepTime = 99999999999999;
              i = 0;
            default:
              L3:
                while (true)
                  switch (state0) {
                    case 0:
                      t1 = this.bodyCount;
                      if (t1 == null)
                        throw $.iae(t1);
                      if (!(i < t1))
                        break L3;
                    default:
                      c$0: {
                        switch (state0) {
                          case 0:
                            t1 = this.bodies;
                            if (i >= t1.length)
                              throw $.ioore(i);
                            b = t1[i];
                            t1 = $.get$type$x(b);
                          case 9:
                            state0 = 0;
                            if ($.$eq(t1, 0))
                              break c$0;
                            t1 = b.get$flags();
                          case 10:
                            state0 = 0;
                            if (t1 == null)
                              throw t1.$and();
                            if ((t1 & 4) === 0) {
                              b.set$sleepTime(0);
                              minSleepTime = 0;
                            }
                          case 11:
                            state0 = 0;
                            t1 = b.get$flags();
                          case 12:
                            state0 = 0;
                            if (t1 == null)
                              throw t1.$and();
                          default:
                            if (state0 === 14 || state0 === 13 || state0 === 0 && (t1 & 4) !== 0)
                              switch (state0) {
                                case 0:
                                  t1 = b.get$angularVelocity();
                                case 13:
                                  state0 = 0;
                                  t2 = b.get$angularVelocity();
                                case 14:
                                  state0 = 0;
                                  if (!$.$gt$n($.$mul$n(t1, t2), 0.0012184696791468343)) {
                                    t1 = b.get$linearVelocity();
                                    t2 = b.get$linearVelocity();
                                    t2 = t1.get$x(t1) * t2.get$x(t2) + t1.get$y(t1) * t2.get$y(t2) > 0.0001;
                                    t1 = t2;
                                  } else
                                    t1 = true;
                              }
                            else
                              t1 = true;
                            if (t1) {
                              b.set$sleepTime(0);
                              minSleepTime = 0;
                            } else {
                              b.set$sleepTime(b.get$sleepTime() + step.dt);
                              minSleepTime = $.min(minSleepTime, b.get$sleepTime());
                            }
                        }
                      }
                      ++i;
                  }
              if (minSleepTime >= 0.5) {
                i = 0;
                while (true) {
                  t1 = this.bodyCount;
                  if (t1 == null)
                    throw $.iae(t1);
                  if (!(i < t1))
                    break;
                  t1 = this.bodies;
                  if (i >= t1.length)
                    throw $.ioore(i);
                  t1[i].set$awake(false);
                  ++i;
                }
              }
          }
    }
  },
  report$1: function(constraints) {
    var t1, t2, t3, t4, t5, i, t6, c, cc, j, t7;
    if (typeof constraints !== "string" && (typeof constraints !== "object" || constraints === null || constraints.constructor !== Array && !$.isJsIndexable(constraints, constraints[$.dispatchPropertyName])))
      return this.report$1$bailout(1, constraints);
    return;
    t1 = this.impulse;
    t2 = t1.normalImpulses;
    t3 = t2.length;
    t4 = t1.tangentImpulses;
    t5 = t4.length;
    i = 0;
    while (true) {
      t6 = this.contactCount;
      if (t6 == null)
        throw $.iae(t6);
      if (!(i < t6))
        break;
      t6 = this.contacts;
      if (i >= t6.length)
        throw $.ioore(i);
      c = t6[i];
      if (i >= constraints.length)
        throw $.ioore(i);
      cc = constraints[i];
      t6 = $.getInterceptor$x(cc);
      j = 0;
      while (true) {
        t7 = cc.get$pointCount();
        if (typeof t7 !== "number")
          throw $.iae(t7);
        if (!(j < t7))
          break;
        t7 = $.$index$asx(t6.get$points(cc), j).get$normalImpulse();
        if (j >= t3)
          throw $.ioore(j);
        t2[j] = t7;
        t7 = $.$index$asx(t6.get$points(cc), j).get$tangentImpulse();
        if (j >= t5)
          throw $.ioore(j);
        t4[j] = t7;
        ++j;
      }
      this.listener.postSolve$2(c, t1);
      ++i;
    }
  },
  report$1$bailout: function(state0, constraints) {
    var t1, t2, t3, t4, t5, t6, i, t7, c, cc, j, t8;
    return;
    t1 = this.impulse;
    t2 = t1.normalImpulses;
    t3 = t2.length;
    t4 = t1.tangentImpulses;
    t5 = t4.length;
    t6 = $.getInterceptor$asx(constraints);
    i = 0;
    while (true) {
      t7 = this.contactCount;
      if (t7 == null)
        throw $.iae(t7);
      if (!(i < t7))
        break;
      t7 = this.contacts;
      if (i >= t7.length)
        throw $.ioore(i);
      c = t7[i];
      cc = t6.$index(constraints, i);
      t7 = $.getInterceptor$x(cc);
      j = 0;
      while (true) {
        t8 = cc.get$pointCount();
        if (typeof t8 !== "number")
          throw $.iae(t8);
        if (!(j < t8))
          break;
        t8 = $.$index$asx(t7.get$points(cc), j).get$normalImpulse();
        if (j >= t3)
          throw $.ioore(j);
        t2[j] = t8;
        t8 = $.$index$asx(t7.get$points(cc), j).get$tangentImpulse();
        if (j >= t5)
          throw $.ioore(j);
        t4[j] = t8;
        ++j;
      }
      this.listener.postSolve$2(c, t1);
      ++i;
    }
  }
},

Position: {"": "Object;x*,a@"},

Velocity: {"": "Object;v<,a@"},

Joint: {"": "Object;type*,_next<,bodyA@,bodyB@,islandFlag?,userData@"},

TimeStep: {"": "Object;dt,inv_dt,dtRatio,velocityIterations,positionIterations,warmStarting"},

World: {"": "Object;_flags,_contactManager,_bodyList,_jointList,_bodyCount,_jointCount,_gravity,_allowSleep,_debugDraw,_fixtureDestructionListener,_jointDestructionListener,_pool,_inverseTimestep,_warmStarting,_continuousPhysics,_contactStacks,center<,axis,timestep,cA,cB,wqwrapper,toiInput,toiOutput,backup,toiSolver,contacts,island,stack",
  _addType$3: function(creatorStack, type1, type2) {
    var register, t1, t2, t3, register2;
    register = new $.ContactRegister(null, false);
    register.creator = creatorStack;
    register.primary = true;
    t1 = this._contactStacks;
    t2 = t1.length;
    if (type1 < 0 || type1 >= t2)
      throw $.ioore(type1);
    t3 = t1[type1];
    if (type2 < 0 || type2 >= t3.length)
      throw $.ioore(type2);
    t3[type2] = register;
    if (type1 !== type2) {
      register2 = new $.ContactRegister(null, false);
      register2.creator = creatorStack;
      register2.primary = false;
      if (type2 >= t2)
        throw $.ioore(type2);
      t1 = t1[type2];
      if (type1 >= t1.length)
        throw $.ioore(type1);
      t1[type1] = register2;
    }
  },
  _initializeRegisters$0: function() {
    var t1 = this._pool;
    this._addType$3(t1.getCircleContactStack$0(), 0, 0);
    this._addType$3(t1.getPolyCircleContactStack$0(), 1, 0);
    this._addType$3(t1.getPolyContactStack$0(), 1, 1);
  },
  popContact$2: function(fixtureA, fixtureB) {
    var type1, type2, t1, reg, creator, c;
    type1 = $.get$type$x(fixtureA);
    type2 = $.get$type$x(fixtureB);
    t1 = this._contactStacks;
    if (type1 >>> 0 !== type1 || type1 >= t1.length)
      throw $.ioore(type1);
    t1 = t1[type1];
    if (type2 >>> 0 !== type2 || type2 >= t1.length)
      throw $.ioore(type2);
    reg = t1[type2];
    creator = reg.get$creator();
    if (creator != null) {
      creator.get$isEmpty;
      if (creator._head === creator._tail)
        creator = this._getFreshContactStack$2(type1, type2);
      if (reg.get$primary()) {
        c = creator.removeFirst$0();
        c.init$2(fixtureA, fixtureB);
        return c;
      } else {
        c = creator.removeFirst$0();
        c.init$2(fixtureB, fixtureA);
        return c;
      }
    } else
      return;
  },
  _getFreshContactStack$2: function(type1, type2) {
    var t1, t2;
    t1 = $.getInterceptor(type1);
    if (t1.$eq(type1, 0) && $.$eq(type2, 0))
      return this._pool.getCircleContactStack$0();
    else {
      t1 = t1.$eq(type1, 1) && $.$eq(type2, 1);
      t2 = this._pool;
      if (t1)
        return t2.getPolyContactStack$0();
      else
        return t2.getPolyCircleContactStack$0();
    }
  },
  pushContact$1: function(contact) {
    var type1, type2, t1;
    if ($.$gt$n(contact.get$manifold().get$pointCount(), 0)) {
      $.get$body$x(contact.get$fixtureA()).set$awake(true);
      $.get$body$x(contact.get$fixtureB()).set$awake(true);
    }
    type1 = $.get$type$x(contact.get$fixtureA());
    type2 = $.get$type$x(contact.get$fixtureB());
    t1 = this._contactStacks;
    if (type1 >>> 0 !== type1 || type1 >= t1.length)
      throw $.ioore(type1);
    t1 = t1[type1];
    if (type2 >>> 0 !== type2 || type2 >= t1.length)
      throw $.ioore(type2);
    t1[type2].get$creator().addFirst$1(contact);
  },
  createBody$1: function(def) {
    var b, t1;
    if ((this._flags & 2) === 2)
      return;
    b = $.Body$(def, this);
    b.prev = null;
    b.next = this._bodyList;
    t1 = this._bodyList;
    if (t1 != null)
      t1.prev = b;
    this._bodyList = b;
    this._bodyCount = this._bodyCount + 1;
    return b;
  },
  step$3: function(_, dt, velocityIterations, positionIterations) {
    var t1;
    if ((this._flags & 1) === 1) {
      t1 = this._contactManager;
      t1.findNewContacts$0;
      t1.broadPhase.updatePairs$1(t1.get$_addPair());
      this._flags = (this._flags & 4294967294) >>> 0;
    }
    this._flags = (this._flags | 2) >>> 0;
    t1 = this.timestep;
    t1.dt = dt;
    t1.velocityIterations = velocityIterations;
    t1.positionIterations = positionIterations;
    if (dt > 0)
      t1.inv_dt = 1 / dt;
    else
      t1.inv_dt = 0;
    t1.dtRatio = this._inverseTimestep * dt;
    t1.warmStarting = this._warmStarting;
    this._contactManager.collide$0();
    if (t1.dt > 0) {
      this.solve$1(t1);
      if (this._continuousPhysics)
        this.solveTimeOfImpact$0();
      this._inverseTimestep = t1.inv_dt;
    }
    if ((this._flags & 4) === 4)
      this.clearForces$0();
    this._flags = (this._flags & 4294967293) >>> 0;
  },
  clearForces$0: function() {
    var body, t1;
    for (body = this._bodyList; body != null; body = body.get$next()) {
      t1 = body.get$_force()._f;
      if (1 >= t1.length)
        throw $.ioore(1);
      t1[1] = 0;
      t1[0] = 0;
      body.set$_torque(0);
    }
  },
  get$contactList: function() {
    return this._contactManager.contactList;
  },
  get$jointList: function() {
    return this._jointList;
  },
  solve$1: function(timeStep) {
    var t1, t2, t3, b, c, j, stackSize, seed, t4, stackCount, t5, ce, contact, sensorA, sensorB, other, stackCount0, je, t6, i;
    t1 = this.island;
    t2 = this._bodyCount;
    t3 = this._contactManager;
    t1.init$4(t2, t3.contactCount, this._jointCount, t3.contactListener);
    for (b = this._bodyList; b != null; b = b.get$next()) {
      t2 = b.get$flags();
      if (t2 == null)
        throw t2.$and();
      b.set$flags((t2 & 4294967294) >>> 0);
    }
    for (c = this._contactManager.contactList; c != null; c = c.get$next()) {
      t2 = c.get$flags();
      if (t2 == null)
        throw t2.$and();
      c.set$flags((t2 & 4294967294) >>> 0);
    }
    for (j = this._jointList; j != null; j = j.get$_next())
      j.set$islandFlag(false);
    stackSize = this._bodyCount;
    if (this.stack.length < stackSize)
      this.stack = $.List_List(stackSize);
    for (seed = this._bodyList, t2 = this._gravity, t3 = this._allowSleep; seed != null; seed = seed.get$next()) {
      t4 = seed.get$flags();
      if (t4 == null)
        throw t4.$and();
      if ((t4 & 1) === 1)
        continue;
      if (!seed.get$awake() || !seed.get$active())
        continue;
      if ($.$eq($.get$type$x(seed), 0))
        continue;
      t1.bodyCount = 0;
      t1.contactCount = 0;
      t1.jointCount = 0;
      t4 = this.stack;
      if (0 >= t4.length)
        throw $.ioore(0);
      t4[0] = seed;
      t4 = seed.get$flags();
      if (t4 == null)
        throw t4.$or();
      seed.set$flags((t4 | 1) >>> 0);
      for (stackCount = 1; stackCount > 0;) {
        t4 = this.stack;
        --stackCount;
        if (stackCount >= t4.length)
          throw $.ioore(stackCount);
        b = t4[stackCount];
        b.set$islandIndex(t1.bodyCount);
        t4 = t1.bodies;
        t5 = t1.bodyCount;
        if (t5 == null)
          throw t5.$add();
        t1.bodyCount = t5 + 1;
        if (t5 >>> 0 !== t5 || t5 >= t4.length)
          throw $.ioore(t5);
        t4[t5] = b;
        b.set$awake(true);
        if ($.$eq($.get$type$x(b), 0))
          continue;
        for (ce = b.get$contactList(); ce != null; ce = ce.get$next()) {
          contact = ce.get$contact();
          t4 = contact.get$flags();
          if (t4 == null)
            throw t4.$and();
          if ((t4 & 1) === 1)
            continue;
          if (!contact.get$enabled() || !contact.get$touching())
            continue;
          sensorA = contact.get$fixtureA().get$isSensor();
          sensorB = contact.get$fixtureB().get$isSensor();
          if (sensorA === true || sensorB === true)
            continue;
          t4 = t1.contacts;
          t5 = t1.contactCount;
          if (t5 == null)
            throw t5.$add();
          t1.contactCount = t5 + 1;
          if (t5 >>> 0 !== t5 || t5 >= t4.length)
            throw $.ioore(t5);
          t4[t5] = contact;
          t5 = contact.get$flags();
          if (t5 == null)
            throw t5.$or();
          contact.set$flags((t5 | 1) >>> 0);
          other = ce.get$other();
          if ((other.get$flags() & 1) === 1)
            continue;
          t4 = this.stack;
          stackCount0 = stackCount + 1;
          if (stackCount >= t4.length)
            throw $.ioore(stackCount);
          t4[stackCount] = other;
          other.set$flags((other.get$flags() | 1) >>> 0);
          stackCount = stackCount0;
        }
        for (je = b.get$jointList(); je != null; je = je.get$next()) {
          t4 = je.get$joint();
          t4.get$islandFlag();
          other = je.get$other();
          if (!other.get$active())
            continue;
          t5 = t1.joints;
          t6 = t1.jointCount;
          if (t6 == null)
            throw t6.$add();
          t1.jointCount = t6 + 1;
          if (t6 >>> 0 !== t6 || t6 >= t5.length)
            throw $.ioore(t6);
          t5[t6] = t4;
          je.get$joint().set$islandFlag(true);
          if ((other.get$flags() & 1) === 1)
            continue;
          t4 = this.stack;
          stackCount0 = stackCount + 1;
          if (stackCount >= t4.length)
            throw $.ioore(stackCount);
          t4[stackCount] = other;
          other.set$flags((other.get$flags() | 1) >>> 0);
          stackCount = stackCount0;
        }
      }
      t1.solve$3(timeStep, t2, t3);
      i = 0;
      while (true) {
        t4 = t1.bodyCount;
        if (t4 == null)
          throw $.iae(t4);
        if (!(i < t4))
          break;
        t4 = t1.bodies;
        if (i >= t4.length)
          throw $.ioore(i);
        b = t4[i];
        if ($.$eq($.get$type$x(b), 0)) {
          t4 = b.get$flags();
          if (t4 == null)
            throw t4.$and();
          b.set$flags((t4 & 4294967294) >>> 0);
        }
        ++i;
      }
    }
    for (b = this._bodyList; b != null; b = b.get$next()) {
      t1 = b.get$flags();
      if (t1 == null)
        throw t1.$and();
      if ((t1 & 1) === 0)
        continue;
      if ($.$eq($.get$type$x(b), 0))
        continue;
      b.synchronizeFixtures$0();
    }
    t1 = this._contactManager;
    t1.findNewContacts$0;
    t1.broadPhase.updatePairs$1(t1.get$_addPair());
  },
  solveTimeOfImpact$0: function() {
    var c, t1, body, t2;
    for (c = this._contactManager.contactList; c != null; c = c.get$next()) {
      t1 = c.get$flags();
      if (t1 == null)
        throw t1.$or();
      c.set$flags((t1 | 4) >>> 0);
      c.set$toiCount(0);
    }
    for (body = this._bodyList; body != null; body = body.get$next()) {
      t1 = body.get$flags();
      if (t1 == null)
        throw t1.$and();
      if ((t1 & 1) !== 0) {
        t1 = $.getInterceptor$x(body);
        t1 = $.$eq(t1.get$type(body), 1) || $.$eq(t1.get$type(body), 0);
      } else
        t1 = true;
      t2 = body.get$flags();
      if (t1) {
        if (t2 == null)
          throw t2.$or();
        body.set$flags((t2 | 64) >>> 0);
      } else {
        if (t2 == null)
          throw t2.$and();
        body.set$flags((t2 & 4294967231) >>> 0);
      }
    }
    for (body = this._bodyList; body != null; body = body.get$next()) {
      t1 = body.get$flags();
      if (t1 == null)
        throw t1.$and();
      if ((t1 & 64) === 64 || body.get$bullet())
        continue;
      this.solveTimeOfImpactGivenBody$1(body);
      t1 = body.get$flags();
      if (t1 == null)
        throw t1.$or();
      body.set$flags((t1 | 64) >>> 0);
    }
    for (body = this._bodyList; body != null; body = body.get$next()) {
      t1 = body.get$flags();
      if (t1 == null)
        throw t1.$and();
      if ((t1 & 64) === 64 || !body.get$bullet())
        continue;
      this.solveTimeOfImpactGivenBody$1(body);
      t1 = body.get$flags();
      if (t1 == null)
        throw t1.$or();
      body.set$flags((t1 | 64) >>> 0);
    }
  },
  solveTimeOfImpactGivenBody$1: function(body) {
    var bullet, t1, t2, t3, t4, t5, t6, t7, toiContact, toi, toiOther, iter, ce, found, count, other, type, t8, contact, fixtureA, fixtureB, bodyA, t9, bodyB, i;
    bullet = body.get$bullet();
    t1 = this.toiOutput;
    t2 = this.toiInput;
    t3 = t2.proxyA;
    t4 = t2.proxyB;
    t5 = t2.sweepA;
    t6 = t2.sweepB;
    t7 = this._pool;
    toiContact = null;
    toi = 1;
    toiOther = null;
    iter = 0;
    do {
      for (ce = body.get$contactList(), found = false, count = 0; ce != null; ce = ce.get$next()) {
        if ($.$eq(ce.get$contact(), toiContact))
          continue;
        other = ce.get$other();
        type = other.get$type(other);
        if (bullet) {
          if ((other.get$flags() & 64) === 0)
            continue;
          if (!$.$eq(type, 0)) {
            t8 = ce.get$contact().get$flags();
            if (t8 == null)
              return this.solveTimeOfImpactGivenBody$1$bailout(1, t5, body, t6, t7, t8, bullet, other, t1, iter, toiContact, toi, toiOther, found, count, t2, ce, t3, t4);
            t8 = (t8 & 16) !== 0;
          } else
            t8 = false;
          if (t8)
            continue;
        } else if ($.$eq(type, 2))
          continue;
        contact = ce.get$contact();
        if (contact.get$enabled()) {
          t8 = contact.get$toiCount();
          if (t8 == null)
            throw t8.$gt();
          t8 = t8 > 10;
        } else
          t8 = true;
        if (t8)
          continue;
        fixtureA = contact.get$fixtureA();
        fixtureB = contact.get$fixtureB();
        if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
          continue;
        t8 = $.getInterceptor$x(fixtureA);
        bodyA = t8.get$body(fixtureA);
        t9 = $.getInterceptor$x(fixtureB);
        bodyB = t9.get$body(fixtureB);
        t3.setFromShape$1(t8.get$shape(fixtureA));
        t4.setFromShape$1(t9.get$shape(fixtureB));
        t5.setFrom$1(bodyA.get$sweep());
        t6.setFrom$1(bodyB.get$sweep());
        t2.tMax = toi;
        t7.timeOfImpact.timeOfImpact$2(t1, t2);
        if (t1.state === 3) {
          t8 = t1.t;
          if (typeof t8 !== "number")
            return this.solveTimeOfImpactGivenBody$1$bailout(2, t5, body, t6, t7, t8, bullet, other, t1, iter, toiContact, toi, toiOther, found, count, t2, ce, t3, t4, contact);
          t8 = t8 < toi;
        } else
          t8 = false;
        if (t8) {
          toi = t1.t;
          if (typeof toi !== "number")
            return this.solveTimeOfImpactGivenBody$1$bailout(3, t5, body, t6, t7, 0, bullet, other, t1, iter, 0, toi, 0, 0, count, t2, ce, t3, t4, contact);
          toiOther = other;
          toiContact = contact;
          found = true;
        }
        ++count;
      }
      ++iter;
    } while (found && count > 1 && iter < 50);
    if (toiContact == null) {
      body.advance$1(1);
      return;
    }
    t1 = this.backup;
    t1.setFrom$1(body.get$sweep());
    body.advance$1(toi);
    toiContact.update$1(this._contactManager.contactListener);
    if (!toiContact.get$enabled()) {
      body.get$sweep().setFrom$1(t1);
      this.solveTimeOfImpactGivenBody$1(body);
    }
    t1 = toiContact.get$toiCount();
    if (t1 == null)
      throw t1.$add();
    toiContact.set$toiCount(t1 + 1);
    if (this.contacts.length < 32)
      this.contacts = $.List_List(32);
    ce = body.get$contactList();
    count = 0;
    while (true) {
      if (!(ce != null && count < 32))
        break;
      c$0: {
        other = ce.get$other();
        type = other.get$type(other);
        if (typeof type !== "number")
          return this.solveTimeOfImpactGivenBody$1$bailout(4, 0, body, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, toiOther, 0, count, 0, ce, 0, 0, 0, type);
        if (type === 2)
          break c$0;
        contact = ce.get$contact();
        if (!contact.get$enabled())
          break c$0;
        fixtureA = contact.get$fixtureA();
        fixtureB = contact.get$fixtureB();
        if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
          break c$0;
        if (!$.$eq(contact, toiContact))
          contact.update$1(this._contactManager.contactListener);
        if (!contact.get$enabled() || !contact.get$touching())
          break c$0;
        t1 = this.contacts;
        if (count >= t1.length)
          throw $.ioore(count);
        t1[count] = contact;
        ++count;
      }
      ce = ce.get$next();
    }
    t1 = this.toiSolver;
    t1.initialize$3(t1, this.contacts, count, body);
    for (i = 0; i < 20; ++i)
      if (t1.solve$1(0.75))
        break;
    if (!$.$eq(toiOther.get$type(toiOther), 0)) {
      t1 = toiContact.get$flags();
      if (t1 == null)
        throw t1.$or();
      toiContact.set$flags((t1 | 16) >>> 0);
    }
  },
  solveTimeOfImpactGivenBody$1$bailout: function(state0, t5, body, t6, t7, t8, bullet, other, t1, iter, toiContact, toi, toiOther, found, count, t2, ce, t3, t4, contact, type) {
    switch (state0) {
      case 0:
        bullet = body.get$bullet();
        t1 = this.toiOutput;
        t2 = this.toiInput;
        t3 = t2.proxyA;
        t4 = t2.proxyB;
        t5 = t2.sweepA;
        t6 = t2.sweepB;
        t7 = this._pool;
        toiContact = null;
        toi = 1;
        toiOther = null;
        iter = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                ce = body.get$contactList();
                found = false;
                count = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!(ce != null))
                          break L1;
                      default:
                        c$1: {
                          switch (state0) {
                            case 0:
                              if ($.$eq(ce.get$contact(), toiContact))
                                break c$1;
                              other = ce.get$other();
                              type = other.get$type(other);
                            case 1:
                              if (state0 === 1 || state0 === 0 && bullet)
                                switch (state0) {
                                  case 0:
                                    if ((other.get$flags() & 64) === 0)
                                      break c$1;
                                  case 1:
                                    if (state0 === 1 || state0 === 0 && !$.$eq(type, 0))
                                      switch (state0) {
                                        case 0:
                                          t8 = ce.get$contact().get$flags();
                                        case 1:
                                          state0 = 0;
                                          if (t8 == null)
                                            throw t8.$and();
                                          t8 = (t8 & 16) !== 0;
                                      }
                                    else
                                      t8 = false;
                                    if (t8)
                                      break c$1;
                                }
                              else if ($.$eq(type, 2))
                                break c$1;
                              contact = ce.get$contact();
                              if (contact.get$enabled()) {
                                t8 = contact.get$toiCount();
                                if (t8 == null)
                                  throw t8.$gt();
                                t8 = t8 > 10;
                              } else
                                t8 = true;
                              if (t8)
                                break c$1;
                              fixtureA = contact.get$fixtureA();
                              fixtureB = contact.get$fixtureB();
                              if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
                                break c$1;
                              t8 = $.getInterceptor$x(fixtureA);
                              bodyA = t8.get$body(fixtureA);
                              t9 = $.getInterceptor$x(fixtureB);
                              bodyB = t9.get$body(fixtureB);
                              t3.setFromShape$1(t8.get$shape(fixtureA));
                              t4.setFromShape$1(t9.get$shape(fixtureB));
                              t5.setFrom$1(bodyA.get$sweep());
                              t6.setFrom$1(bodyB.get$sweep());
                              t2.tMax = toi;
                              t7.timeOfImpact.timeOfImpact$2(t1, t2);
                            case 2:
                              if (state0 === 2 || state0 === 0 && t1.state === 3)
                                switch (state0) {
                                  case 0:
                                    t8 = t1.t;
                                  case 2:
                                    state0 = 0;
                                    t8 = $.$lt$n(t8, toi);
                                }
                              else
                                t8 = false;
                            case 3:
                              if (state0 === 3 || state0 === 0 && t8)
                                switch (state0) {
                                  case 0:
                                    toi = t1.t;
                                  case 3:
                                    state0 = 0;
                                    toiOther = other;
                                    toiContact = contact;
                                    found = true;
                                }
                              ++count;
                          }
                        }
                        ce = ce.get$next();
                    }
                ++iter;
                if (!(found && count > 1 && iter < 50))
                  break L0;
            }
        if (toiContact == null) {
          body.advance$1(1);
          return;
        }
        t1 = this.backup;
        t1.setFrom$1(body.get$sweep());
        body.advance$1(toi);
        toiContact.update$1(this._contactManager.contactListener);
        if (!toiContact.get$enabled()) {
          body.get$sweep().setFrom$1(t1);
          this.solveTimeOfImpactGivenBody$1(body);
        }
        t1 = toiContact.get$toiCount();
        if (t1 == null)
          throw t1.$add();
        toiContact.set$toiCount(t1 + 1);
        if (this.contacts.length < 32)
          this.contacts = $.List_List(32);
        ce = body.get$contactList();
        count = 0;
      case 4:
        var fixtureA, fixtureB, bodyA, t9, bodyB, i;
        L2:
          while (true)
            switch (state0) {
              case 0:
                if (!(ce != null && count < 32))
                  break L2;
              case 4:
                c$0: {
                  switch (state0) {
                    case 0:
                      other = ce.get$other();
                      type = other.get$type(other);
                    case 4:
                      state0 = 0;
                      if ($.$eq(type, 2))
                        break c$0;
                      contact = ce.get$contact();
                      if (!contact.get$enabled())
                        break c$0;
                      fixtureA = contact.get$fixtureA();
                      fixtureB = contact.get$fixtureB();
                      if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
                        break c$0;
                      if (!$.$eq(contact, toiContact))
                        contact.update$1(this._contactManager.contactListener);
                      if (!contact.get$enabled() || !contact.get$touching())
                        break c$0;
                      t1 = this.contacts;
                      if (count >= t1.length)
                        throw $.ioore(count);
                      t1[count] = contact;
                      ++count;
                  }
                }
                ce = ce.get$next();
            }
        t1 = this.toiSolver;
        t1.initialize$3(t1, this.contacts, count, body);
        for (i = 0; i < 20; ++i)
          if (t1.solve$1(0.75))
            break;
        if (!$.$eq(toiOther.get$type(toiOther), 0)) {
          t1 = toiContact.get$flags();
          if (t1 == null)
            throw t1.$or();
          toiContact.set$flags((t1 | 16) >>> 0);
        }
    }
  },
  World$3: function(gravity, doSleep, argPool) {
    var t1, t2, i;
    this._contactManager = new $.ContactManager($.BroadPhase$(), null, 0, new $.ContactFilter(), null, this);
    for (t1 = this._contactStacks, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = $.List_List(2);
    this._initializeRegisters$0();
  }
},

WorldQueryWrapper: {"": "Object;broadPhase,callback",
  treeCallback$1: function(node) {
    return this.callback.reportFixture$1(node.get$userData());
  }
},

DefaultWorldPool: {"": "Object;collision,timeOfImpact,distance@",
  getCircleContactStack$0: function() {
    var queue, i;
    queue = $.ListQueue$(null);
    for (i = 0; i < 10; ++i)
      queue.addFirst$1(new $.CircleContact(null, null, null, new $.ContactEdge(null, null, null, null), new $.ContactEdge(null, null, null, null), null, null, $.Manifold$(), null, this, $.Manifold$()));
    return queue;
  },
  getPolyCircleContactStack$0: function() {
    var queue, i;
    queue = $.ListQueue$(null);
    for (i = 0; i < 10; ++i)
      queue.addFirst$1(new $.PolygonAndCircleContact(null, null, null, new $.ContactEdge(null, null, null, null), new $.ContactEdge(null, null, null, null), null, null, $.Manifold$(), null, this, $.Manifold$()));
    return queue;
  },
  getPolyContactStack$0: function() {
    var queue, i;
    queue = $.ListQueue$(null);
    for (i = 0; i < 10; ++i)
      queue.addFirst$1(new $.PolygonContact(null, null, null, new $.ContactEdge(null, null, null, null), new $.ContactEdge(null, null, null, null), null, null, $.Manifold$(), null, this, $.Manifold$()));
    return queue;
  }
},

AxisAlignedBox_testOverlap: function(a, b) {
  var t1, t2, t3, t4, t5, t6, t7;
  t1 = b.lowerBound;
  t1.get$x;
  t2 = t1._f;
  t3 = t2.length;
  if (0 >= t3)
    throw $.ioore(0);
  t4 = t2[0];
  t5 = a.get$upperBound();
  t5.get$x;
  t6 = t5._f;
  t7 = t6.length;
  if (0 >= t7)
    throw $.ioore(0);
  if (!(t4 > t6[0])) {
    t1.get$y;
    if (1 >= t3)
      throw $.ioore(1);
    t1 = t2[1];
    t5.get$y;
    if (1 >= t7)
      throw $.ioore(1);
    t6 = t1 > t6[1];
    t1 = t6;
  } else
    t1 = true;
  if (!t1) {
    t1 = a.get$lowerBound();
    t1.get$x;
    t2 = t1._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = b.upperBound;
    t5.get$x;
    t6 = t5._f;
    t7 = t6.length;
    if (0 >= t7)
      throw $.ioore(0);
    if (!(t4 > t6[0])) {
      t1.get$y;
      if (1 >= t3)
        throw $.ioore(1);
      t1 = t2[1];
      t5.get$y;
      if (1 >= t7)
        throw $.ioore(1);
      t6 = t1 > t6[1];
      t1 = t6;
    } else
      t1 = true;
  } else
    t1 = true;
  return !t1;
},

BroadPhase$: function() {
  var t1 = new $.BroadPhase($.DynamicTree$(), 0, null, null, 16, 0, null);
  t1.BroadPhase$0();
  return t1;
},

DynamicTree$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9;
  t1 = $.List_List(4);
  t2 = new $.Vector(new Float64Array(2));
  t3 = t2._f;
  t4 = t3.length;
  if (0 >= t4)
    throw $.ioore(0);
  t3[0] = 0;
  if (1 >= t4)
    throw $.ioore(1);
  t3[1] = 0;
  t3 = new $.AxisAlignedBox(null, null);
  if (t3.lowerBound == null) {
    t4 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
    t5 = t4._f;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t5[0] = 0;
    if (1 >= t6)
      throw $.ioore(1);
    t5[1] = 0;
    t3.lowerBound = t4;
  }
  if (t3.upperBound == null) {
    t4 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
    t5 = t4._f;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t5[0] = 0;
    if (1 >= t6)
      throw $.ioore(1);
    t5[1] = 0;
    t3.upperBound = t4;
  }
  t4 = $.ListQueue$(null);
  t5 = new $.Vector(new Float64Array(2));
  t6 = t5._f;
  t7 = t6.length;
  if (0 >= t7)
    throw $.ioore(0);
  t6[0] = 0;
  if (1 >= t7)
    throw $.ioore(1);
  t6[1] = 0;
  t6 = new $.Vector(new Float64Array(2));
  t7 = t6._f;
  t8 = t7.length;
  if (0 >= t8)
    throw $.ioore(0);
  t7[0] = 0;
  if (1 >= t8)
    throw $.ioore(1);
  t7[1] = 0;
  t7 = new $.Vector(new Float64Array(2));
  t8 = t7._f;
  t9 = t8.length;
  if (0 >= t9)
    throw $.ioore(0);
  t8[0] = 0;
  if (1 >= t9)
    throw $.ioore(1);
  t8[1] = 0;
  t7 = new $.DynamicTree(null, 0, null, 0, 0, t4, t1, 0, t2, t3, t5, t6, t7);
  t7.DynamicTree$0();
  return t7;
},

Collision$_construct: function(pool) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22;
  t1 = $.DistanceProxy$();
  t2 = $.DistanceProxy$();
  t3 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t4 = t3._f;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  t4[0] = 0;
  if (1 >= t5)
    throw $.ioore(1);
  t4[1] = 0;
  t4 = new $.Vector($.Float64List_Float64List(2));
  t4.Vector$zero$0();
  t5 = new $.Vector($.Float64List_Float64List(2));
  t5.Vector$zero$0();
  t6 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t7 = t6._f;
  t8 = t7.length;
  if (0 >= t8)
    throw $.ioore(0);
  t7[0] = 0;
  if (1 >= t8)
    throw $.ioore(1);
  t7[1] = 0;
  t7 = new $.Vector($.Float64List_Float64List(2));
  t7.Vector$zero$0();
  t8 = new $.Vector($.Float64List_Float64List(2));
  t8.Vector$zero$0();
  t9 = $.SimplexCache$();
  t10 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t11 = t10._f;
  t12 = t11.length;
  if (0 >= t12)
    throw $.ioore(0);
  t11[0] = 0;
  if (1 >= t12)
    throw $.ioore(1);
  t11[1] = 0;
  t11 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t12 = t11._f;
  t13 = t12.length;
  if (0 >= t13)
    throw $.ioore(0);
  t12[0] = 0;
  if (1 >= t13)
    throw $.ioore(1);
  t12[1] = 0;
  t12 = $.List_List(2);
  t13 = new $.Vector(new Float64Array(2));
  t14 = t13._f;
  t15 = t14.length;
  if (0 >= t15)
    throw $.ioore(0);
  t14[0] = 0;
  if (1 >= t15)
    throw $.ioore(1);
  t14[1] = 0;
  t14 = new $.Vector(new Float64Array(2));
  t15 = t14._f;
  t16 = t15.length;
  if (0 >= t16)
    throw $.ioore(0);
  t15[0] = 0;
  if (1 >= t16)
    throw $.ioore(1);
  t15[1] = 0;
  t15 = new $.Vector(new Float64Array(2));
  t16 = t15._f;
  t17 = t16.length;
  if (0 >= t17)
    throw $.ioore(0);
  t16[0] = 0;
  if (1 >= t17)
    throw $.ioore(1);
  t16[1] = 0;
  t16 = new $.Vector(new Float64Array(2));
  t17 = t16._f;
  t18 = t17.length;
  if (0 >= t18)
    throw $.ioore(0);
  t17[0] = 0;
  if (1 >= t18)
    throw $.ioore(1);
  t17[1] = 0;
  t17 = new $.Vector(new Float64Array(2));
  t18 = t17._f;
  t19 = t18.length;
  if (0 >= t19)
    throw $.ioore(0);
  t18[0] = 0;
  if (1 >= t19)
    throw $.ioore(1);
  t18[1] = 0;
  t18 = new $.Vector(new Float64Array(2));
  t19 = t18._f;
  t20 = t19.length;
  if (0 >= t20)
    throw $.ioore(0);
  t19[0] = 0;
  if (1 >= t20)
    throw $.ioore(1);
  t19[1] = 0;
  t19 = new $.Vector(new Float64Array(2));
  t20 = t19._f;
  t21 = t20.length;
  if (0 >= t21)
    throw $.ioore(0);
  t20[0] = 0;
  if (1 >= t21)
    throw $.ioore(1);
  t20[1] = 0;
  t20 = new $.Vector(new Float64Array(2));
  t21 = t20._f;
  t22 = t21.length;
  if (0 >= t22)
    throw $.ioore(0);
  t21[0] = 0;
  if (1 >= t22)
    throw $.ioore(1);
  t21[1] = 0;
  t20 = new $.Collision(pool, t9, new $.DistanceInput(t1, t2, new $.Transform(t3, new $.Matrix22(t4, t5)), new $.Transform(t6, new $.Matrix22(t7, t8)), false), new $.DistanceOutput(t10, t11, null, null), new $.EdgeResults(0, 0), new $.EdgeResults(0, 0), t12, t13, t14, t15, t16, t17, t18, t19, t20, $.List_List(2), $.List_List(2));
  t20.Collision$_construct$1(pool);
  return t20;
},

Collision_clipSegmentToLine: function(vOut, vIn, norm, offset) {
  var t1, t2, t3, t4, t5, distance0, distance1, numOut, numOut0, interp, vin;
  t1 = vIn.length;
  if (0 >= t1)
    throw $.ioore(0);
  t2 = vIn[0].get$v();
  t3 = norm.get$x(norm);
  t4 = t2.get$x(t2);
  t5 = norm.get$y(norm);
  t2 = t2.get$y(t2);
  if (typeof offset !== "number")
    throw $.iae(offset);
  distance0 = t3 * t4 + t5 * t2 - offset;
  if (1 >= t1)
    throw $.ioore(1);
  t1 = vIn[1].get$v();
  distance1 = norm.get$x(norm) * t1.get$x(t1) + norm.get$y(norm) * t1.get$y(t1) - offset;
  if (distance0 <= 0) {
    if (0 >= vOut.length)
      throw $.ioore(0);
    vOut[0].setFrom$1(vIn[0]);
    numOut = 1;
  } else
    numOut = 0;
  if (distance1 <= 0) {
    numOut0 = numOut + 1;
    if (numOut >= vOut.length)
      throw $.ioore(numOut);
    vOut[numOut].setFrom$1(vIn[1]);
    numOut = numOut0;
  }
  if (distance0 * distance1 < 0) {
    interp = distance0 / (distance0 - distance1);
    if (numOut >= vOut.length)
      throw $.ioore(numOut);
    t1 = vOut[numOut].get$v();
    t1 = t1._f;
    t2 = vIn[1].get$v()._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t4;
    if (1 >= t3)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = vIn[0].get$v();
    t5 = t1[0];
    t2 = t2._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t1[0] = t5 - t2[0];
    t5 = t1[1];
    if (1 >= t3)
      throw $.ioore(1);
    t1[1] = t5 - t2[1];
    t1[0] = t1[0] * interp;
    t1[1] = t1[1] * interp;
    t2 = vIn[0].get$v();
    t5 = t1[0];
    t2 = t2._f;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t1[0] = t5 + t2[0];
    t5 = t1[1];
    if (1 >= t3)
      throw $.ioore(1);
    t1[1] = t5 + t2[1];
    vin = distance0 > 0 ? vIn[0] : vIn[1];
    $.get$id$x(vOut[numOut]).setFrom$1($.get$id$x(vin));
    ++numOut;
  }
  return numOut;
},

Distance$_construct: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9;
  t1 = $.Simplex$();
  t2 = $.List_List(3);
  t3 = $.List_List(3);
  t4 = new $.Vector(new Float64Array(2));
  t5 = t4._f;
  t6 = t5.length;
  if (0 >= t6)
    throw $.ioore(0);
  t5[0] = 0;
  if (1 >= t6)
    throw $.ioore(1);
  t5[1] = 0;
  t5 = new $.Vector(new Float64Array(2));
  t6 = t5._f;
  t7 = t6.length;
  if (0 >= t7)
    throw $.ioore(0);
  t6[0] = 0;
  if (1 >= t7)
    throw $.ioore(1);
  t6[1] = 0;
  t6 = new $.Vector(new Float64Array(2));
  t7 = t6._f;
  t8 = t7.length;
  if (0 >= t8)
    throw $.ioore(0);
  t7[0] = 0;
  if (1 >= t8)
    throw $.ioore(1);
  t7[1] = 0;
  t7 = new $.Vector(new Float64Array(2));
  t8 = t7._f;
  t9 = t8.length;
  if (0 >= t9)
    throw $.ioore(0);
  t8[0] = 0;
  if (1 >= t9)
    throw $.ioore(1);
  t8[1] = 0;
  return new $.Distance(0, 0, 20, t1, t2, t3, t4, t5, t6, t7);
},

DistanceProxy$: function() {
  var t1 = new $.DistanceProxy($.List_List(8), 0, 0);
  t1.DistanceProxy$0();
  return t1;
},

Manifold$: function() {
  var t1, t2, t3, t4, t5;
  t1 = $.List_List(2);
  t2 = new $.Vector(new Float64Array(2));
  t3 = t2._f;
  t4 = t3.length;
  if (0 >= t4)
    throw $.ioore(0);
  t3[0] = 0;
  if (1 >= t4)
    throw $.ioore(1);
  t3[1] = 0;
  t3 = new $.Vector(new Float64Array(2));
  t4 = t3._f;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  t4[0] = 0;
  if (1 >= t5)
    throw $.ioore(1);
  t4[1] = 0;
  t3 = new $.Manifold(t1, t2, t3, null, 0);
  t3.Manifold$0();
  return t3;
},

PolygonShape$: function() {
  var t1, t2, t3, t4, t5;
  t1 = $.List_List(8);
  t2 = $.List_List(8);
  t3 = new $.Vector(new Float64Array(2));
  t4 = t3._f;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  t4[0] = 0;
  if (1 >= t5)
    throw $.ioore(1);
  t4[1] = 0;
  t2 = new $.PolygonShape(t3, t1, t2, 0, 1, 0.01);
  t2.PolygonShape$0();
  return t2;
},

PolygonShape$copy: function(other) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
  t1 = other.radius;
  t2 = other.vertexCount;
  t3 = $.List_List(8);
  t4 = $.List_List(8);
  t5 = new $.Vector(new Float64Array(2));
  t6 = t5._f;
  t7 = other.centroid._f;
  t8 = t7.length;
  if (0 >= t8)
    throw $.ioore(0);
  t9 = t7[0];
  t10 = t6.length;
  if (0 >= t10)
    throw $.ioore(0);
  t6[0] = t9;
  if (1 >= t8)
    throw $.ioore(1);
  t7 = t7[1];
  if (1 >= t10)
    throw $.ioore(1);
  t6[1] = t7;
  t1 = new $.PolygonShape(t5, t3, t4, t2, 1, t1);
  t1.PolygonShape$copy$1(other);
  return t1;
},

Simplex$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13;
  t1 = $.SimplexVertex$();
  t2 = $.SimplexVertex$();
  t3 = $.SimplexVertex$();
  t4 = $.List_List(3);
  t5 = new $.Vector(new Float64Array(2));
  t6 = t5._f;
  t7 = t6.length;
  if (0 >= t7)
    throw $.ioore(0);
  t6[0] = 0;
  if (1 >= t7)
    throw $.ioore(1);
  t6[1] = 0;
  t6 = new $.Vector(new Float64Array(2));
  t7 = t6._f;
  t8 = t7.length;
  if (0 >= t8)
    throw $.ioore(0);
  t7[0] = 0;
  if (1 >= t8)
    throw $.ioore(1);
  t7[1] = 0;
  t7 = new $.Vector(new Float64Array(2));
  t8 = t7._f;
  t9 = t8.length;
  if (0 >= t9)
    throw $.ioore(0);
  t8[0] = 0;
  if (1 >= t9)
    throw $.ioore(1);
  t8[1] = 0;
  t8 = new $.Vector(new Float64Array(2));
  t9 = t8._f;
  t10 = t9.length;
  if (0 >= t10)
    throw $.ioore(0);
  t9[0] = 0;
  if (1 >= t10)
    throw $.ioore(1);
  t9[1] = 0;
  t9 = new $.Vector(new Float64Array(2));
  t10 = t9._f;
  t11 = t10.length;
  if (0 >= t11)
    throw $.ioore(0);
  t10[0] = 0;
  if (1 >= t11)
    throw $.ioore(1);
  t10[1] = 0;
  t10 = new $.Vector(new Float64Array(2));
  t11 = t10._f;
  t12 = t11.length;
  if (0 >= t12)
    throw $.ioore(0);
  t11[0] = 0;
  if (1 >= t12)
    throw $.ioore(1);
  t11[1] = 0;
  t11 = new $.Vector(new Float64Array(2));
  t12 = t11._f;
  t13 = t12.length;
  if (0 >= t13)
    throw $.ioore(0);
  t12[0] = 0;
  if (1 >= t13)
    throw $.ioore(1);
  t12[1] = 0;
  t11 = new $.Simplex(t1, t2, t3, t4, 0, t5, t7, t6, t8, t9, t10, t11);
  t11.Simplex$0();
  return t11;
},

SimplexCache$: function() {
  return new $.SimplexCache(0, 0, $.List_List$generate(3, new $.SimplexCache_closure(), true), $.List_List$generate(3, new $.SimplexCache_closure0(), true));
},

SimplexVertex$: function() {
  var t1, t2, t3, t4, t5;
  t1 = new $.Vector(new Float64Array(2));
  t2 = t1._f;
  t3 = t2.length;
  if (0 >= t3)
    throw $.ioore(0);
  t2[0] = 0;
  if (1 >= t3)
    throw $.ioore(1);
  t2[1] = 0;
  t2 = new $.Vector(new Float64Array(2));
  t3 = t2._f;
  t4 = t3.length;
  if (0 >= t4)
    throw $.ioore(0);
  t3[0] = 0;
  if (1 >= t4)
    throw $.ioore(1);
  t3[1] = 0;
  t3 = new $.Vector(new Float64Array(2));
  t4 = t3._f;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  t4[0] = 0;
  if (1 >= t5)
    throw $.ioore(1);
  t4[1] = 0;
  return new $.SimplexVertex(t1, t2, t3, 0, 0, 0);
},

TimeOfImpact$_construct: function(argPool) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27;
  t1 = $.SimplexCache$();
  t2 = $.DistanceProxy$();
  t3 = $.DistanceProxy$();
  t4 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t5 = t4._f;
  t6 = t5.length;
  if (0 >= t6)
    throw $.ioore(0);
  t5[0] = 0;
  if (1 >= t6)
    throw $.ioore(1);
  t5[1] = 0;
  t5 = new $.Vector($.Float64List_Float64List(2));
  t5.Vector$zero$0();
  t6 = new $.Vector($.Float64List_Float64List(2));
  t6.Vector$zero$0();
  t7 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t8 = t7._f;
  t9 = t8.length;
  if (0 >= t9)
    throw $.ioore(0);
  t8[0] = 0;
  if (1 >= t9)
    throw $.ioore(1);
  t8[1] = 0;
  t8 = new $.Vector($.Float64List_Float64List(2));
  t8.Vector$zero$0();
  t9 = new $.Vector($.Float64List_Float64List(2));
  t9.Vector$zero$0();
  t10 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t11 = t10._f;
  t12 = t11.length;
  if (0 >= t12)
    throw $.ioore(0);
  t11[0] = 0;
  if (1 >= t12)
    throw $.ioore(1);
  t11[1] = 0;
  t11 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t12 = t11._f;
  t13 = t12.length;
  if (0 >= t13)
    throw $.ioore(0);
  t12[0] = 0;
  if (1 >= t13)
    throw $.ioore(1);
  t12[1] = 0;
  t12 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t13 = t12._f;
  t14 = t13.length;
  if (0 >= t14)
    throw $.ioore(0);
  t13[0] = 0;
  if (1 >= t14)
    throw $.ioore(1);
  t13[1] = 0;
  t13 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t14 = t13._f;
  t15 = t14.length;
  if (0 >= t15)
    throw $.ioore(0);
  t14[0] = 0;
  if (1 >= t15)
    throw $.ioore(1);
  t14[1] = 0;
  t14 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t15 = t14._f;
  t16 = t15.length;
  if (0 >= t16)
    throw $.ioore(0);
  t15[0] = 0;
  if (1 >= t16)
    throw $.ioore(1);
  t15[1] = 0;
  t15 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t16 = t15._f;
  t17 = t16.length;
  if (0 >= t17)
    throw $.ioore(0);
  t16[0] = 0;
  if (1 >= t17)
    throw $.ioore(1);
  t16[1] = 0;
  t16 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t17 = t16._f;
  t18 = t17.length;
  if (0 >= t18)
    throw $.ioore(0);
  t17[0] = 0;
  if (1 >= t18)
    throw $.ioore(1);
  t17[1] = 0;
  t17 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t18 = t17._f;
  t19 = t18.length;
  if (0 >= t19)
    throw $.ioore(0);
  t18[0] = 0;
  if (1 >= t19)
    throw $.ioore(1);
  t18[1] = 0;
  t18 = $.SeparationFunction$();
  t19 = $.List_List(2);
  t20 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t21 = t20._f;
  t22 = t21.length;
  if (0 >= t22)
    throw $.ioore(0);
  t21[0] = 0;
  if (1 >= t22)
    throw $.ioore(1);
  t21[1] = 0;
  t21 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t22 = t21._f;
  t23 = t22.length;
  if (0 >= t23)
    throw $.ioore(0);
  t22[0] = 0;
  if (1 >= t23)
    throw $.ioore(1);
  t22[1] = 0;
  t22 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t23 = t22._f;
  t24 = t23.length;
  if (0 >= t24)
    throw $.ioore(0);
  t23[0] = 0;
  if (1 >= t24)
    throw $.ioore(1);
  t23[1] = 0;
  t23 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t24 = t23._f;
  t25 = t24.length;
  if (0 >= t25)
    throw $.ioore(0);
  t24[0] = 0;
  if (1 >= t25)
    throw $.ioore(1);
  t24[1] = 0;
  t24 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t25 = t24._f;
  t26 = t25.length;
  if (0 >= t26)
    throw $.ioore(0);
  t25[0] = 0;
  if (1 >= t26)
    throw $.ioore(1);
  t25[1] = 0;
  t25 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t26 = t25._f;
  t27 = t26.length;
  if (0 >= t27)
    throw $.ioore(0);
  t26[0] = 0;
  if (1 >= t27)
    throw $.ioore(1);
  t26[1] = 0;
  t25 = new $.TimeOfImpact(t1, new $.DistanceInput(t2, t3, new $.Transform(t4, new $.Matrix22(t5, t6)), new $.Transform(t7, new $.Matrix22(t8, t9)), false), new $.Transform(t10, new $.Matrix22(t11, t12)), new $.Transform(t13, new $.Matrix22(t14, t15)), new $.DistanceOutput(t16, t17, null, null), t18, t19, new $.Sweep(t20, t21, t22, 0, 0), new $.Sweep(t23, t24, t25, 0, 0), argPool);
  t25.TimeOfImpact$_construct$1(argPool);
  return t25;
},

SeparationFunction$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30;
  t1 = $.DistanceProxy$();
  t2 = $.DistanceProxy$();
  t3 = new $.Vector(new Float64Array(2));
  t4 = t3._f;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  t4[0] = 0;
  if (1 >= t5)
    throw $.ioore(1);
  t4[1] = 0;
  t4 = new $.Vector(new Float64Array(2));
  t5 = t4._f;
  t6 = t5.length;
  if (0 >= t6)
    throw $.ioore(0);
  t5[0] = 0;
  if (1 >= t6)
    throw $.ioore(1);
  t5[1] = 0;
  t5 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t6 = t5._f;
  t7 = t6.length;
  if (0 >= t7)
    throw $.ioore(0);
  t6[0] = 0;
  if (1 >= t7)
    throw $.ioore(1);
  t6[1] = 0;
  t6 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t7 = t6._f;
  t8 = t7.length;
  if (0 >= t8)
    throw $.ioore(0);
  t7[0] = 0;
  if (1 >= t8)
    throw $.ioore(1);
  t7[1] = 0;
  t7 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t8 = t7._f;
  t9 = t8.length;
  if (0 >= t9)
    throw $.ioore(0);
  t8[0] = 0;
  if (1 >= t9)
    throw $.ioore(1);
  t8[1] = 0;
  t8 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t9 = t8._f;
  t10 = t9.length;
  if (0 >= t10)
    throw $.ioore(0);
  t9[0] = 0;
  if (1 >= t10)
    throw $.ioore(1);
  t9[1] = 0;
  t9 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t10 = t9._f;
  t11 = t10.length;
  if (0 >= t11)
    throw $.ioore(0);
  t10[0] = 0;
  if (1 >= t11)
    throw $.ioore(1);
  t10[1] = 0;
  t10 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t11 = t10._f;
  t12 = t11.length;
  if (0 >= t12)
    throw $.ioore(0);
  t11[0] = 0;
  if (1 >= t12)
    throw $.ioore(1);
  t11[1] = 0;
  t11 = new $.Vector(new Float64Array(2));
  t12 = t11._f;
  t13 = t12.length;
  if (0 >= t13)
    throw $.ioore(0);
  t12[0] = 0;
  if (1 >= t13)
    throw $.ioore(1);
  t12[1] = 0;
  t12 = new $.Vector(new Float64Array(2));
  t13 = t12._f;
  t14 = t13.length;
  if (0 >= t14)
    throw $.ioore(0);
  t13[0] = 0;
  if (1 >= t14)
    throw $.ioore(1);
  t13[1] = 0;
  t13 = new $.Vector(new Float64Array(2));
  t14 = t13._f;
  t15 = t14.length;
  if (0 >= t15)
    throw $.ioore(0);
  t14[0] = 0;
  if (1 >= t15)
    throw $.ioore(1);
  t14[1] = 0;
  t14 = new $.Vector(new Float64Array(2));
  t15 = t14._f;
  t16 = t15.length;
  if (0 >= t16)
    throw $.ioore(0);
  t15[0] = 0;
  if (1 >= t16)
    throw $.ioore(1);
  t15[1] = 0;
  t15 = new $.Vector(new Float64Array(2));
  t16 = t15._f;
  t17 = t16.length;
  if (0 >= t17)
    throw $.ioore(0);
  t16[0] = 0;
  if (1 >= t17)
    throw $.ioore(1);
  t16[1] = 0;
  t16 = new $.Vector(new Float64Array(2));
  t17 = t16._f;
  t18 = t17.length;
  if (0 >= t18)
    throw $.ioore(0);
  t17[0] = 0;
  if (1 >= t18)
    throw $.ioore(1);
  t17[1] = 0;
  t17 = new $.Vector(new Float64Array(2));
  t18 = t17._f;
  t19 = t18.length;
  if (0 >= t19)
    throw $.ioore(0);
  t18[0] = 0;
  if (1 >= t19)
    throw $.ioore(1);
  t18[1] = 0;
  t18 = new $.Vector(new Float64Array(2));
  t19 = t18._f;
  t20 = t19.length;
  if (0 >= t20)
    throw $.ioore(0);
  t19[0] = 0;
  if (1 >= t20)
    throw $.ioore(1);
  t19[1] = 0;
  t19 = new $.Vector(new Float64Array(2));
  t20 = t19._f;
  t21 = t20.length;
  if (0 >= t21)
    throw $.ioore(0);
  t20[0] = 0;
  if (1 >= t21)
    throw $.ioore(1);
  t20[1] = 0;
  t20 = new $.Vector(new Float64Array(2));
  t21 = t20._f;
  t22 = t21.length;
  if (0 >= t22)
    throw $.ioore(0);
  t21[0] = 0;
  if (1 >= t22)
    throw $.ioore(1);
  t21[1] = 0;
  t21 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t22 = t21._f;
  t23 = t22.length;
  if (0 >= t23)
    throw $.ioore(0);
  t22[0] = 0;
  if (1 >= t23)
    throw $.ioore(1);
  t22[1] = 0;
  t22 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t23 = t22._f;
  t24 = t23.length;
  if (0 >= t24)
    throw $.ioore(0);
  t23[0] = 0;
  if (1 >= t24)
    throw $.ioore(1);
  t23[1] = 0;
  t23 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t24 = t23._f;
  t25 = t24.length;
  if (0 >= t25)
    throw $.ioore(0);
  t24[0] = 0;
  if (1 >= t25)
    throw $.ioore(1);
  t24[1] = 0;
  t24 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t25 = t24._f;
  t26 = t25.length;
  if (0 >= t26)
    throw $.ioore(0);
  t25[0] = 0;
  if (1 >= t26)
    throw $.ioore(1);
  t25[1] = 0;
  t25 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t26 = t25._f;
  t27 = t26.length;
  if (0 >= t27)
    throw $.ioore(0);
  t26[0] = 0;
  if (1 >= t27)
    throw $.ioore(1);
  t26[1] = 0;
  t26 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t27 = t26._f;
  t28 = t27.length;
  if (0 >= t28)
    throw $.ioore(0);
  t27[0] = 0;
  if (1 >= t28)
    throw $.ioore(1);
  t27[1] = 0;
  t27 = new $.Vector(new Float64Array(2));
  t28 = t27._f;
  t29 = t28.length;
  if (0 >= t29)
    throw $.ioore(0);
  t28[0] = 0;
  if (1 >= t29)
    throw $.ioore(1);
  t28[1] = 0;
  t28 = new $.Vector(new Float64Array(2));
  t29 = t28._f;
  t30 = t29.length;
  if (0 >= t30)
    throw $.ioore(0);
  t29[0] = 0;
  if (1 >= t30)
    throw $.ioore(1);
  t29[1] = 0;
  return new $.SeparationFunction(t1, t2, 0, t3, t4, new $.Sweep(t5, t6, t7, 0, 0), new $.Sweep(t8, t9, t10, 0, 0), t11, t12, t13, t14, t15, t16, t17, t18, t19, t27, t28, t20, new $.Transform(t21, new $.Matrix22(t22, t23)), new $.Transform(t24, new $.Matrix22(t25, t26)));
},

WorldManifold$: function() {
  var t1, t2, t3, t4, t5;
  t1 = new $.Vector(new Float64Array(2));
  t2 = t1._f;
  t3 = t2.length;
  if (0 >= t3)
    throw $.ioore(0);
  t2[0] = 0;
  if (1 >= t3)
    throw $.ioore(1);
  t2[1] = 0;
  t2 = new $.Vector(new Float64Array(2));
  t3 = t2._f;
  t4 = t3.length;
  if (0 >= t4)
    throw $.ioore(0);
  t3[0] = 0;
  if (1 >= t4)
    throw $.ioore(1);
  t3[1] = 0;
  t3 = new $.Vector(new Float64Array(2));
  t4 = t3._f;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  t4[0] = 0;
  if (1 >= t5)
    throw $.ioore(1);
  t4[1] = 0;
  return new $.WorldManifold(t1, $.List_List$generate(2, new $.WorldManifold_closure(), true), t2, t3);
},

MathBox_distanceSquared: function(v1, v2) {
  var t1, t2, t3, t4, t5, dx, dy;
  t1 = v1._f;
  t2 = t1.length;
  if (0 >= t2)
    throw $.ioore(0);
  t3 = t1[0];
  t4 = v2._f;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  dx = t3 - t4[0];
  if (1 >= t2)
    throw $.ioore(1);
  t1 = t1[1];
  if (1 >= t5)
    throw $.ioore(1);
  dy = t1 - t4[1];
  return dx * dx + dy * dy;
},

Matrix22_mulTransMatrixAndVectorToOut: function(matrix, vector, out) {
  var t1, t2, t3, t4, t5, t6, t7;
  t1 = vector._f;
  t2 = t1.length;
  if (0 >= t2)
    throw $.ioore(0);
  t3 = t1[0];
  t4 = matrix.col1._f;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  t6 = t4[0];
  if (1 >= t2)
    throw $.ioore(1);
  t1 = t1[1];
  if (1 >= t5)
    throw $.ioore(1);
  t4 = t4[1];
  t5 = matrix.col2._f;
  t2 = t5.length;
  if (0 >= t2)
    throw $.ioore(0);
  t7 = t5[0];
  if (1 >= t2)
    throw $.ioore(1);
  t5 = t5[1];
  t2 = out._f;
  if (1 >= t2.length)
    throw $.ioore(1);
  t2[1] = t3 * t7 + t1 * t5;
  t2[0] = t3 * t6 + t1 * t4;
},

Matrix22_mulMatrixAndVectorToOut: function(matrix, vector, out) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
  t1 = matrix.get$col1()._f;
  if (1 >= t1.length)
    throw $.ioore(1);
  t1 = t1[1];
  t2 = $.getInterceptor$x(vector);
  t3 = t2.get$x(vector);
  if (typeof t3 !== "number")
    throw $.iae(t3);
  t4 = matrix.get$col2()._f;
  if (1 >= t4.length)
    throw $.ioore(1);
  t4 = t4[1];
  t5 = t2.get$y(vector);
  if (typeof t5 !== "number")
    throw $.iae(t5);
  t6 = matrix.get$col1()._f;
  if (0 >= t6.length)
    throw $.ioore(0);
  t6 = t6[0];
  t7 = t2.get$x(vector);
  if (typeof t7 !== "number")
    throw $.iae(t7);
  t8 = matrix.get$col2()._f;
  if (0 >= t8.length)
    throw $.ioore(0);
  t8 = t8[0];
  t2 = t2.get$y(vector);
  if (typeof t2 !== "number")
    throw $.iae(t2);
  t9 = out._f;
  t10 = t9.length;
  if (0 >= t10)
    throw $.ioore(0);
  t9[0] = t6 * t7 + t8 * t2;
  if (1 >= t10)
    throw $.ioore(1);
  t9[1] = t1 * t3 + t4 * t5;
},

Transform_mulToOut: function(transform, vector, out) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
  t1 = transform.position._f;
  if (1 >= t1.length)
    throw $.ioore(1);
  t2 = t1[1];
  t3 = transform.rotation;
  t4 = t3.col1._f;
  if (1 >= t4.length)
    throw $.ioore(1);
  t5 = t4[1];
  t6 = $.getInterceptor$x(vector);
  t7 = t6.get$x(vector);
  if (typeof t7 !== "number")
    throw $.iae(t7);
  t3 = t3.col2._f;
  if (1 >= t3.length)
    throw $.ioore(1);
  t8 = t3[1];
  t9 = t6.get$y(vector);
  if (typeof t9 !== "number")
    throw $.iae(t9);
  if (0 >= t1.length)
    throw $.ioore(0);
  t1 = t1[0];
  if (0 >= t4.length)
    throw $.ioore(0);
  t4 = t4[0];
  t10 = t6.get$x(vector);
  if (typeof t10 !== "number")
    throw $.iae(t10);
  if (0 >= t3.length)
    throw $.ioore(0);
  t3 = t3[0];
  t6 = t6.get$y(vector);
  if (typeof t6 !== "number")
    throw $.iae(t6);
  t11 = out._f;
  t12 = t11.length;
  if (0 >= t12)
    throw $.ioore(0);
  t11[0] = t1 + t4 * t10 + t3 * t6;
  if (1 >= t12)
    throw $.ioore(1);
  t11[1] = t2 + t5 * t7 + t8 * t9;
},

Transform_mulTransToOut: function(T, v, out) {
  var t1, t2, t3, t4, t5, v1x, v1y, t6;
  t1 = v._f;
  t2 = t1.length;
  if (0 >= t2)
    throw $.ioore(0);
  t3 = t1[0];
  t4 = T.position._f;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  v1x = t3 - t4[0];
  if (1 >= t2)
    throw $.ioore(1);
  t1 = t1[1];
  if (1 >= t5)
    throw $.ioore(1);
  v1y = t1 - t4[1];
  t4 = T.rotation;
  t1 = t4.col2._f;
  t5 = t1.length;
  if (0 >= t5)
    throw $.ioore(0);
  t2 = t1[0];
  if (1 >= t5)
    throw $.ioore(1);
  t1 = t1[1];
  t4 = t4.col1._f;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  t3 = t4[0];
  if (1 >= t5)
    throw $.ioore(1);
  t4 = t4[1];
  t5 = out._f;
  t6 = t5.length;
  if (0 >= t6)
    throw $.ioore(0);
  t5[0] = v1x * t3 + v1y * t4;
  if (1 >= t6)
    throw $.ioore(1);
  t5[1] = v1x * t2 + v1y * t1;
},

Vector_crossNumAndVectorToOut: function(s, a, out) {
  var t1, t2, tempY, t3;
  t1 = a._f;
  t2 = t1.length;
  if (0 >= t2)
    throw $.ioore(0);
  tempY = $.$mul$n(s, t1[0]);
  t3 = out._f;
  if (typeof s !== "number")
    throw s.$negate();
  if (1 >= t2)
    throw $.ioore(1);
  t1 = t1[1];
  t2 = t3.length;
  if (0 >= t2)
    throw $.ioore(0);
  t3[0] = -s * t1;
  if (1 >= t2)
    throw $.ioore(1);
  t3[1] = tempY;
},

Vector_crossVectorAndNumToOut: function(a, s, out) {
  var t1, t2, t3, t4;
  t1 = a._f;
  t2 = t1.length;
  if (0 >= t2)
    throw $.ioore(0);
  t3 = t1[0];
  t4 = out._f;
  if (1 >= t2)
    throw $.ioore(1);
  t1 = t1[1];
  t2 = t4.length;
  if (0 >= t2)
    throw $.ioore(0);
  t4[0] = s * t1;
  if (1 >= t2)
    throw $.ioore(1);
  t4[1] = -s * t3;
},

Vector_minToOut: function(a, b, out) {
  var t1, t2, t3, t4, t5, t6, t7;
  t1 = out._f;
  t2 = a._f;
  t3 = t2.length;
  if (0 >= t3)
    throw $.ioore(0);
  t4 = t2[0];
  t5 = b._f;
  t6 = t5.length;
  if (0 >= t6)
    throw $.ioore(0);
  t7 = t5[0];
  t4 = t4 < t7 ? t4 : t7;
  t7 = t1.length;
  if (0 >= t7)
    throw $.ioore(0);
  t1[0] = t4;
  if (1 >= t3)
    throw $.ioore(1);
  t2 = t2[1];
  if (1 >= t6)
    throw $.ioore(1);
  t5 = t5[1];
  t2 = t2 < t5 ? t2 : t5;
  if (1 >= t7)
    throw $.ioore(1);
  t1[1] = t2;
},

Vector_maxToOut: function(a, b, out) {
  var t1, t2, t3, t4, t5, t6, t7;
  t1 = out._f;
  t2 = a._f;
  t3 = t2.length;
  if (0 >= t3)
    throw $.ioore(0);
  t4 = t2[0];
  t5 = b._f;
  t6 = t5.length;
  if (0 >= t6)
    throw $.ioore(0);
  t7 = t5[0];
  t4 = t4 > t7 ? t4 : t7;
  t7 = t1.length;
  if (0 >= t7)
    throw $.ioore(0);
  t1[0] = t4;
  if (1 >= t3)
    throw $.ioore(1);
  t2 = t2[1];
  if (1 >= t6)
    throw $.ioore(1);
  t5 = t5[1];
  t2 = t2 > t5 ? t2 : t5;
  if (1 >= t7)
    throw $.ioore(1);
  t1[1] = t2;
},

Body$: function(bd, world) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18;
  t1 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t2 = t1._f;
  t3 = t2.length;
  if (0 >= t3)
    throw $.ioore(0);
  t2[0] = 0;
  if (1 >= t3)
    throw $.ioore(1);
  t2[1] = 0;
  t2 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t3 = t2._f;
  t4 = t3.length;
  if (0 >= t4)
    throw $.ioore(0);
  t3[0] = 0;
  if (1 >= t4)
    throw $.ioore(1);
  t3[1] = 0;
  t3 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t4 = t3._f;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  t4[0] = 0;
  if (1 >= t5)
    throw $.ioore(1);
  t4[1] = 0;
  t4 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t5 = t4._f;
  t6 = t5.length;
  if (0 >= t6)
    throw $.ioore(0);
  t5[0] = 0;
  if (1 >= t6)
    throw $.ioore(1);
  t5[1] = 0;
  t5 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t6 = t5._f;
  t7 = t6.length;
  if (0 >= t7)
    throw $.ioore(0);
  t6[0] = 0;
  if (1 >= t7)
    throw $.ioore(1);
  t6[1] = 0;
  t6 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t7 = t6._f;
  t8 = t7.length;
  if (0 >= t8)
    throw $.ioore(0);
  t7[0] = 0;
  if (1 >= t8)
    throw $.ioore(1);
  t7[1] = 0;
  t7 = new $.Vector(new Float64Array(2));
  t8 = t7._f;
  t9 = bd.linearVelocity._f;
  t10 = t9.length;
  if (0 >= t10)
    throw $.ioore(0);
  t11 = t9[0];
  t12 = t8.length;
  if (0 >= t12)
    throw $.ioore(0);
  t8[0] = t11;
  if (1 >= t10)
    throw $.ioore(1);
  t9 = t9[1];
  if (1 >= t12)
    throw $.ioore(1);
  t8[1] = t9;
  t9 = new $.Vector(new Float64Array(2));
  t8 = t9._f;
  t12 = t8.length;
  if (0 >= t12)
    throw $.ioore(0);
  t8[0] = 0;
  if (1 >= t12)
    throw $.ioore(1);
  t8[1] = 0;
  t8 = bd.userData;
  t12 = $.FixtureDef$();
  t10 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t11 = t10._f;
  t13 = t11.length;
  if (0 >= t13)
    throw $.ioore(0);
  t11[0] = 0;
  if (1 >= t13)
    throw $.ioore(1);
  t11[1] = 0;
  t11 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t13 = t11._f;
  t14 = t13.length;
  if (0 >= t14)
    throw $.ioore(0);
  t13[0] = 0;
  if (1 >= t14)
    throw $.ioore(1);
  t13[1] = 0;
  t13 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t14 = t13._f;
  t15 = t14.length;
  if (0 >= t15)
    throw $.ioore(0);
  t14[0] = 0;
  if (1 >= t15)
    throw $.ioore(1);
  t14[1] = 0;
  t14 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t15 = t14._f;
  t16 = t15.length;
  if (0 >= t16)
    throw $.ioore(0);
  t15[0] = 0;
  if (1 >= t16)
    throw $.ioore(1);
  t15[1] = 0;
  t15 = new $.Vector(new Float64Array(2));
  t16 = t15._f;
  t17 = t16.length;
  if (0 >= t17)
    throw $.ioore(0);
  t16[0] = 0;
  if (1 >= t17)
    throw $.ioore(1);
  t16[1] = 0;
  t16 = new $.Vector(new Float64Array(2));
  t17 = t16._f;
  t18 = t17.length;
  if (0 >= t18)
    throw $.ioore(0);
  t17[0] = 0;
  if (1 >= t18)
    throw $.ioore(1);
  t17[1] = 0;
  t16 = new $.Body(world, 0, null, 0, t8, t7, 0, null, null, null, null, null, 0, null, t9, 0, 0, 0, bd.linearDamping, bd.angularDamping, bd.type, null, new $.Transform(t1, new $.Matrix22(t2, t3)), new $.Sweep(t4, t5, t6, 0, 0), t12, new $.MassData(0, t10, 0), new $.Transform(t11, new $.Matrix22(t13, t14)), t15, t16);
  t16.Body$2(bd, world);
  return t16;
},

BodyDef$: function() {
  var t1, t2, t3, t4;
  t1 = new $.Vector(new Float64Array(2));
  t2 = t1._f;
  t3 = t2.length;
  if (0 >= t3)
    throw $.ioore(0);
  t2[0] = 0;
  if (1 >= t3)
    throw $.ioore(1);
  t2[1] = 0;
  t2 = new $.Vector(new Float64Array(2));
  t3 = t2._f;
  t4 = t3.length;
  if (0 >= t4)
    throw $.ioore(0);
  t3[0] = 0;
  if (1 >= t4)
    throw $.ioore(1);
  t3[1] = 0;
  return new $.BodyDef(0, 0, null, t1, t2, 0, false, null, false, true, 0, 0, true, true);
},

ContactConstraint$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
  t1 = $.List_List$generate(2, new $.ContactConstraint_closure(), true);
  t2 = new $.Vector(new Float64Array(2));
  t3 = t2._f;
  t4 = t3.length;
  if (0 >= t4)
    throw $.ioore(0);
  t3[0] = 0;
  if (1 >= t4)
    throw $.ioore(1);
  t3[1] = 0;
  t3 = new $.Vector(new Float64Array(2));
  t4 = t3._f;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  t4[0] = 0;
  if (1 >= t5)
    throw $.ioore(1);
  t4[1] = 0;
  t4 = new $.Vector(new Float64Array(2));
  t5 = t4._f;
  t6 = t5.length;
  if (0 >= t6)
    throw $.ioore(0);
  t5[0] = 0;
  if (1 >= t6)
    throw $.ioore(1);
  t5[1] = 0;
  t5 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t6 = t5._f;
  t7 = t6.length;
  if (0 >= t7)
    throw $.ioore(0);
  t6[0] = 0;
  if (1 >= t7)
    throw $.ioore(1);
  t6[1] = 0;
  t6 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t7 = t6._f;
  t8 = t7.length;
  if (0 >= t8)
    throw $.ioore(0);
  t7[0] = 0;
  if (1 >= t8)
    throw $.ioore(1);
  t7[1] = 0;
  t7 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t8 = t7._f;
  t9 = t8.length;
  if (0 >= t9)
    throw $.ioore(0);
  t8[0] = 0;
  if (1 >= t9)
    throw $.ioore(1);
  t8[1] = 0;
  t8 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t9 = t8._f;
  t10 = t9.length;
  if (0 >= t10)
    throw $.ioore(0);
  t9[0] = 0;
  if (1 >= t10)
    throw $.ioore(1);
  t9[1] = 0;
  return new $.ContactConstraint(t1, t2, t3, t4, new $.Matrix22(t5, t6), new $.Matrix22(t7, t8), null, null, null, null, null, null, 0, null);
},

ContactConstraintPoint$: function() {
  var t1, t2, t3, t4, t5;
  t1 = new $.Vector(new Float64Array(2));
  t2 = t1._f;
  t3 = t2.length;
  if (0 >= t3)
    throw $.ioore(0);
  t2[0] = 0;
  if (1 >= t3)
    throw $.ioore(1);
  t2[1] = 0;
  t2 = new $.Vector(new Float64Array(2));
  t3 = t2._f;
  t4 = t3.length;
  if (0 >= t4)
    throw $.ioore(0);
  t3[0] = 0;
  if (1 >= t4)
    throw $.ioore(1);
  t3[1] = 0;
  t3 = new $.Vector(new Float64Array(2));
  t4 = t3._f;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  t4[0] = 0;
  if (1 >= t5)
    throw $.ioore(1);
  t4[1] = 0;
  return new $.ContactConstraintPoint(t1, t2, t3, 0, 0, 0, 0, 0);
},

ContactSolver$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18;
  t1 = $.List_List$generate(256, new $.ContactSolver_closure(), true);
  t2 = $.WorldManifold$();
  t3 = new $.Vector(new Float64Array(2));
  t4 = t3._f;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  t4[0] = 0;
  if (1 >= t5)
    throw $.ioore(1);
  t4[1] = 0;
  t4 = new $.Vector(new Float64Array(2));
  t5 = t4._f;
  t6 = t5.length;
  if (0 >= t6)
    throw $.ioore(0);
  t5[0] = 0;
  if (1 >= t6)
    throw $.ioore(1);
  t5[1] = 0;
  t5 = new $.Vector(new Float64Array(2));
  t6 = t5._f;
  t7 = t6.length;
  if (0 >= t7)
    throw $.ioore(0);
  t6[0] = 0;
  if (1 >= t7)
    throw $.ioore(1);
  t6[1] = 0;
  t6 = new $.Vector(new Float64Array(2));
  t7 = t6._f;
  t8 = t7.length;
  if (0 >= t8)
    throw $.ioore(0);
  t7[0] = 0;
  if (1 >= t8)
    throw $.ioore(1);
  t7[1] = 0;
  t7 = new $.Vector(new Float64Array(2));
  t8 = t7._f;
  t9 = t8.length;
  if (0 >= t9)
    throw $.ioore(0);
  t8[0] = 0;
  if (1 >= t9)
    throw $.ioore(1);
  t8[1] = 0;
  t8 = new $.Vector(new Float64Array(2));
  t9 = t8._f;
  t10 = t9.length;
  if (0 >= t10)
    throw $.ioore(0);
  t9[0] = 0;
  if (1 >= t10)
    throw $.ioore(1);
  t9[1] = 0;
  t9 = new $.Vector(new Float64Array(2));
  t10 = t9._f;
  t11 = t10.length;
  if (0 >= t11)
    throw $.ioore(0);
  t10[0] = 0;
  if (1 >= t11)
    throw $.ioore(1);
  t10[1] = 0;
  t10 = new $.Vector(new Float64Array(2));
  t11 = t10._f;
  t12 = t11.length;
  if (0 >= t12)
    throw $.ioore(0);
  t11[0] = 0;
  if (1 >= t12)
    throw $.ioore(1);
  t11[1] = 0;
  t11 = new $.Vector(new Float64Array(2));
  t12 = t11._f;
  t13 = t12.length;
  if (0 >= t13)
    throw $.ioore(0);
  t12[0] = 0;
  if (1 >= t13)
    throw $.ioore(1);
  t12[1] = 0;
  t12 = new $.Vector(new Float64Array(2));
  t13 = t12._f;
  t14 = t13.length;
  if (0 >= t14)
    throw $.ioore(0);
  t13[0] = 0;
  if (1 >= t14)
    throw $.ioore(1);
  t13[1] = 0;
  t13 = new $.Vector(new Float64Array(2));
  t14 = t13._f;
  t15 = t14.length;
  if (0 >= t15)
    throw $.ioore(0);
  t14[0] = 0;
  if (1 >= t15)
    throw $.ioore(1);
  t14[1] = 0;
  t14 = $.PositionSolverManifold$();
  t15 = new $.Vector(new Float64Array(2));
  t16 = t15._f;
  t17 = t16.length;
  if (0 >= t17)
    throw $.ioore(0);
  t16[0] = 0;
  if (1 >= t17)
    throw $.ioore(1);
  t16[1] = 0;
  t16 = new $.Vector(new Float64Array(2));
  t17 = t16._f;
  t18 = t17.length;
  if (0 >= t18)
    throw $.ioore(0);
  t17[0] = 0;
  if (1 >= t18)
    throw $.ioore(1);
  t17[1] = 0;
  return new $.ContactSolver(t1, null, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16);
},

PositionSolverManifold$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9;
  t1 = new $.Vector(new Float64Array(2));
  t2 = t1._f;
  t3 = t2.length;
  if (0 >= t3)
    throw $.ioore(0);
  t2[0] = 0;
  if (1 >= t3)
    throw $.ioore(1);
  t2[1] = 0;
  t2 = new $.Vector(new Float64Array(2));
  t3 = t2._f;
  t4 = t3.length;
  if (0 >= t4)
    throw $.ioore(0);
  t3[0] = 0;
  if (1 >= t4)
    throw $.ioore(1);
  t3[1] = 0;
  t3 = new $.Vector(new Float64Array(2));
  t4 = t3._f;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  t4[0] = 0;
  if (1 >= t5)
    throw $.ioore(1);
  t4[1] = 0;
  t4 = new $.Vector(new Float64Array(2));
  t5 = t4._f;
  t6 = t5.length;
  if (0 >= t6)
    throw $.ioore(0);
  t5[0] = 0;
  if (1 >= t6)
    throw $.ioore(1);
  t5[1] = 0;
  t5 = new $.Vector(new Float64Array(2));
  t6 = t5._f;
  t7 = t6.length;
  if (0 >= t7)
    throw $.ioore(0);
  t6[0] = 0;
  if (1 >= t7)
    throw $.ioore(1);
  t6[1] = 0;
  t6 = new $.Vector(new Float64Array(2));
  t7 = t6._f;
  t8 = t7.length;
  if (0 >= t8)
    throw $.ioore(0);
  t7[0] = 0;
  if (1 >= t8)
    throw $.ioore(1);
  t7[1] = 0;
  t7 = new $.Vector(new Float64Array(2));
  t8 = t7._f;
  t9 = t8.length;
  if (0 >= t9)
    throw $.ioore(0);
  t8[0] = 0;
  if (1 >= t9)
    throw $.ioore(1);
  t8[1] = 0;
  return new $.PositionSolverManifold(t1, t2, 0, t3, t4, t5, t6, t7);
},

TimeOfImpactConstraint$: function() {
  var t1, t2, t3, t4, t5;
  t1 = $.List_List$generate(2, new $.TimeOfImpactConstraint_closure(), true);
  t2 = new $.Vector(new Float64Array(2));
  t3 = t2._f;
  t4 = t3.length;
  if (0 >= t4)
    throw $.ioore(0);
  t3[0] = 0;
  if (1 >= t4)
    throw $.ioore(1);
  t3[1] = 0;
  t3 = new $.Vector(new Float64Array(2));
  t4 = t3._f;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  t4[0] = 0;
  if (1 >= t5)
    throw $.ioore(1);
  t4[1] = 0;
  return new $.TimeOfImpactConstraint(t1, t2, t3, 0, 0, 0, null, null);
},

TimeOfImpactSolver$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8;
  t1 = $.List_List$generate(4, new $.TimeOfImpactSolver_closure(), true);
  t2 = $.TimeOfImpactSolverManifold$();
  t3 = new $.Vector(new Float64Array(2));
  t4 = t3._f;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  t4[0] = 0;
  if (1 >= t5)
    throw $.ioore(1);
  t4[1] = 0;
  t4 = new $.Vector(new Float64Array(2));
  t5 = t4._f;
  t6 = t5.length;
  if (0 >= t6)
    throw $.ioore(0);
  t5[0] = 0;
  if (1 >= t6)
    throw $.ioore(1);
  t5[1] = 0;
  t5 = new $.Vector(new Float64Array(2));
  t6 = t5._f;
  t7 = t6.length;
  if (0 >= t7)
    throw $.ioore(0);
  t6[0] = 0;
  if (1 >= t7)
    throw $.ioore(1);
  t6[1] = 0;
  t6 = new $.Vector(new Float64Array(2));
  t7 = t6._f;
  t8 = t7.length;
  if (0 >= t8)
    throw $.ioore(0);
  t7[0] = 0;
  if (1 >= t8)
    throw $.ioore(1);
  t7[1] = 0;
  return new $.TimeOfImpactSolver(t1, 0, null, t2, t3, t4, t5, t6);
},

TimeOfImpactSolverManifold$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9;
  t1 = new $.Vector(new Float64Array(2));
  t2 = t1._f;
  t3 = t2.length;
  if (0 >= t3)
    throw $.ioore(0);
  t2[0] = 0;
  if (1 >= t3)
    throw $.ioore(1);
  t2[1] = 0;
  t2 = new $.Vector(new Float64Array(2));
  t3 = t2._f;
  t4 = t3.length;
  if (0 >= t4)
    throw $.ioore(0);
  t3[0] = 0;
  if (1 >= t4)
    throw $.ioore(1);
  t3[1] = 0;
  t3 = new $.Vector(new Float64Array(2));
  t4 = t3._f;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  t4[0] = 0;
  if (1 >= t5)
    throw $.ioore(1);
  t4[1] = 0;
  t4 = new $.Vector(new Float64Array(2));
  t5 = t4._f;
  t6 = t5.length;
  if (0 >= t6)
    throw $.ioore(0);
  t5[0] = 0;
  if (1 >= t6)
    throw $.ioore(1);
  t5[1] = 0;
  t5 = new $.Vector(new Float64Array(2));
  t6 = t5._f;
  t7 = t6.length;
  if (0 >= t7)
    throw $.ioore(0);
  t6[0] = 0;
  if (1 >= t7)
    throw $.ioore(1);
  t6[1] = 0;
  t6 = new $.Vector(new Float64Array(2));
  t7 = t6._f;
  t8 = t7.length;
  if (0 >= t8)
    throw $.ioore(0);
  t7[0] = 0;
  if (1 >= t8)
    throw $.ioore(1);
  t7[1] = 0;
  t7 = new $.Vector(new Float64Array(2));
  t8 = t7._f;
  t9 = t8.length;
  if (0 >= t9)
    throw $.ioore(0);
  t8[0] = 0;
  if (1 >= t9)
    throw $.ioore(1);
  t8[1] = 0;
  return new $.TimeOfImpactSolverManifold(t1, t2, 0, t3, t4, t5, t6, t7);
},

Fixture$: function() {
  var t1, t2, t3, t4, t5, t6;
  t1 = new $.AxisAlignedBox(null, null);
  if (t1.lowerBound == null) {
    t2 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
    t3 = t2._f;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t3[0] = 0;
    if (1 >= t4)
      throw $.ioore(1);
    t3[1] = 0;
    t1.lowerBound = t2;
  }
  if (t1.upperBound == null) {
    t2 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
    t3 = t2._f;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t3[0] = 0;
    if (1 >= t4)
      throw $.ioore(1);
    t3[1] = 0;
    t1.upperBound = t2;
  }
  t2 = new $.AxisAlignedBox(null, null);
  if (t2.lowerBound == null) {
    t3 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
    t4 = t3._f;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t4[0] = 0;
    if (1 >= t5)
      throw $.ioore(1);
    t4[1] = 0;
    t2.lowerBound = t3;
  }
  if (t2.upperBound == null) {
    t3 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
    t4 = t3._f;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t4[0] = 0;
    if (1 >= t5)
      throw $.ioore(1);
    t4[1] = 0;
    t2.upperBound = t3;
  }
  t3 = new $.AxisAlignedBox(null, null);
  if (t3.lowerBound == null) {
    t4 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
    t5 = t4._f;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t5[0] = 0;
    if (1 >= t6)
      throw $.ioore(1);
    t5[1] = 0;
    t3.lowerBound = t4;
  }
  if (t3.upperBound == null) {
    t4 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
    t5 = t4._f;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t5[0] = 0;
    if (1 >= t6)
      throw $.ioore(1);
    t5[1] = 0;
    t3.upperBound = t4;
  }
  return new $.Fixture(t1, null, null, null, null, null, null, null, new $.Filter(0, 0, 0), null, null, t2, t3);
},

FixtureDef$: function() {
  var t1 = new $.FixtureDef(null, null, 0.2, 0, 0, false, new $.Filter(0, 0, 0));
  t1.FixtureDef$0();
  return t1;
},

World$: function(gravity, doSleep, argPool) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22;
  t1 = $.List_List(2);
  t2 = new $.Vector(new Float64Array(2));
  t3 = t2._f;
  t4 = t3.length;
  if (0 >= t4)
    throw $.ioore(0);
  t3[0] = 0;
  if (1 >= t4)
    throw $.ioore(1);
  t3[1] = 0;
  t3 = new $.Vector(new Float64Array(2));
  t4 = t3._f;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  t4[0] = 0;
  if (1 >= t5)
    throw $.ioore(1);
  t4[1] = 0;
  t4 = new $.Vector(new Float64Array(2));
  t5 = t4._f;
  t6 = t5.length;
  if (0 >= t6)
    throw $.ioore(0);
  t5[0] = 0;
  if (1 >= t6)
    throw $.ioore(1);
  t5[1] = 0;
  t5 = new $.Vector(new Float64Array(2));
  t6 = t5._f;
  t7 = t6.length;
  if (0 >= t7)
    throw $.ioore(0);
  t6[0] = 0;
  if (1 >= t7)
    throw $.ioore(1);
  t6[1] = 0;
  t6 = $.DistanceProxy$();
  t7 = $.DistanceProxy$();
  t8 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t9 = t8._f;
  t10 = t9.length;
  if (0 >= t10)
    throw $.ioore(0);
  t9[0] = 0;
  if (1 >= t10)
    throw $.ioore(1);
  t9[1] = 0;
  t9 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t10 = t9._f;
  t11 = t10.length;
  if (0 >= t11)
    throw $.ioore(0);
  t10[0] = 0;
  if (1 >= t11)
    throw $.ioore(1);
  t10[1] = 0;
  t10 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t11 = t10._f;
  t12 = t11.length;
  if (0 >= t12)
    throw $.ioore(0);
  t11[0] = 0;
  if (1 >= t12)
    throw $.ioore(1);
  t11[1] = 0;
  t11 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t12 = t11._f;
  t13 = t12.length;
  if (0 >= t13)
    throw $.ioore(0);
  t12[0] = 0;
  if (1 >= t13)
    throw $.ioore(1);
  t12[1] = 0;
  t12 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t13 = t12._f;
  t14 = t13.length;
  if (0 >= t14)
    throw $.ioore(0);
  t13[0] = 0;
  if (1 >= t14)
    throw $.ioore(1);
  t13[1] = 0;
  t13 = new $.Vector($._TypedArrayFactoryProvider_createFloat64List(2));
  t14 = t13._f;
  t15 = t14.length;
  if (0 >= t15)
    throw $.ioore(0);
  t14[0] = 0;
  if (1 >= t15)
    throw $.ioore(1);
  t14[1] = 0;
  t14 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t15 = t14._f;
  t16 = t15.length;
  if (0 >= t16)
    throw $.ioore(0);
  t15[0] = 0;
  if (1 >= t16)
    throw $.ioore(1);
  t15[1] = 0;
  t15 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t16 = t15._f;
  t17 = t16.length;
  if (0 >= t17)
    throw $.ioore(0);
  t16[0] = 0;
  if (1 >= t17)
    throw $.ioore(1);
  t16[1] = 0;
  t16 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t17 = t16._f;
  t18 = t17.length;
  if (0 >= t18)
    throw $.ioore(0);
  t17[0] = 0;
  if (1 >= t18)
    throw $.ioore(1);
  t17[1] = 0;
  t17 = $.TimeOfImpactSolver$();
  t18 = $.List_List(32);
  t19 = $.ContactSolver$();
  t20 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
  t21 = t20._f;
  t22 = t21.length;
  if (0 >= t22)
    throw $.ioore(0);
  t21[0] = 0;
  if (1 >= t22)
    throw $.ioore(1);
  t21[1] = 0;
  t20 = new $.World(4, null, null, null, 0, 0, gravity, doSleep, null, null, null, argPool, 0, true, true, t1, t2, t3, new $.TimeStep(0, 0, 0, 0, 0, true), t4, t5, new $.WorldQueryWrapper(null, null), new $.TimeOfImpactInput(t6, t7, new $.Sweep(t8, t9, t10, 0, 0), new $.Sweep(t11, t12, t13, 0, 0), 0), new $.TimeOfImpactOutput(0, 0), new $.Sweep(t14, t15, t16, 0, 0), t17, t18, new $.Island(null, null, null, null, null, null, null, null, null, null, null, null, null, t19, t20, new $.ContactImpulse($.List_List(2), $.List_List(2))), $.List_List(10));
  t20.World$3(gravity, doSleep, argPool);
  return t20;
}}],
["dart._collection.dev", "dart:_collection-dev", , {
ListIterable: {"": "IterableBase;",
  get$iterator: function(_) {
    return new $.ListIterator(this, this.get$length(this), 0, null);
  },
  skip$1: function(_, count) {
    return new $.SubListIterable(this, count, null);
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($);
      $.JSArray_methods.set$length(result, this.get$length(this));
    } else
      result = $.List_List(this.get$length(this));
    i = 0;
    while (true) {
      t1 = this.get$length(this);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      if (!(i < t1))
        break;
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
      ++i;
    }
    return result;
  },
  $asIterable: null
},

SubListIterable: {"": "ListIterable;_iterable,_start,_endOrLength",
  get$_endIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._endOrLength;
    if (t1 == null || $.$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._start;
    if ($.$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2;
    $length = $.get$length$asx(this._iterable);
    if (typeof $length !== "number")
      return this.get$length$bailout2(1, $length);
    t1 = this._start;
    if (typeof t1 !== "number")
      return this.get$length$bailout2(2, $length, t1);
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (typeof t2 !== "number")
      return this.get$length$bailout2(3, $length, t1, t2);
    if (t2 >= $length)
      return $length - t1;
    return t2 - t1;
  },
  get$length$bailout2: function(state0, $length, t1, t2) {
    switch (state0) {
      case 0:
        $length = $.get$length$asx(this._iterable);
      case 1:
        state0 = 0;
        t1 = this._start;
      case 2:
        state0 = 0;
        if ($.$ge$n(t1, $length))
          return 0;
        t2 = this._endOrLength;
      case 3:
        state0 = 0;
        if (t2 == null || $.$ge$n(t2, $length))
          return $.$sub$n($length, t1);
        return $.$sub$n(t2, t1);
    }
  },
  elementAt$1: function(_, index) {
    var t1, realIndex;
    if (typeof index !== "number")
      return this.elementAt$1$bailout2(1, index);
    t1 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.elementAt$1$bailout2(2, index, t1);
    realIndex = t1 + index;
    if (!(index < 0)) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1) {
      t1 = this.get$length(this);
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $.S(t1)));
    }
    return $.elementAt$1$ax(this._iterable, realIndex);
  },
  elementAt$1$bailout2: function(state0, index, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.get$_startIndex();
      case 2:
        var realIndex;
        state0 = 0;
        realIndex = $.$add$ns(t1, index);
        if (!$.$lt$n(index, 0)) {
          t1 = this.get$_endIndex();
          if (typeof t1 !== "number")
            throw $.iae(t1);
          t1 = $.$ge$n(realIndex, t1);
        } else
          t1 = true;
        if (t1) {
          t1 = this.get$length(this);
          throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $.S(t1)));
        }
        return $.elementAt$1$ax(this._iterable, realIndex);
    }
  },
  skip$1: function(_, count) {
    if ($.$lt$n(count, 0))
      throw $.wrapException(new $.ArgumentError(count));
    return new $.SubListIterable(this._iterable, $.$add$ns(this._start, count), this._endOrLength);
  },
  $asIterable: null
},

ListIterator: {"": "Object;_iterable,_liblib$_length,_index,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = $.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if (!$.$eq(this._liblib$_length, $length))
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    t3 = this._index;
    if (typeof $length !== "number")
      throw $.iae($length);
    if (t3 >= $length) {
      this._liblib$_current = null;
      return false;
    }
    this._liblib$_current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

MappedIterable: {"": "IterableBase;_iterable,_liblib$_f",
  _liblib$_f$1: function(arg0) {
    return this._liblib$_f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    return new $.MappedIterator(null, t1.get$iterator(t1), this._liblib$_f);
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return this._liblib$_f$1(t1.elementAt$1(t1, index));
  },
  $asIterable: function (S, T) { return [T]; }
},

MappedIterator: {"": "Iterator;_liblib$_current,_iterator,_liblib$_f",
  _liblib$_f$1: function(arg0) {
    return this._liblib$_f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib$_current = this._liblib$_f$1(t1.get$current());
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib$_current;
  }
},

MappedListIterable: {"": "ListIterable;_liblib$_source,_liblib$_f",
  _liblib$_f$1: function(arg0) {
    return this._liblib$_f.call$1(arg0);
  },
  get$length: function(_) {
    return $.get$length$asx(this._liblib$_source);
  },
  elementAt$1: function(_, index) {
    return this._liblib$_f$1($.elementAt$1$ax(this._liblib$_source, index));
  },
  $asIterable: function (S, T) { return [T]; }
},

WhereIterable: {"": "IterableBase;_iterable,_liblib$_f",
  get$iterator: function(_) {
    return new $.WhereIterator($.get$iterator$ax(this._iterable), this._liblib$_f);
  },
  $asIterable: null
},

WhereIterator: {"": "Iterator;_iterator,_liblib$_f",
  _liblib$_f$1: function(arg0) {
    return this._liblib$_f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._liblib$_f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  }
},

SkipIterable: {"": "IterableBase;_iterable,_skipCount",
  skip$1: function(_, n) {
    var t1, t2;
    if (typeof n !== "number" || Math.floor(n) !== n || n < 0)
      throw $.wrapException(new $.ArgumentError(n));
    t1 = new $.SkipIterable(this._iterable, $.$add$ns(this._skipCount, n));
    t2 = t1._skipCount;
    if (typeof t2 !== "number" || Math.floor(t2) !== t2 || $.$lt$n(t2, 0))
      $.throwExpression(new $.ArgumentError(t2));
    return t1;
  },
  get$iterator: function(_) {
    return new $.SkipIterator($.get$iterator$ax(this._iterable), this._skipCount);
  },
  $asIterable: null
},

SkipIterator: {"": "Iterator;_iterator,_skipCount",
  moveNext$0: function() {
    var t1, i, t2;
    t1 = this._iterator;
    i = 0;
    while (true) {
      t2 = this._skipCount;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      t1.moveNext$0();
      ++i;
    }
    this._skipCount = 0;
    return t1.moveNext$0();
  },
  get$current: function() {
    return this._iterator.get$current();
  }
},

ToString__emitPair_closure: {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    t1.write$1(": ");
    $.ToString__emitObject(v, t1, t2);
  }
},

Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3, t4;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !$.isJsIndexable(src, src[$.dispatchPropertyName])))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof srcStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !$.isJsIndexable(dst, dst[$.dispatchPropertyName]))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dstStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof count !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i >>> 0 !== i || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j >>> 0 !== j || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = srcStart + count, t2 = src.length, t3 = dst.length, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i >>> 0 !== i || i >= t2)
        throw $.ioore(i);
      t4 = src[i];
      if (j >>> 0 !== j || j >= t3)
        throw $.ioore(j);
      dst[j] = t4;
    }
},

Arrays_copy$bailout: function(state0, src, srcStart, dst, dstStart, count) {
  var t1, i, j, t2, t3, t4;
  t1 = $.getInterceptor$n(srcStart);
  if (t1.$lt(srcStart, dstStart))
    for (i = $.$sub$n(t1.$add(srcStart, count), 1), j = $.$sub$n($.$add$ns(dstStart, count), 1), t1 = $.getInterceptor$asx(src), t2 = $.getInterceptor$ax(dst); t3 = $.getInterceptor$n(i), t3.$ge(i, srcStart); i = t3.$sub(i, 1), j = $.$sub$n(j, 1))
      t2.$indexSet(dst, j, t1.$index(src, i));
  else
    for (t2 = $.getInterceptor$asx(src), t3 = $.getInterceptor$ax(dst), j = dstStart, i = srcStart; t4 = $.getInterceptor$n(i), t4.$lt(i, t1.$add(srcStart, count)); i = t4.$add(i, 1), j = $.$add$ns(j, 1))
      t3.$indexSet(dst, j, t2.$index(src, i));
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = $.get$iterator$ax(iterable); t1.moveNext$0();)
    f.call$1(t1._liblib$_current);
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  var t1 = $.getInterceptor$n(start);
  if (t1.$lt(start, 0) || t1.$gt(start, list.length)) {
    t1 = list.length;
    throw $.wrapException(new $.RangeError("value " + $.S(start) + " not in range 0.." + t1));
  }
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) || t1.$gt(end, list.length)) {
    t1 = list.length;
    throw $.wrapException(new $.RangeError("value " + $.S(end) + " not in range " + $.S(start) + ".." + t1));
  }
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length, otherStart, otherList, t1;
  $.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = $.$sub$n(end, start);
  if ($.$eq($length, 0))
    return;
  if (skipCount < 0)
    throw $.wrapException(new $.ArgumentError(skipCount));
  if (typeof from === "object" && from !== null && (from.constructor === Array || !!$.getInterceptor(from).$isList)) {
    otherStart = skipCount;
    otherList = from;
  } else {
    t1 = $.skip$1$ax(from, skipCount);
    otherList = t1.toList$1$growable(t1, false);
    otherStart = 0;
  }
  if (typeof $length !== "number")
    throw $.iae($length);
  t1 = $.get$length$asx(otherList);
  if (typeof t1 !== "number")
    throw $.iae(t1);
  if (otherStart + $length > t1)
    throw $.wrapException(new $.StateError("Not enough elements"));
  $.Arrays_copy(otherList, otherStart, list, start, $length);
},

Sort_insertionSort_: function(a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !$.isJsIndexable(a, a[$.dispatchPropertyName]))
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  if (typeof left !== "number")
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  if (typeof right !== "number")
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  for (i = left + 1; i <= right; ++i) {
    if (i >>> 0 !== i || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t1 = $.$gt$n(compare.call$2(a[t1], el), 0);
      } else
        t1 = false;
      t2 = a.length;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= t2)
        throw $.ioore(j0);
      t1 = a[j0];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      a[j] = t1;
      j = j0;
    }
    if (j < 0 || j >= t2)
      throw $.ioore(j);
    a[j] = el;
  }
},

Sort_insertionSort_$bailout: function(state0, a, left, right, compare) {
  var i, t1, t2, el, j, t3;
  for (i = $.$add$ns(left, 1), t1 = $.getInterceptor$asx(a); t2 = $.getInterceptor$n(i), t2.$le(i, right); i = t2.$add(i, 1)) {
    el = t1.$index(a, i);
    j = i;
    while (true) {
      t3 = $.getInterceptor$n(j);
      if (!(t3.$gt(j, left) && $.$gt$n(compare.call$2(t1.$index(a, t3.$sub(j, 1)), el), 0)))
        break;
      t1.$indexSet(a, j, t1.$index(a, t3.$sub(j, 1)));
      j = t3.$sub(j, 1);
    }
    t1.$indexSet(a, j, el);
  }
},

Sort__dualPivotQuicksort: function(a, left, right, compare) {
  var t1, sixth, t2, index1, index5, index3, index2, index4, el1, el2, el3, el4, el5, t0, less, great, pivots_are_equal, k, ak, comp, great0, less0, t3;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !$.isJsIndexable(a, a[$.dispatchPropertyName]))
    return $.Sort__dualPivotQuicksort$bailout(1, a, left, right, compare);
  t1 = $.getInterceptor$n(right);
  sixth = $.$tdiv$n($.$add$ns(t1.$sub(right, left), 1), 6);
  t2 = $.getInterceptor$ns(left);
  index1 = t2.$add(left, sixth);
  index5 = t1.$sub(right, sixth);
  index3 = $.$tdiv$n(t2.$add(left, right), 2);
  t2 = $.getInterceptor$n(index3);
  index2 = t2.$sub(index3, sixth);
  index4 = t2.$add(index3, sixth);
  t2 = a.length;
  if (index1 >>> 0 !== index1 || index1 >= t2)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 >>> 0 !== index2 || index2 >= t2)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 >>> 0 !== index3 || index3 >= t2)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 >>> 0 !== index4 || index4 >= t2)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 >>> 0 !== index5 || index5 >= t2)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.$gt$n(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1 = a.length;
  if (index1 >= t1)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left >>> 0 !== left || left >= t1)
    throw $.ioore(left);
  t2 = a[left];
  if (index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right >>> 0 !== right || right >= t1)
    throw $.ioore(right);
  t2 = a[right];
  if (index4 >= t1)
    throw $.ioore(index4);
  a[index4] = t2;
  less = left + 1;
  great = right - 1;
  pivots_are_equal = $.$eq(compare.call$2(el2, el4), 0);
  if (pivots_are_equal)
    for (k = less; k <= great; ++k) {
      if (k >>> 0 !== k || k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t1 = $.getInterceptor(comp);
      if (t1.$eq(comp, 0))
        continue;
      if (t1.$lt(comp, 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >>> 0 !== less || less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else
        for (; true;) {
          if (great >>> 0 !== great || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          t1 = $.getInterceptor$n(comp);
          if (t1.$gt(comp, 0)) {
            --great;
            continue;
          } else {
            t1 = t1.$lt(comp, 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less >>> 0 !== less || less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >>> 0 !== k || k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$lt$n(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >>> 0 !== less || less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$gt$n(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great >>> 0 !== great || great >= a.length)
            throw $.ioore(great);
          if ($.$gt$n(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less >>> 0 !== less || less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
            }
            break;
          }
        }
    }
  t1 = less - 1;
  t2 = a.length;
  if (t1 >>> 0 !== t1 || t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (left >= t2)
    throw $.ioore(left);
  a[left] = t3;
  a[t1] = el2;
  t1 = great + 1;
  if (t1 >>> 0 !== t1 || t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (right >= t2)
    throw $.ioore(right);
  a[right] = t3;
  a[t1] = el4;
  t1 = less - 2;
  if (t1 - left <= 32)
    $.Sort_insertionSort_(a, left, t1, compare);
  else
    $.Sort__dualPivotQuicksort(a, left, t1, compare);
  t1 = great + 2;
  if (right - t1 <= 32)
    $.Sort_insertionSort_(a, t1, right, compare);
  else
    $.Sort__dualPivotQuicksort(a, t1, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >>> 0 !== less || less >= a.length)
        throw $.ioore(less);
      if (!$.$eq(compare.call$2(a[less], el2), 0))
        break;
      ++less;
    }
    while (true) {
      if (great >>> 0 !== great || great >= a.length)
        throw $.ioore(great);
      if (!$.$eq(compare.call$2(a[great], el4), 0))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$eq(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$eq(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$eq(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
            }
            break;
          }
        }
    }
    if (great - less <= 32)
      $.Sort_insertionSort_(a, less, great, compare);
    else
      $.Sort__dualPivotQuicksort(a, less, great, compare);
  } else if (great - less <= 32)
    $.Sort_insertionSort_(a, less, great, compare);
  else
    $.Sort__dualPivotQuicksort(a, less, great, compare);
},

Sort__dualPivotQuicksort$bailout: function(state0, a, left, right, compare, index5, less, t1, el2, t3, el4, index1, great) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = $.getInterceptor$n(right);
      sixth = $.$tdiv$n($.$add$ns(t1.$sub(right, left), 1), 6);
      t2 = $.getInterceptor$ns(left);
      index1 = t2.$add(left, sixth);
      index5 = t1.$sub(right, sixth);
      index3 = $.$tdiv$n(t2.$add(left, right), 2);
      t3 = $.getInterceptor$n(index3);
      index2 = t3.$sub(index3, sixth);
      index4 = t3.$add(index3, sixth);
      t3 = $.getInterceptor$asx(a);
      el1 = t3.$index(a, index1);
      el2 = t3.$index(a, index2);
      el3 = t3.$index(a, index3);
      el4 = t3.$index(a, index4);
      el5 = t3.$index(a, index5);
      if ($.$gt$n(compare.call$2(el1, el2), 0)) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      if ($.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      if ($.$gt$n(compare.call$2(el1, el3), 0)) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      if ($.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if ($.$gt$n(compare.call$2(el1, el4), 0)) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      if ($.$gt$n(compare.call$2(el3, el4), 0)) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      if ($.$gt$n(compare.call$2(el2, el5), 0)) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      if ($.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if ($.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t3.$indexSet(a, index1, el1);
      t3.$indexSet(a, index3, el3);
      t3.$indexSet(a, index5, el5);
      t3.$indexSet(a, index2, t3.$index(a, left));
      t3.$indexSet(a, index4, t3.$index(a, right));
      less = t2.$add(left, 1);
    case 2:
      state0 = 0;
      great = t1.$sub(right, 1);
    case 3:
      var sixth, t2, index3, index2, index4, el1, el3, el5, t0, pivots_are_equal, k, ak, comp, t4, t5, less0, great0;
      state0 = 0;
      pivots_are_equal = $.$eq(compare.call$2(el2, el4), 0);
      if (pivots_are_equal)
        for (k = less; t2 = $.getInterceptor$n(k), t2.$le(k, great); k = t2.$add(k, 1)) {
          ak = t3.$index(a, k);
          comp = compare.call$2(ak, el2);
          t4 = $.getInterceptor(comp);
          if (t4.$eq(comp, 0))
            continue;
          if (t4.$lt(comp, 0)) {
            if (!t2.$eq(k, less)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              t3.$indexSet(a, less, ak);
            }
            less = $.$add$ns(less, 1);
          } else
            for (; true;) {
              comp = compare.call$2(t3.$index(a, great), el2);
              t4 = $.getInterceptor$n(comp);
              if (t4.$gt(comp, 0)) {
                great = $.$sub$n(great, 1);
                continue;
              } else {
                t5 = $.getInterceptor$n(great);
                if (t4.$lt(comp, 0)) {
                  t3.$indexSet(a, k, t3.$index(a, less));
                  less0 = $.$add$ns(less, 1);
                  t3.$indexSet(a, less, t3.$index(a, great));
                  great0 = t5.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t3.$indexSet(a, k, t3.$index(a, great));
                  great0 = t5.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
      else
        for (k = less; t2 = $.getInterceptor$n(k), t2.$le(k, great); k = t2.$add(k, 1)) {
          ak = t3.$index(a, k);
          if ($.$lt$n(compare.call$2(ak, el2), 0)) {
            if (!t2.$eq(k, less)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              t3.$indexSet(a, less, ak);
            }
            less = $.$add$ns(less, 1);
          } else if ($.$gt$n(compare.call$2(ak, el4), 0))
            for (; true;)
              if ($.$gt$n(compare.call$2(t3.$index(a, great), el4), 0)) {
                great = $.$sub$n(great, 1);
                if ($.$lt$n(great, k))
                  break;
                continue;
              } else {
                t4 = $.getInterceptor$n(great);
                if ($.$lt$n(compare.call$2(t3.$index(a, great), el2), 0)) {
                  t3.$indexSet(a, k, t3.$index(a, less));
                  less0 = $.$add$ns(less, 1);
                  t3.$indexSet(a, less, t3.$index(a, great));
                  great0 = t4.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                } else {
                  t3.$indexSet(a, k, t3.$index(a, great));
                  great0 = t4.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                }
                break;
              }
        }
      t2 = $.getInterceptor$n(less);
      t3.$indexSet(a, left, t3.$index(a, t2.$sub(less, 1)));
      t3.$indexSet(a, t2.$sub(less, 1), el2);
      t4 = $.getInterceptor$ns(great);
      t3.$indexSet(a, right, t3.$index(a, t4.$add(great, 1)));
      t3.$indexSet(a, t4.$add(great, 1), el4);
      t5 = t2.$sub(less, 2);
      if ($.$le$n($.$sub$n(t5, left), 32))
        $.Sort_insertionSort_(a, left, t5, compare);
      else
        $.Sort__dualPivotQuicksort(a, left, t5, compare);
      t5 = t4.$add(great, 2);
      if ($.$le$n(t1.$sub(right, t5), 32))
        $.Sort_insertionSort_(a, t5, right, compare);
      else
        $.Sort__dualPivotQuicksort(a, t5, right, compare);
      if (pivots_are_equal)
        return;
      if (t2.$lt(less, index1) && t4.$gt(great, index5)) {
        for (; $.$eq(compare.call$2(t3.$index(a, less), el2), 0);)
          less = $.$add$ns(less, 1);
        for (; $.$eq(compare.call$2(t3.$index(a, great), el4), 0);)
          great = $.$sub$n(great, 1);
        for (k = less; t1 = $.getInterceptor$n(k), t1.$le(k, great); k = t1.$add(k, 1)) {
          ak = t3.$index(a, k);
          if ($.$eq(compare.call$2(ak, el2), 0)) {
            if (!t1.$eq(k, less)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              t3.$indexSet(a, less, ak);
            }
            less = $.$add$ns(less, 1);
          } else if ($.$eq(compare.call$2(ak, el4), 0))
            for (; true;)
              if ($.$eq(compare.call$2(t3.$index(a, great), el4), 0)) {
                great = $.$sub$n(great, 1);
                if ($.$lt$n(great, k))
                  break;
                continue;
              } else {
                t2 = $.getInterceptor$n(great);
                if ($.$lt$n(compare.call$2(t3.$index(a, great), el2), 0)) {
                  t3.$indexSet(a, k, t3.$index(a, less));
                  less0 = $.$add$ns(less, 1);
                  t3.$indexSet(a, less, t3.$index(a, great));
                  great0 = t2.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                } else {
                  t3.$indexSet(a, k, t3.$index(a, great));
                  great0 = t2.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                }
                break;
              }
        }
        if ($.$le$n($.$sub$n(great, less), 32))
          $.Sort_insertionSort_(a, less, great, compare);
        else
          $.Sort__dualPivotQuicksort(a, less, great, compare);
      } else if ($.$le$n(t4.$sub(great, less), 32))
        $.Sort_insertionSort_(a, less, great, compare);
      else
        $.Sort__dualPivotQuicksort(a, less, great, compare);
  }
},

ToString__emitValue: function(i, result, visiting) {
  var t1, isList, t2, first, e;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, i);
  isList = typeof i === "object" && i !== null && (i.constructor === Array || !!$.getInterceptor(i).$isList);
  result.write$1(isList ? "[" : "{");
  for (t2 = $.get$iterator$ax(i), first = true; t2.moveNext$0() === true; first = false) {
    e = t2.get$current();
    if (!first)
      result.write$1(", ");
    $.ToString__emitObject(e, result, visiting);
  }
  result.write$1(isList ? "]" : "}");
  t1.removeLast$0(visiting);
},

ToString__emitObject: function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isIterable))
    if ($.ToString__containsRef(visiting, o))
      result.write$1(typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isList) ? "[...]" : "{...}");
    else
      $.ToString__emitValue(o, result, visiting);
  else if (typeof o === "object" && o !== null && !!$.getInterceptor(o).$isMap)
    if ($.ToString__containsRef(visiting, o))
      result.write$1("{...}");
    else
      $.ToString__emitPair(o, result, visiting);
  else
    result.write$1(o);
},

ToString__containsRef: function(i, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(i); t1.moveNext$0() === true;)
    if (t1.get$current() === ref)
      return true;
  return false;
},

ToString__emitPair: function(m, result, visiting) {
  var t1, t2;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  result.write$1("{");
  t1.first_0 = true;
  m.forEach$1(m, new $.ToString__emitPair_closure(t1, result, visiting));
  result.write$1("}");
  t2.removeLast$0(visiting);
}}],
["dart.async", "dart:async", , {
_Completer: {"": "Object;",
  completeError$2: function(error, stackTrace) {
    var t1, t2;
    if (this._isComplete)
      throw $.wrapException(new $.StateError("Future already completed"));
    this._isComplete = true;
    t1 = $.get$_Zone__current();
    t2 = this.future._zone;
    if ($.$eq(t2.get$_errorZone(), t1.get$_errorZone())) {
      t2._openCallbacks = t2._openCallbacks - 1;
      if (t2._isExecutingCallback !== true && t2._openCallbacks === 0 && t2._children.length === 0)
        ;
      this._setFutureError$1(error);
    } else
      $.get$_Zone__current().handleUncaughtError$1(error);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  }
},

_AsyncCompleter: {"": "_Completer;future,_isComplete",
  _setFutureValue$1: function(value) {
    $.get$_Zone__current().runAsync$1(new $._AsyncCompleter__setFutureValue_closure(value, this.future));
  },
  _setFutureError$1: function(error) {
    $.get$_Zone__current().runAsync$1(new $._AsyncCompleter__setFutureError_closure(error, this.future));
  }
},

_AsyncCompleter__setFutureValue_closure: {"": "Closure;value_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.value_0);
  }
},

_AsyncCompleter__setFutureError_closure: {"": "Closure;error_0,future_1",
  call$0: function() {
    this.future_1._setError$1(this.error_0);
  }
},

_FutureListenerWrapper: {"": "Object;future,_nextListener@",
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  },
  _inSameErrorZone$1: function(otherZone) {
    return $.$eq(this.future._zone.get$_errorZone(), otherZone.get$_errorZone());
  }
},

_ErrorZoneBoundaryListener: {"": "Object;_nextListener@,_listener",
  _inSameErrorZone$1: function(otherZone) {
    throw $.wrapException(new $.UnsupportedError("A Zone boundary doesn't support the inSameErrorZone test."));
  },
  _sendValue$1: function(value) {
    this._listener._sendValue$1(value);
  },
  _sendError$1: function(error) {
    $.get$_Zone__current().handleUncaughtError$1(error);
  }
},

_FutureImpl: {"": "Object;_state@,_zone<,_resultOrListeners<",
  get$_isChained: function() {
    return (this._state & 1) !== 0;
  },
  then$2$onError: function(f, onError) {
    var t1, t2;
    if (onError == null) {
      t1 = new $._ThenFuture(f, null, 0, $.get$_Zone__current().fork$0(), null);
      t2 = t1._zone;
      t2._openCallbacks = t2._openCallbacks + 1;
      t1._subscribeTo$1(this);
      return t1;
    }
    t1 = new $._SubscribeFuture(onError, f, null, 0, $.get$_Zone__current().fork$0(), null);
    t2 = t1._zone;
    t2._openCallbacks = t2._openCallbacks + 1;
    t1._subscribeTo$1(this);
    return t1;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1, t2;
    t1 = new $._CatchErrorFuture(test, f, null, 0, $.get$_Zone__current().fork$0(), null);
    t2 = t1._zone;
    t2._openCallbacks = t2._openCallbacks + 1;
    t1._subscribeTo$1(this);
    return t1;
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _inSameErrorZone$1: function(otherZone) {
    return $.$eq(this._zone.get$_errorZone(), otherZone.get$_errorZone());
  },
  _setValue$1: function(value) {
    var t1, listeners, listeners0;
    t1 = this._state;
    if (t1 >= 4)
      throw $.wrapException(new $.StateError("Future already completed"));
    listeners = (t1 & 1) !== 0 ? null : this._removeListeners$0();
    this._state = 4;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_setValue: function() {
    return new $.BoundClosure$1(this, "_setValue$1", null);
  },
  _setError$1: function(error) {
    var t1, hasListeners, listeners, listeners0;
    t1 = this._state;
    if (t1 >= 4)
      throw $.wrapException(new $.StateError("Future already completed"));
    if ((t1 & 1) !== 0) {
      hasListeners = t1 === 1;
      listeners = null;
    } else {
      listeners = this._removeListeners$0();
      hasListeners = listeners != null;
    }
    this._state = 6;
    this._resultOrListeners = error;
    if (!hasListeners) {
      this._scheduleUnhandledError$0();
      return;
    }
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
    }
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1", null);
  },
  _scheduleUnhandledError$0: function() {
    this._state = 14;
    $.get$_Zone__current().runAsync$1(new $._FutureImpl__scheduleUnhandledError_closure(this));
  },
  _addListener$1: function(listener) {
    var t1, t2, future;
    t1 = {};
    t1.listener_0 = listener;
    if (t1.listener_0._inSameErrorZone$1(this._zone) !== true)
      t1.listener_0 = new $._ErrorZoneBoundaryListener(null, t1.listener_0);
    t2 = this._state;
    if ((t2 & 1) !== 0) {
      this._state = 1;
      future = this._resultOrListeners;
      if (future.get$_isChained()) {
        future = future.get$_chainSource();
        this._resultOrListeners = future;
      }
      future._addListener$1(t1.listener_0);
      return;
    }
    if (t2 >= 4) {
      this._state = (t2 & 4294967287) >>> 0;
      $.get$_Zone__current().runAsync$1(new $._FutureImpl__addListener_closure(t1, this));
    } else {
      t1.listener_0.set$_nextListener(this._resultOrListeners);
      this._resultOrListeners = t1.listener_0;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    var t1 = this._state;
    if (t1 < 4)
      future._chainFromFuture$1(this);
    else if (t1 === 4)
      future._setValue$1(this._resultOrListeners);
    else {
      this._state = (t1 & 4294967287) >>> 0;
      future._setError$1(this._resultOrListeners);
    }
  },
  get$_chainSource: function() {
    var future = this._resultOrListeners;
    if (future.get$_isChained()) {
      future = future.get$_chainSource();
      this._resultOrListeners = future;
    }
    return future;
  },
  _chainFromFuture$1: function(resultSource) {
    var future, cursor, cursor0, cursor1;
    if ((resultSource._state & 1) !== 0) {
      future = resultSource._resultOrListeners;
      if (future.get$_isChained()) {
        future = future.get$_chainSource();
        resultSource._resultOrListeners = future;
      }
      resultSource = future;
    }
    if (this === resultSource) {
      this._setError$1(new $.StateError("Cyclic future dependency."));
      return;
    }
    cursor = this._removeListeners$0();
    for (cursor0 = cursor; cursor0 != null; cursor0 = cursor1) {
      cursor1 = cursor0.get$_nextListener();
      cursor0.set$_nextListener(null);
      resultSource._addListener$1(cursor0);
    }
    resultSource._addListener$1(new $._FutureListenerWrapper(this, null));
    this._resultOrListeners = resultSource;
    this._state = cursor != null ? 1 : 3;
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!$.getInterceptor(result).$isFuture)
      if (!!$.getInterceptor(result).$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    else
      this._setValue$1(result);
  },
  $is_FutureImpl: true,
  $isFuture: true
},

_FutureImpl__FutureImpl$wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$1(error);
    }
  }
},

_FutureImpl__FutureImpl$wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = value;
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0)) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2.complete$1;
      if (t2._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t2._isComplete = true;
      t3 = t2.future._zone;
      t3._openCallbacks = t3._openCallbacks - 1;
      if (t3._isExecutingCallback !== true && t3._openCallbacks === 0 && t3._children.length === 0)
        ;
      t2._setFutureValue$1(t1);
    }
  }
},

_FutureImpl__scheduleUnhandledError_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2, error;
    t1 = this.this_0;
    t2 = t1.get$_state();
    if (t2 >= 8) {
      t1.set$_state((t2 & 4294967287) >>> 0);
      error = t1.get$_resultOrListeners();
      t1.get$_zone().handleUncaughtError$1(error);
    }
  }
},

_FutureImpl__addListener_closure: {"": "Closure;box_0,this_1",
  call$0: function() {
    var t1, t2, value;
    t1 = this.this_1;
    t2 = t1.get$_state();
    value = t1.get$_resultOrListeners();
    t1 = this.box_0;
    if (t2 === 4)
      t1.listener_0._sendValue$1(value);
    else
      t1.listener_0._sendError$1(value);
  }
},

_TransformFuture: {"": "_FutureImpl;_nextListener@",
  _sendValue$1: function(value) {
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(new $._TransformFuture__sendValue_closure(this, value), false);
  },
  _sendError$1: function(error) {
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(new $._TransformFuture__sendError_closure(this, error), false);
  },
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
},

_TransformFuture__sendValue_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    return this.this_0._zonedSendValue$1(this.value_1);
  }
},

_TransformFuture__sendError_closure: {"": "Closure;this_0,error_1",
  call$0: function() {
    return this.this_0._zonedSendError$1(this.error_1);
  }
},

_ThenFuture: {"": "_TransformFuture;_onValue,_nextListener,_state,_zone,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _zonedSendValue$1: function(value) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  _zonedSendError$1: function(error) {
    this._setError$1(error);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
},

_CatchErrorFuture: {"": "_TransformFuture;_test,_onError,_nextListener,_state,_zone,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _zonedSendValue$1: function(value) {
    this._setValue$1(value);
  },
  _zonedSendError$1: function(error) {
    var matchesTest, e, s, result, e0, s0, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e0 = t1;
      s0 = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e0, s0));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: null,
  $asFuture: null
},

_SubscribeFuture: {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_zone,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _zonedSendError$1: function(error) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
},

_WhenFuture: {"": "_TransformFuture;_action,_nextListener,_state,_zone,_resultOrListeners",
  _action$0: function() {
    return this._action.call$0();
  },
  _zonedSendValue$1: function(value) {
    var result, resultFuture, e, s, t1, exception;
    try {
      result = this._action$0();
      t1 = result;
      if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__zonedSendValue_closure(this, value), this.get$_setError());
        return;
      }
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setValue$1(value);
  },
  _zonedSendError$1: function(error) {
    var t1, result, resultFuture, e, s, t2, exception;
    t1 = {};
    t1.error_0 = error;
    try {
      result = this._action$0();
      t2 = result;
      if (typeof t2 === "object" && t2 !== null && !!$.getInterceptor(t2).$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__zonedSendError_closure(t1, this), this.get$_setError());
        return;
      }
    } catch (exception) {
      t2 = $.unwrapException(exception);
      e = t2;
      s = $.getTraceFromException(exception);
      t1.error_0 = $._asyncError(e, s);
    }

    this._setError$1(t1.error_0);
  },
  $as_FutureImpl: null,
  $asFuture: null
},

_WhenFuture__zonedSendValue_closure: {"": "Closure;this_0,value_1",
  call$1: function(_) {
    this.this_0._setValue$1(this.value_1);
  }
},

_WhenFuture__zonedSendError_closure: {"": "Closure;box_0,this_1",
  call$1: function(_) {
    this.this_1._setError$1(this.box_0.error_0);
  }
},

Stream: {"": "Object;",
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = new $._FutureImpl(0, $.get$_Zone__current().fork$0(), null);
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_length_closure(t1), true, new $.Stream_length_closure0(t1, future), future.get$_setError());
    return future;
  },
  skip$1: function(_, count) {
    if (typeof count !== "number" || Math.floor(count) !== count || count < 0)
      $.throwExpression(new $.ArgumentError(count));
    return new $._SkipStream(count, this);
  },
  elementAt$1: function(_, index) {
    var t1, t2, future;
    t1 = {};
    t1.index_0 = index;
    t2 = t1.index_0;
    if (typeof t2 !== "number" || Math.floor(t2) !== t2 || $.$lt$n(t2, 0))
      throw $.wrapException(new $.ArgumentError(t2));
    future = new $._FutureImpl(0, $.get$_Zone__current().fork$0(), null);
    t1.subscription_1 = null;
    t1.subscription_1 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_elementAt_closure(t1, future), true, new $.Stream_elementAt_closure0(future), future.get$_setError());
    return future;
  }
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$add$ns(t1.count_0, 1);
  }
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.box_0.count_0);
  }
},

Stream_elementAt_closure: {"": "Closure;box_0,future_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.index_0;
    t3 = $.getInterceptor(t2);
    if (t3.$eq(t2, 0)) {
      t1.subscription_1.cancel$0();
      this.future_1._setValue$1(value);
      return;
    }
    t1.index_0 = t3.$sub(t2, 1);
  }
},

Stream_elementAt_closure0: {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setError$1(new $.StateError("Not enough elements for elementAt"));
  }
},

StreamSubscription: {"": "Object;"},

EventSink: {"": "Object;"},

_BufferingStreamSubscription: {"": "Object;_onData,_onError,_onDone,_zone<,_state@,_pending",
  _onData$1: function(arg0) {
    return this._onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  pause$1: function(_, resumeSignal) {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 + 64 | 4) >>> 0;
    if (!(t1 >= 64) && this._pending != null) {
      t2 = this._pending;
      t2.cancelSchedule$0;
      if (t2._state === 1)
        t2._state = 3;
    }
    if ((t1 & 4) === 0 && (this._state & 16) === 0)
      this._guardCallback$1(this.get$_onPause());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 >= 64) {
      this._state = t1 - 64;
      t1 = this._state;
      if (!(t1 >= 64)) {
        if ((t1 & 32) !== 0) {
          t2 = this._pending;
          t2.get$isEmpty;
          t2 = t2.lastPendingEvent != null;
        } else
          t2 = false;
        if (t2)
          this._pending.schedule$1(this);
        else {
          this._state = (t1 & 4294967291) >>> 0;
          if ((this._state & 16) === 0)
            this._guardCallback$1(this.get$_onResume());
        }
      }
    }
  },
  cancel$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 | 8) >>> 0;
    this._zone.cancelCallbackExpectation$0();
    if ((this._state & 32) !== 0) {
      t1 = this._pending;
      t1.cancelSchedule$0;
      if (t1._state === 1)
        t1._state = 3;
    }
    t1 = this._state;
    if ((t1 & 16) === 0) {
      this._state = (t1 | 16) >>> 0;
      this._onCancel$0();
      this._pending = null;
      this._state = (this._state & 4294967279) >>> 0;
    }
  },
  _liblib2$_add$1: function(data) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 16)
      this._sendData$1(data);
    else
      this._addPending$1(new $._DelayedData(data, null));
  },
  _addError$1: function(error) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 16)
      this._sendError$1(error);
    else
      this._addPending$1(new $._DelayedError(error, null));
  },
  _close$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 | 2) >>> 0;
    if (this._state < 16)
      this._sendDone$0();
    else
      this._addPending$1($.C__DelayedDone);
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new $.BoundClosure$0(this, "_onPause$0", null);
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new $.BoundClosure$0(this, "_onResume$0", null);
  },
  _onCancel$0: function() {
  },
  _addPending$1: function($event) {
    var pending, t1;
    pending = this._pending;
    if (pending == null) {
      pending = new $._StreamImplEvents(null, null, 0);
      this._pending = pending;
    }
    pending.add$1;
    t1 = pending.lastPendingEvent;
    if (t1 == null) {
      pending.lastPendingEvent = $event;
      pending.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      pending.lastPendingEvent = $event;
    }
    t1 = this._state;
    if ((t1 & 32) === 0) {
      this._state = (t1 | 32) >>> 0;
      if (!(this._state >= 64))
        this._pending.schedule$1(this);
    }
  },
  _sendData$1: function(data) {
    var t1 = this._state;
    this._state = (t1 | 16) >>> 0;
    this._zone.executePeriodicCallbackGuarded$1(new $._BufferingStreamSubscription__sendData_closure(this, data));
    this._state = (this._state & 4294967279) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _sendError$1: function(error) {
    var t1, t2, t3;
    t1 = this._state;
    this._state = (t1 | 16) >>> 0;
    t2 = this._zone;
    if (!t2.inSameErrorZone$1($.get$_Zone__current()))
      $.get$_Zone__current().handleUncaughtError$1(error);
    else
      t2.executePeriodicCallbackGuarded$1(new $._BufferingStreamSubscription__sendError_closure(this, error));
    this._state = (this._state & 4294967279) >>> 0;
    t3 = this._state;
    if ((t3 & 1) !== 0) {
      this._state = (t3 | 8) >>> 0;
      t2.cancelCallbackExpectation$0();
      if ((this._state & 32) !== 0) {
        t2 = this._pending;
        t2.cancelSchedule$0;
        if (t2._state === 1)
          t2._state = 3;
      }
    }
    this._checkState$1((t1 & 4) !== 0);
  },
  _sendDone$0: function() {
    this._state = (this._state | 26) >>> 0;
    this._zone.executeCallbackGuarded$1(this._onDone);
    this._onCancel$0();
    this._state = (this._state & 4294967279) >>> 0;
  },
  _guardCallback$1: function(callback) {
    var t1 = this._state;
    this._state = (t1 | 16) >>> 0;
    callback.call$0();
    this._state = (this._state & 4294967279) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _checkState$1: function(wasInputPaused) {
    var t1, t2, isInputPaused;
    t1 = this._state;
    if ((t1 & 32) !== 0) {
      t2 = this._pending;
      t2.get$isEmpty;
      t2 = t2.lastPendingEvent == null;
    } else
      t2 = false;
    if (t2) {
      this._state = (t1 & 4294967263) >>> 0;
      t1 = this._state;
      if ((t1 & 4) !== 0)
        if (!(t1 >= 64)) {
          t2 = this._pending;
          if (t2 != null) {
            t2.get$isEmpty;
            t2 = t2.lastPendingEvent == null;
          } else
            t2 = true;
        } else
          t2 = false;
      else
        t2 = false;
      if (t2)
        this._state = (t1 & 4294967291) >>> 0;
    }
    for (; true; wasInputPaused = isInputPaused) {
      t1 = this._state;
      if ((t1 & 8) !== 0) {
        this._onCancel$0();
        this._pending = null;
        return;
      }
      isInputPaused = (t1 & 4) !== 0;
      if (wasInputPaused === isInputPaused)
        break;
      this._state = (t1 ^ 16) >>> 0;
      if (isInputPaused)
        this._onPause$0();
      else
        this._onResume$0();
      this._state = (this._state & 4294967279) >>> 0;
    }
    t1 = this._state;
    if ((t1 & 32) !== 0 && !(t1 >= 64))
      this._pending.schedule$1(this);
  },
  _BufferingStreamSubscription$4: function(_onData, _onError, _onDone, cancelOnError) {
    this._zone.expectCallback$0();
  }
},

_BufferingStreamSubscription__sendData_closure: {"": "Closure;this_0,data_1",
  call$0: function() {
    return this.this_0._onData$1(this.data_1);
  }
},

_BufferingStreamSubscription__sendError_closure: {"": "Closure;this_0,error_1",
  call$0: function() {
    return this.this_0._onError$1(this.error_1);
  }
},

_DelayedEvent: {"": "Object;next@"},

_DelayedData: {"": "_DelayedEvent;value,next",
  perform$1: function(dispatch) {
    dispatch._sendData$1(this.value);
  }
},

_DelayedError: {"": "_DelayedEvent;error,next",
  perform$1: function(dispatch) {
    dispatch._sendError$1(this.error);
  }
},

_DelayedDone: {"": "Object;",
  perform$1: function(dispatch) {
    dispatch._sendDone$0();
  },
  get$next: function() {
    return;
  },
  set$next: function(_) {
    throw $.wrapException(new $.StateError("No events after a done."));
  }
},

_PendingEvents: {"": "Object;_state@",
  schedule$1: function(dispatch) {
    var t1 = this._state;
    if (t1 === 1)
      return;
    if (t1 >= 1) {
      this._state = 1;
      return;
    }
    $.get$_Zone__current().runAsync$1(new $._PendingEvents_schedule_closure(this, dispatch));
    this._state = 1;
  }
},

_PendingEvents_schedule_closure: {"": "Closure;this_0,dispatch_1",
  call$0: function() {
    var t1, oldState;
    t1 = this.this_0;
    oldState = t1.get$_state();
    t1.set$_state(0);
    if (oldState === 3)
      return;
    t1.handleNext$1(this.dispatch_1);
  }
},

_StreamImplEvents: {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(dispatch) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(dispatch);
  }
},

_ForwardingStream: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1, t2, t3;
    cancelOnError = true === cancelOnError;
    t1 = $.get$_Zone__current();
    t2 = cancelOnError ? 1 : 0;
    t2 = new $._ForwardingStreamSubscription(this, null, onData, onError, onDone, t1, t2, null);
    t2._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError);
    t1 = t2.get$_handleData();
    t3 = t2.get$_handleError();
    t2._subscription = t2._stream._source.listen$3$onDone$onError(t1, t2.get$_handleDone(), t3);
    return t2;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _handleData$2: function(data, sink) {
    sink._liblib2$_add$1(data);
  }
},

_ForwardingStreamSubscription: {"": "_BufferingStreamSubscription;_stream,_subscription,_onData,_onError,_onDone,_zone,_state,_pending",
  _liblib2$_add$1: function(data) {
    if ((this._state & 2) !== 0)
      return;
    $._BufferingStreamSubscription.prototype._liblib2$_add$1.call(this, data);
  },
  _addError$1: function(error) {
    if ((this._state & 2) !== 0)
      return;
    $._BufferingStreamSubscription.prototype._addError$1.call(this, error);
  },
  _onPause$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.pause$0(t1);
  },
  get$_onPause: function() {
    return new $.BoundClosure$0(this, "_onPause$0", null);
  },
  _onResume$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.resume$0();
  },
  get$_onResume: function() {
    return new $.BoundClosure$0(this, "_onResume$0", null);
  },
  _onCancel$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      this._subscription = null;
      t1.cancel$0();
    }
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new $.BoundClosure$1(this, "_handleData$1", null);
  },
  _handleError$1: function(error) {
    this._addError$1(error);
  },
  get$_handleError: function() {
    return new $.BoundClosure$1(this, "_handleError$1", null);
  },
  _handleDone$0: function() {
    this._subscription = null;
    this._close$0();
  },
  get$_handleDone: function() {
    return new $.BoundClosure$0(this, "_handleDone$0", null);
  }
},

_WhereStream: {"": "_ForwardingStream;_test,_source",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var satisfies, e, s, exception, t1;
    satisfies = null;
    try {
      satisfies = this._test$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._addError$1($._asyncError(e, s));
      return;
    }

    if (satisfies === true)
      sink._liblib2$_add$1(inputEvent);
  }
},

_MapStream: {"": "_ForwardingStream;_transform,_source",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._addError$1($._asyncError(e, s));
      return;
    }

    sink._liblib2$_add$1(outputEvent);
  }
},

_SkipStream: {"": "_ForwardingStream;_remaining,_source",
  _handleData$2: function(inputEvent, sink) {
    var t1, t2;
    t1 = this._remaining;
    t2 = $.getInterceptor$n(t1);
    if (t2.$gt(t1, 0)) {
      this._remaining = t2.$sub(t1, 1);
      return;
    }
    return sink._liblib2$_add$1(inputEvent);
  }
},

_ZoneBase: {"": "Object;_parentZone,_children,_openCallbacks@,_isExecutingCallback",
  get$_errorZone: function() {
    return this._parentZone.get$_errorZone();
  },
  handleUncaughtError$1: function(error) {
    this._parentZone.handleUncaughtError$1(error);
  },
  inSameErrorZone$1: function(otherZone) {
    return $.$eq(this.get$_errorZone(), otherZone.get$_errorZone());
  },
  fork$0: function() {
    return this;
  },
  expectCallback$0: function() {
    var t1 = this._openCallbacks;
    this._openCallbacks = t1 + 1;
    return t1;
  },
  cancelCallbackExpectation$0: function() {
    this._openCallbacks = this._openCallbacks - 1;
    if (this._isExecutingCallback !== true && this._openCallbacks === 0 && this._children.length === 0)
      ;
  },
  executeCallbackGuarded$1: function(fun) {
    this._openCallbacks = this._openCallbacks - 1;
    this._runInZone$2(fun, true);
  },
  executePeriodicCallbackGuarded$1: function(fun) {
    this._runInZone$2(fun, true);
  },
  _runInZone$2: function(fun, handleUncaught) {
    var oldZone, oldIsExecuting, e, s, t1, exception;
    if ($.get$_Zone__current() === this && handleUncaught !== true && this._isExecutingCallback === true)
      return fun.call$0();
    oldZone = $.get$_Zone__current();
    $._Zone__current = this;
    oldIsExecuting = this._isExecutingCallback;
    this._isExecutingCallback = true;
    try {
      try {
        t1 = fun.call$0();
        return t1;
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        if (handleUncaught === true)
          this.handleUncaughtError$1($._asyncError(e, s));
        else
          throw exception;
      }

    } finally {
      this._isExecutingCallback = oldIsExecuting;
      $._Zone__current = oldZone;
      if (this._isExecutingCallback !== true)
        if (this._openCallbacks === 0)
          t1 = this._children.length === 0;
        else
          t1 = false;
      else
        t1 = false;
      if (t1)
        ;
    }
  },
  runAsync$1: function(fun) {
    var milliseconds;
    this._openCallbacks = this._openCallbacks + 1;
    $.get$_asyncCallbacks()._add$1(new $._ZoneBase_runAsync_closure(this, fun));
    if (!$._callbacksAreEnqueued) {
      milliseconds = $.JSNumber_methods.$tdiv($.Duration_0._duration, 1000);
      $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  },
  createTimer$2: function(duration, callback) {
    var t1, t2, milliseconds;
    t1 = new $._ZoneTimer(this, callback, null, false);
    t2 = t1._zone;
    t2._openCallbacks = t2._openCallbacks + 1;
    t2 = t1.get$run();
    milliseconds = $.JSNumber_methods.$tdiv(duration._duration, 1000);
    t1._timer = $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, t2);
    return t1;
  }
},

_ZoneBase_runAsync_closure: {"": "Closure;this_0,fun_1",
  call$0: function() {
    var t1 = this.this_0;
    t1.set$_openCallbacks(t1.get$_openCallbacks() - 1);
    t1._runInZone$2(this.fun_1, true);
  }
},

_DefaultZone: {"": "_ZoneBase;_parentZone,_children,_openCallbacks,_isExecutingCallback",
  get$_errorZone: function() {
    return this;
  },
  handleUncaughtError$1: function(error) {
    var milliseconds;
    $.get$_asyncCallbacks()._add$1(new $._DefaultZone_handleUncaughtError_closure(error));
    if (!$._callbacksAreEnqueued) {
      milliseconds = $.JSNumber_methods.$tdiv($.Duration_0._duration, 1000);
      $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  }
},

_DefaultZone_handleUncaughtError_closure: {"": "Closure;error_0",
  call$0: function() {
    var t1, trace;
    t1 = this.error_0;
    $.Primitives_printString("Uncaught Error: " + $.S(t1));
    trace = $.getAttachedStackTrace(t1);
    $._attachStackTrace(t1, null);
    if (trace != null)
      $.Primitives_printString("Stack Trace:\n" + $.S(trace) + "\n");
    throw $.wrapException(t1);
  }
},

_ZoneTimer: {"": "Object;_zone<,_liblib2$_callback,_timer,_isDone",
  run$0: function() {
    this._isDone = true;
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(this._liblib2$_callback, true);
  },
  get$run: function() {
    return new $.BoundClosure$0(this, "run$0", null);
  }
},

_attachStackTrace: function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
},

getAttachedStackTrace: function(o) {
  var t1, values;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  values = $.Primitives_getProperty(o, "expando$values");
  return values == null ? null : $.Primitives_getProperty(values, t1._getKey$0());
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      $.unwrapException(exception);
      milliseconds = $.JSNumber_methods.$tdiv($.Duration_0._duration, 1000);
      $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_FutureImpl__FutureImpl$wait: function(futures) {
  var t1, t2, t3, future, pos, completer;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = new $.ListIterator(futures, futures.length, 0, null); t3.moveNext$0();) {
    future = t3._liblib$_current;
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    future.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_closure(t1, pos));
  }
  t2 = t1.remaining_2;
  if ($.$eq(t2, 0)) {
    t1 = new $._FutureImpl(0, $.get$_Zone__current().fork$0(), null);
    t1._state = 4;
    t1._resultOrListeners = $.List_empty;
    return t1;
  }
  t1.values_1 = $.List_List(t2);
  completer = new $._AsyncCompleter(new $._FutureImpl(0, $.get$_Zone__current().fork$0(), null), false);
  t2 = completer.future._zone;
  t2._openCallbacks = t2._openCallbacks + 1;
  t1.completer_0 = completer;
  return t1.completer_0.future;
},

_nullDataHandler: function(value) {
},

_nullErrorHandler: function(error) {
  $.get$_Zone__current().handleUncaughtError$1(error);
},

_nullDoneHandler: function() {
},

_asyncError: function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if ($.getAttachedStackTrace(error) != null)
    return error;
  $._attachStackTrace(error, stackTrace);
  return error;
}}],
["dart.collection", "dart:collection", , {
HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  }
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib0$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return new $.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
  },
  $asIterable: null
},

HashMapKeyIterator: {"": "Object;_map,_keys,_offset,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else if (offset >= keys.length) {
      this._liblib0$_current = null;
      return false;
    } else {
      this._liblib0$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  }
},

LinkedHashMapCell: {"": "Object;_key<,_value@,_liblib0$_next@,_previous"},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib0$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    t1 = new $.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
    t1._cell = t1._map._first;
    return t1;
  },
  $asIterable: null
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib0$_current = null;
        return false;
      } else {
        this._liblib0$_current = t1.get$_key();
        this._cell = this._cell.get$_liblib0$_next();
        return true;
      }
    }
  }
},

HashMap: {"": "Object;_liblib0$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$keys: function() {
    return new $.HashMapKeyIterable(this);
  },
  get$values: function(_) {
    return new $.MappedIterable(new $.HashMapKeyIterable(this), new $.HashMap_values_closure(this));
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashMap__findBucketIndex(rest[$.get$hashCode$(key) & 0x3ffffff], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, t1, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      if (strings[key] == null) {
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      }
      if (value == null)
        strings[key] = strings;
      else
        strings[key] = value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      if (nums[key] == null) {
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      }
      if (value == null)
        nums[key] = nums;
      else
        nums[key] = value;
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [key, value];
        if (t1 == null)
          rest[hash] = rest;
        else
          rest[hash] = t1;
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      } else {
        index = $.HashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._liblib0$_length = this._liblib0$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      this._liblib0$_length = this._liblib0$_length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
  },
  toString$0: function(_) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitPair(this, result, $.List_List($));
    return result._contents;
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = $.List_List(this._liblib0$_length);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _removeHashTableEntry$2: function(table, key) {
    var entry, value;
    if (table != null && table[key] != null) {
      entry = table[key];
      value = entry === table ? null : entry;
      delete table[key];
      this._liblib0$_length = this._liblib0$_length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  $isMap: true
},

IterableBase: {"": "Object;",
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  skip$1: function(_, n) {
    var t1, t2;
    t1 = new $.SkipIterable(this, n);
    t2 = t1._skipCount;
    if (typeof t2 !== "number" || Math.floor(t2) !== t2 || $.$lt$n(t2, 0))
      $.throwExpression(new $.ArgumentError(t2));
    return t1;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (typeof index !== "number")
      return this.elementAt$1$bailout(1, index);
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw $.wrapException(new $.RangeError("value " + $.S(index)));
  },
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, element, t2;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      t2 = $.getInterceptor(remaining);
      if (t2.$eq(remaining, 0))
        return element;
      remaining = t2.$sub(remaining, 1);
    }
    throw $.wrapException(new $.RangeError("value " + $.S(index)));
  },
  $isIterable: true,
  $asIterable: null
},

LinkedHashMap: {"": "Object;_liblib0$_length,_strings,_nums,_rest,_first,_last,_modifications",
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = $.LinkedHashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(), cell.get$_value());
      if (modifications !== this._modifications)
        throw $.wrapException(new $.ConcurrentModificationError(this));
      cell = cell.get$_liblib0$_next();
    }
  },
  get$keys: function() {
    return new $.LinkedHashMapKeyIterable(this);
  },
  get$values: function(_) {
    return new $.MappedIterable(new $.LinkedHashMapKeyIterable(this), new $.LinkedHashMap_values_closure(this));
  },
  get$length: function(_) {
    return this._liblib0$_length;
  },
  toString$0: function(_) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitPair(this, result, $.List_List($));
    return result._contents;
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_value(value);
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new $.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_liblib0$_next(cell);
      this._last = cell;
    }
    this._liblib0$_length = this._liblib0$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  $isMap: true
},

ListBase: {"": "Object+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, this.get$length(receiver), 0, null);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.forEach$1$bailout(1, action, receiver);
    $length = receiver.length;
    for (i = 0; i < $length; ++i) {
      if (i >= receiver.length)
        throw $.ioore(i);
      action.call$1(receiver[i]);
      if ($length !== receiver.length)
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
  },
  forEach$1$bailout: function(state0, action, receiver) {
    var $length, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      throw $.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
  },
  get$last: function(receiver) {
    if ($.$eq(this.get$length(receiver), 0))
      throw $.wrapException(new $.StateError("No elements"));
    return this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
  },
  where$1: function(receiver, test) {
    return new $.WhereIterable(receiver, test);
  },
  skip$1: function(receiver, count) {
    return new $.SubListIterable(receiver, count, null);
  },
  toList$1$growable: function(receiver, growable) {
    var result, t1, t2, i, t3;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.toList$1$growable$bailout(1, growable, receiver);
    if (growable) {
      result = $.List_List($);
      $.JSArray_methods.set$length(result, receiver.length);
    } else
      result = $.List_List(receiver.length);
    for (t1 = receiver.length, t2 = result.length, i = 0; i < t1; ++i) {
      t3 = receiver[i];
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  },
  toList$1$growable$bailout: function(state0, growable, receiver) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($);
      $.JSArray_methods.set$length(result, this.get$length(receiver));
    } else
      result = $.List_List(this.get$length(receiver));
    i = 0;
    while (true) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      if (!(i < t1))
        break;
      t1 = this.$index(receiver, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
      ++i;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    this.set$length(receiver, $.$add$ns(t1, 1));
    this.$indexSet(receiver, t1, element);
  },
  removeLast$0: function(receiver) {
    var result;
    if ($.$eq(this.get$length(receiver), 0))
      throw $.wrapException(new $.StateError("No elements"));
    result = this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
    this.set$length(receiver, $.$sub$n(this.get$length(receiver), 1));
    return result;
  },
  _rangeCheck$2: function(receiver, start, end) {
    var t1 = $.getInterceptor$n(start);
    if (t1.$lt(start, 0) || t1.$gt(start, this.get$length(receiver))) {
      t1 = this.get$length(receiver);
      throw $.wrapException(new $.RangeError("value " + $.S(start) + " not in range 0.." + $.S(t1)));
    }
    t1 = $.getInterceptor$n(end);
    if (t1.$lt(end, start) || t1.$gt(end, this.get$length(receiver))) {
      t1 = this.get$length(receiver);
      throw $.wrapException(new $.RangeError("value " + $.S(end) + " not in range " + $.S(start) + ".." + $.S(t1)));
    }
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    var $length, otherStart, otherList, t1, i;
    if (typeof start !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    if (typeof end !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    if (typeof skipCount !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    this._rangeCheck$2(receiver, start, end);
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw $.wrapException(new $.ArgumentError(skipCount));
    if (typeof iterable === "object" && iterable !== null && (iterable.constructor === Array || !!$.getInterceptor(iterable).$isList)) {
      otherStart = skipCount;
      otherList = iterable;
    } else {
      t1 = $.skip$1$ax(iterable, skipCount);
      otherList = t1.toList$1$growable(t1, false);
      if (typeof otherList !== "string" && (typeof otherList !== "object" || otherList === null || otherList.constructor !== Array && !$.isJsIndexable(otherList, otherList[$.dispatchPropertyName])))
        return this.setRange$4$bailout(2, start, 0, 0, 0, receiver, $length, $.JSNumber_methods, otherList);
      otherStart = 0;
    }
    if (typeof otherList !== "string" && (typeof otherList !== "object" || otherList === null || otherList.constructor !== Array && !$.isJsIndexable(otherList, otherList[$.dispatchPropertyName])))
      return this.setRange$4$bailout(3, start, 0, 0, 0, receiver, $length, $.JSNumber_methods, otherList, otherStart);
    if (otherStart + $length > otherList.length)
      throw $.wrapException(new $.StateError("Not enough elements"));
    if (otherStart < start)
      for (i = $length - 1; i >= 0; --i) {
        t1 = otherStart + i;
        if (t1 >>> 0 !== t1 || t1 >= otherList.length)
          throw $.ioore(t1);
        this.$indexSet(receiver, start + i, otherList[t1]);
      }
    else
      for (i = 0; i < $length; ++i) {
        t1 = otherStart + i;
        if (t1 >>> 0 !== t1 || t1 >= otherList.length)
          throw $.ioore(t1);
        this.$indexSet(receiver, start + i, otherList[t1]);
      }
  },
  setRange$4$bailout: function(state0, start, end, iterable, skipCount, receiver, $length, t1, otherList, otherStart) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        this._rangeCheck$2(receiver, start, end);
        $length = $.$sub$n(end, start);
        t1 = $.getInterceptor($length);
        if (t1.$eq($length, 0))
          return;
        if ($.$lt$n(skipCount, 0))
          throw $.wrapException(new $.ArgumentError(skipCount));
      case 2:
        if (state0 === 0 && typeof iterable === "object" && iterable !== null && (iterable.constructor === Array || !!$.getInterceptor(iterable).$isList)) {
          otherStart = skipCount;
          otherList = iterable;
        } else
          switch (state0) {
            case 0:
              t2 = $.skip$1$ax(iterable, skipCount);
              otherList = t2.toList$1$growable(t2, false);
            case 2:
              state0 = 0;
              otherStart = 0;
          }
      case 3:
        var t2, t3, i, t4;
        state0 = 0;
        t2 = $.getInterceptor$ns(otherStart);
        t3 = $.getInterceptor$asx(otherList);
        if ($.$gt$n(t2.$add(otherStart, $length), t3.get$length(otherList)))
          throw $.wrapException(new $.StateError("Not enough elements"));
        if (t2.$lt(otherStart, start))
          for (i = t1.$sub($length, 1), t1 = $.getInterceptor$ns(start); t4 = $.getInterceptor$n(i), t4.$ge(i, 0); i = t4.$sub(i, 1))
            this.$indexSet(receiver, t1.$add(start, i), t3.$index(otherList, t2.$add(otherStart, i)));
        else {
          if (typeof $length !== "number")
            throw $.iae($length);
          t1 = $.getInterceptor$ns(start);
          i = 0;
          for (; i < $length; ++i)
            this.$indexSet(receiver, t1.$add(start, i), t3.$index(otherList, t2.$add(otherStart, i)));
        }
    }
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  toString$0: function(receiver) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitValue(receiver, result, $.List_List($));
    return result._contents;
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return new $._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
  },
  get$length: function(_) {
    var t1, t2;
    t1 = $.$sub$n(this._tail, this._head);
    t2 = this._table;
    if (typeof t1 !== "number")
      throw t1.$and();
    return (t1 & t2.length - 1) >>> 0;
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    t1 = $.getInterceptor$n(index);
    if (!t1.$lt(index, 0)) {
      t2 = $.$sub$n(this._tail, this._head);
      t3 = this._table;
      if (typeof t2 !== "number")
        throw t2.$and();
      t3 = t1.$gt(index, (t2 & t3.length - 1) >>> 0);
      t1 = t3;
    } else
      t1 = true;
    if (t1) {
      t1 = $.$sub$n(this._tail, this._head);
      t2 = this._table;
      if (typeof t1 !== "number")
        throw t1.$and();
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + ((t1 & t2.length - 1) >>> 0)));
    }
    t1 = this._table;
    t2 = this._head;
    if (typeof index !== "number")
      throw $.iae(index);
    t3 = t1.length;
    t2 = (t2 + index & t3 - 1) >>> 0;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    return t1[t2];
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  toString$0: function(_) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitValue(this, result, $.List_List($));
    return result._contents;
  },
  addFirst$1: function(element) {
    var t1, t2;
    this._head = (this._head - 1 & this._table.length - 1) >>> 0;
    t1 = this._table;
    t2 = this._head;
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
    if (t2 === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.wrapException(new $.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t2;
    if (this._head === this._tail)
      throw $.wrapException(new $.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = $.$sub$n(this._tail, 1);
    t2 = this._table;
    if (typeof t1 !== "number")
      throw t1.$and();
    this._tail = (t1 & t2.length - 1) >>> 0;
    t2 = this._table;
    t1 = this._tail;
    if (t1 >>> 0 !== t1 || t1 >= t2.length)
      throw $.ioore(t1);
    return t2[t1];
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 >>> 0 !== t2 || t2 >= t3)
      throw $.ioore(t2);
    t1[t2] = element;
    ++t2;
    if (typeof t2 !== "number")
      throw t2.$and();
    this._tail = (t2 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = $.List_List(this._table.length * 2);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    $.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    $.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  ListQueue$1: function(initialCapacity) {
    if (true)
      initialCapacity = 8;
    else {
      if (typeof initialCapacity !== "number")
        throw initialCapacity.$sub();
      if ((initialCapacity & initialCapacity - 1) >>> 0 !== 0)
        initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    }
    this._table = $.List_List(initialCapacity);
  },
  $asIterable: null,
  $isIterable: true
},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_liblib0$_position,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      $.throwExpression(new $.ConcurrentModificationError(t1));
    t2 = this._liblib0$_position;
    if (t2 === this._end) {
      this._liblib0$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib0$_current = t3[t2];
    this._liblib0$_position = (this._liblib0$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  }
},

HashMap__findBucketIndex: function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; i += 2)
    if ($.$eq(bucket[i], key))
      return i;
  return -1;
},

LinkedHashMap__findBucketIndex: function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_key(), key))
      return i;
  return -1;
},

ListQueue$: function(initialCapacity) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  t1.ListQueue$1(initialCapacity);
  return t1;
},

ListQueue__nextPowerOf2: function(number) {
  var nextNumber;
  if (number == null)
    throw number.$shl();
  number = (number << 2 >>> 0) - 1;
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
}}],
["dart.core", "dart:core", , {
NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1, t2, str, t3;
    t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0)) {
      t2 = t1.sb_0;
      t2._contents = t2._contents + ", ";
    }
    t2 = t1.sb_0;
    str = typeof key === "string" ? key : $.S(key);
    t2._contents = t2._contents + str;
    t2 = t1.sb_0;
    t2._contents = t2._contents + ": ";
    t2 = t1.sb_0;
    t3 = $.Error_safeToString(value);
    t2._contents = t2._contents + t3;
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  }
},

Duration: {"": "Object;_duration<",
  $add: function(_, other) {
    return $.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return $.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw $.iae(factor);
    return $.Duration$(0, 0, this._duration * factor, 0, 0, 0);
  },
  $tdiv: function(_, quotient) {
    if (quotient === 0)
      throw $.wrapException(new $.IntegerDivisionByZeroException());
    return $.Duration$(0, 0, $.JSNumber_methods.$tdiv(this._duration, quotient), 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    return this._duration > other.get$_duration();
  },
  $le: function(_, other) {
    return this._duration <= other.get$_duration();
  },
  $ge: function(_, other) {
    return this._duration >= other.get$_duration();
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  compareTo$1: function(_, other) {
    return $.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, t3, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + $.S($.Duration$(0, 0, -t2, 0, 0, 0));
    t3 = $.JSNumber_methods.$tdiv(t2, 60000000);
    twoDigitMinutes = t1.call$1(t3 % 60);
    t3 = $.JSNumber_methods.$tdiv(t2, 1000000);
    twoDigitSeconds = t1.call$1(t3 % 60);
    sixDigitUs = new $.Duration_toString_sixDigits().call$1(t2 % 1000000);
    return $.S($.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return $.S(n);
    if (t1.$ge(n, 10000))
      return "0" + $.S(n);
    if (t1.$ge(n, 1000))
      return "00" + $.S(n);
    if (t1.$ge(n, 100))
      return "000" + $.S(n);
    if (t1.$gt(n, 10))
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  }
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10))
      return $.S(n);
    return "0" + $.S(n);
  }
},

Error: {"": "Object;"},

AssertionError: {"": "Object;"},

TypeError: {"": "Object;"},

NullThrownError: {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
},

FallThroughError: {"": "Object;"},

AbstractClassInstantiationError: {"": "Object;_className",
  toString$0: function(_) {
    return "Cannot instantiate abstract class: '" + $.S(this._className) + "'";
  }
},

NoSuchMethodError: {"": "Object;_liblib1$_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, sb, t2, t3, t4;
    t1 = {};
    sb = new $.StringBuffer("");
    sb._contents = "";
    t1.sb_0 = sb;
    t1.i_1 = 0;
    for (t2 = this._arguments; t3 = t1.i_1, t4 = $.getInterceptor$n(t3), t4.$lt(t3, t2.length); t1.i_1 = $.$add$ns(t1.i_1, 1)) {
      if (t4.$gt(t3, 0)) {
        t3 = t1.sb_0;
        t3._contents = t3._contents + ", ";
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 >>> 0 !== t4 || t4 >= t2.length)
        throw $.ioore(t4);
      t4 = $.Error_safeToString(t2[t4]);
      t3._contents = t3._contents + t4;
    }
    t2 = this._namedArguments;
    t2.forEach$1(t2, new $.NoSuchMethodError_toString_closure(t1));
    return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.Error_safeToString(this._liblib1$_receiver) + "\nArguments: [" + $.S(t1.sb_0) + "]";
  }
},

UnsupportedError: {"": "Object;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
},

UnimplementedError: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
  }
},

StateError: {"": "Object;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
},

ConcurrentModificationError: {"": "Object;modifiedObject",
  toString$0: function(_) {
    return "Concurrent modification during iteration: " + $.Error_safeToString(this.modifiedObject) + ".";
  }
},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  }
},

CyclicInitializationError: {"": "Object;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  }
},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
},

FormatException: {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + $.S(this.message);
  },
  $isException: true
},

IntegerDivisionByZeroException: {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  $isException: true
},

Expando: {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + this.name;
  },
  $index: function(_, object) {
    var values = $.Primitives_getProperty(object, "expando$values");
    return values == null ? null : $.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = $.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new $.Object();
      $.Primitives_setProperty(object, "expando$values", values);
    }
    $.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = $.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = $.$add$ns(t1, 1);
      key = "expando$key$" + $.S(t1);
      $.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  }
},

Iterator: {"": "Object;"},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return "Instance of '" + $.Primitives_objectTypeName(this) + "'";
  }
},

StringBuffer: {"": "Object;_contents",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = $.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator.length === 0)
      do {
        str = iterator._liblib$_current;
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      str = iterator._liblib$_current;
      str = typeof str === "string" ? str : $.S(str);
      this._contents = this._contents + str;
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator._liblib$_current;
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  }
},

Comparable_compare: function(a, b) {
  return $.compareTo$1$ns(a, b);
},

Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  if (typeof microseconds !== "number")
    throw $.iae(microseconds);
  return new $.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
},

Error_safeToString: function(object) {
  var t1;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string") {
    t1 = $.JSString_methods.replaceAll$2(object, "\\", "\\\\");
    t1 = $.stringReplaceAllUnchecked(t1, "\n", "\\n");
    t1 = $.stringReplaceAllUnchecked(t1, "\r", "\\r");
    return "\"" + $.stringReplaceAllUnchecked(t1, "\"", "\\\"") + "\"";
  }
  return "Instance of '" + $.Primitives_objectTypeName(object) + "'";
},

List_List: function($length) {
  var t1, result;
  t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException(new $.ArgumentError("Length must be a positive integer: " + $.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
},

List_List$from: function(other, growable) {
  var list, t1, $length, fixedList, i;
  list = $.List_List($);
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable === true)
    return list;
  $length = list.length;
  fixedList = $.List_List($length);
  for (t1 = list.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    fixedList[i] = list[i];
  }
  return fixedList;
},

List_List$generate: function($length, generator, growable) {
  var result, i, t1;
  if (growable) {
    result = [];
    $.JSArray_methods.set$length(result, $length);
  } else
    result = $.List_List($length);
  for (i = 0; i < $length; ++i) {
    t1 = generator.call$1(i);
    if (i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
}}],
["dart.dom.html", "dart:html", , {
_ChildrenElementList: {"": "ListBase;_element,_childElements",
  get$length: function(_) {
    return this._childElements.length;
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    this._element.replaceChild(value, t1[index]);
  },
  set$length: function(_, newLength) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize element lists"));
  },
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    return $.get$iterator$ax(this.toList$0(this));
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException(new $.UnimplementedError(null));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  removeLast$0: function(_) {
    var t1, result, t2;
    t1 = this._element;
    result = t1.lastElementChild;
    t2 = result == null;
    if (t2)
      $.throwExpression(new $.StateError("No elements"));
    if (!t2)
      t1.removeChild(result);
    return result;
  },
  $asList: function() { return [$.Element]; },
  $asIterable: function() { return [$.Element]; }
},

_FrozenElementList: {"": "ListBase;_nodeList",
  get$length: function(_) {
    return this._nodeList.length;
  },
  $index: function(_, index) {
    var t1 = this._nodeList;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot modify list"));
  },
  set$length: function(_, newLength) {
    throw $.wrapException(new $.UnsupportedError("Cannot modify list"));
  },
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

HttpRequest_getString_closure: {"": "Closure;",
  call$1: function(xhr) {
    return $.get$responseText$x(xhr);
  }
},

HttpRequest_request_closure1: {"": "Closure;xhr_0",
  call$2: function(header, value) {
    this.xhr_0.setRequestHeader(header, value);
  }
},

HttpRequest_request_closure: {"": "Closure;completer_1,xhr_2",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.xhr_2;
    t2 = t1.status;
    if (t2 == null)
      throw t2.$ge();
    t2 = t2 >= 200 && t2 < 300 || t2 === 0 || t2 === 304;
    t3 = this.completer_1;
    if (t2) {
      if (t3._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t3._isComplete = true;
      t2 = t3.future._zone;
      t2._openCallbacks = t2._openCallbacks - 1;
      if (t2._isExecutingCallback !== true && t2._openCallbacks === 0 && t2._children.length === 0)
        ;
      t3._setFutureValue$1(t1);
    } else
      t3.completeError$1(e);
  }
},

HttpRequest_request_closure0: {"": "Closure;completer_3",
  call$1: function(e) {
    this.completer_3.completeError$1(e);
  }
},

_ChildNodeListLazy: {"": "ListBase;_this",
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = new $.ListIterator(iterable, iterable.length, 0, null), t2 = this._this; t1.moveNext$0();)
      t2.appendChild(t1._liblib$_current);
  },
  removeLast$0: function(_) {
    var t1, result, t2;
    t1 = this._this;
    result = t1.lastChild;
    t2 = result == null;
    if (t2)
      $.throwExpression(new $.StateError("No elements"));
    if (!t2)
      t1.removeChild(result);
    return result;
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw $.ioore(index);
    t1.replaceChild(value, t2[index]);
  },
  get$iterator: function(_) {
    return $.NodeList_methods.get$iterator(this._this.childNodes);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException(new $.UnsupportedError("Cannot setRange on Node list"));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  set$length: function(_, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $asList: function() { return [$.Node]; },
  $asIterable: function() { return [$.Node]; }
},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

Window_animationFrame_closure: {"": "Closure;completer_0",
  call$1: function(time) {
    var t1, t2;
    t1 = this.completer_0;
    if (t1._isComplete)
      $.throwExpression(new $.StateError("Future already completed"));
    t1._isComplete = true;
    t2 = t1.future._zone;
    t2._openCallbacks = t2._openCallbacks - 1;
    if (t2._isExecutingCallback !== true && t2._openCallbacks === 0 && t2._children.length === 0)
      ;
    t1._setFutureValue$1(time);
  }
},

Interceptor_ListMixin1: {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

Interceptor_ListMixin_ImmutableListMixin1: {"": "Interceptor_ListMixin1+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

_AttributeMap: {"": "Object;",
  forEach$1: function(_, f) {
    var t1, key;
    for (t1 = this.get$keys(), t1 = new $.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
      key = t1._liblib$_current;
      f.call$2(key, this.$index(this, key));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i, t1;
    attributes = this._element.attributes;
    keys = $.List_List($);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        keys.push($.get$name$x(t1));
    }
    return keys;
  },
  get$values: function(_) {
    var attributes, values, len, i, t1;
    attributes = this._element.attributes;
    values = $.List_List($);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        values.push($.get$value$x(t1));
    }
    return values;
  },
  $isMap: true,
  $asMap: function() { return [$.JSString, $.JSString]; }
},

_ElementAttributeMap: {"": "_AttributeMap;_element",
  $index: function(_, key) {
    return this._element.getAttribute(key);
  },
  $indexSet: function(_, key, value) {
    this._element.setAttribute(key, value);
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  _matches$1: function(node) {
    return node.namespaceURI == null;
  }
},

_EventStream: {"": "Stream;_liblib3$_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1, t2;
    t1 = new $._EventStreamSubscription(0, this._liblib3$_target, this._eventType, onData, this._useCapture);
    t2 = t1._liblib3$_onData;
    if (t2 != null && !(t1._pauseCount > 0))
      $.$$dom_addEventListener$3$x(t1._liblib3$_target, t1._eventType, t2, t1._useCapture);
    return t1;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  }
},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_liblib3$_target,_eventType,_liblib3$_onData,_useCapture",
  cancel$0: function() {
    var t1, t2;
    t1 = this._liblib3$_target;
    if (t1 == null)
      return;
    t2 = this._liblib3$_onData;
    if (t2 != null)
      $.$$dom_removeEventListener$3$x(t1, this._eventType, t2, this._useCapture);
    this._liblib3$_target = null;
    this._liblib3$_onData = null;
  },
  pause$1: function(_, resumeSignal) {
    var t1;
    if (this._liblib3$_target == null)
      return;
    this._pauseCount = this._pauseCount + 1;
    t1 = this._liblib3$_onData;
    if (t1 != null)
      $.$$dom_removeEventListener$3$x(this._liblib3$_target, this._eventType, t1, this._useCapture);
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  get$isPaused: function() {
    return this._pauseCount > 0;
  },
  resume$0: function() {
    if (this._liblib3$_target == null || !(this._pauseCount > 0))
      return;
    this._pauseCount = this._pauseCount - 1;
    var t1 = this._liblib3$_onData;
    if (t1 != null && !(this._pauseCount > 0))
      $.$$dom_addEventListener$3$x(this._liblib3$_target, this._eventType, t1, this._useCapture);
  }
},

EventStreamProvider: {"": "Object;_eventType"},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new $.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException(new $.UnsupportedError("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
},

Rect: {"": "Object;left>,top>,width>,height>",
  toString$0: function(_) {
    return "(" + $.S(this.left) + ", " + $.S(this.top) + ", " + $.S(this.width) + ", " + $.S(this.height) + ")";
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isRect)
      return false;
    t1 = $.getInterceptor$x(other);
    return $.$eq(this.left, t1.get$left(other)) && $.$eq(this.top, t1.get$top(other)) && $.$eq(this.width, t1.get$width(other)) && $.$eq(this.height, t1.get$height(other));
  },
  $isRect: true,
  $asRect: null
},

_DOMWindowCrossFrame: {"": "Object;_window",
  get$parent: function(_) {
    return $._DOMWindowCrossFrame__createSafe(this._window.parent);
  }
},

FixedSizeListIterator: {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._length;
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
        return this.moveNext$0$bailout(2, t1, nextPosition);
      if (nextPosition >>> 0 !== nextPosition || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._current = t1[nextPosition];
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, nextPosition) {
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.$add$ns(t1, 1);
        t1 = this._length;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$lt$n(nextPosition, t1))
          switch (state0) {
            case 0:
              t1 = this._array;
            case 2:
              state0 = 0;
              this._current = $.$index$asx(t1, nextPosition);
              this._position = nextPosition;
              return true;
          }
        this._current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
},

HttpRequest_getString: function(url, onProgress, withCredentials) {
  return $.HttpRequest_request(url, null, null, onProgress, null, null, null, withCredentials).then$1(new $.HttpRequest_getString_closure());
},

HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
  var completer, futureImpl, t1, xhr, t2;
  completer = new $._AsyncCompleter(new $._FutureImpl(0, $.get$_Zone__current().fork$0(), null), false);
  futureImpl = completer.future;
  t1 = futureImpl._zone;
  t1._openCallbacks = t1._openCallbacks + 1;
  xhr = new XMLHttpRequest();
  $.open$3$async$x(xhr, "GET", url, true);
  t1 = new $._EventStream(xhr, $.EventStreamProvider_load._eventType, false);
  t1 = new $._EventStreamSubscription(0, t1._liblib3$_target, t1._eventType, new $.HttpRequest_request_closure(completer, xhr), t1._useCapture);
  t2 = t1._liblib3$_onData;
  if (t2 != null && !t1.get$isPaused())
    $.$$dom_addEventListener$3$x(t1._liblib3$_target, t1._eventType, t2, t1._useCapture);
  t1 = new $._EventStream(xhr, $.EventStreamProvider_error._eventType, false);
  t1 = new $._EventStreamSubscription(0, t1._liblib3$_target, t1._eventType, new $.HttpRequest_request_closure0(completer), t1._useCapture);
  t2 = t1._liblib3$_onData;
  if (t2 != null && !t1.get$isPaused())
    $.$$dom_addEventListener$3$x(t1._liblib3$_target, t1._eventType, t2, t1._useCapture);
  xhr.send();
  return futureImpl;
},

_ChildNodeListLazy$: function(_this) {
  return new $._ChildNodeListLazy(_this);
},

_convertNativeToDart_Window: function(win) {
  if (win == null)
    return;
  return $._DOMWindowCrossFrame__createSafe(win);
},

_convertNativeToDart_EventTarget: function(e) {
  var $window;
  if (e == null)
    return;
  if ("setInterval" in e) {
    $window = $._DOMWindowCrossFrame__createSafe(e);
    if (typeof $window === "object" && $window !== null && !!$.getInterceptor($window).$isEventTarget)
      return $window;
    return;
  } else
    return e;
},

_DOMWindowCrossFrame__createSafe: function(w) {
  if (w === window)
    return w;
  else
    return new $._DOMWindowCrossFrame(w);
}}],
["dart.isolate", "dart:isolate", , {
ReceivePort: {"": "Object;"}}],
["dart.math", "dart:math", , {
_Random: {"": "Object;"},

min: function(a, b) {
  var t1;
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0)
          t1 = b === 0 ? 1 / b < 0 : b < 0;
        else
          t1 = false;
        if (t1 || isNaN(b))
          return b;
        return a;
      }
      return a;
    }
    throw $.wrapException(new $.ArgumentError(b));
  }
  throw $.wrapException(new $.ArgumentError(a));
},

max: function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return a + b;
        if ($.JSDouble_methods.get$isNaN(b))
          return b;
        return a;
      }
      if (b === 0 && $.JSNumber_methods.get$isNegative(a))
        return b;
      return a;
    }
    throw $.wrapException(new $.ArgumentError(b));
  }
  throw $.wrapException(new $.ArgumentError(a));
}}],
["dart.typed_data", "dart:typed_data", , {
Endianness: {"": "Object;_littleEndian"},

Float64List_Float64List: function($length) {
  return new Float64Array($length);
},

_TypedArrayFactoryProvider_createFloat64List: function($length) {
  return new Float64Array($length);
},

_TypedArrayFactoryProvider__F64: function(arg) {
  return new Float64Array(arg);
}}],
["floating_petals.dart", "floating_petals.dart", , {
main_closure: {"": "Closure;",
  call$1: function(responseText) {
    $.set$innerHtml$x(document.querySelector("header"), responseText);
    return responseText;
  }
},

main_closure0: {"": "Closure;fixDef_0,bodyDef_1",
  call$1: function(e) {
    var t1, rect, t2, t3, t4, t5, t6, t7, t8, item, t9, t10, b;
    t1 = $.getInterceptor$x(e);
    rect = t1.getBoundingClientRect$0(e);
    t2 = this.fixDef_0;
    t3 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
    t4 = t3._f;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t4[0] = 0;
    if (1 >= t5)
      throw $.ioore(1);
    t4[1] = 0;
    t2.shape = new $.CircleShape(t3, 0, 0);
    t2.shape.radius = 0.16666666666666666;
    t3 = this.bodyDef_1;
    t4 = $.getInterceptor$x(rect);
    t5 = t4.get$left(rect);
    t6 = t4.get$width(rect);
    if (typeof t6 !== "number")
      throw t6.$div();
    if (typeof t5 !== "number")
      throw t5.$add();
    t7 = t3.position._f;
    t8 = t7.length;
    if (0 >= t8)
      throw $.ioore(0);
    t7[0] = (t5 + t6 / 2) / 30;
    t6 = t4.get$top(rect);
    if (typeof t6 !== "number")
      throw t6.$div();
    if (1 >= t8)
      throw $.ioore(1);
    t7[1] = t6 / 30;
    t3.userData = t1.get$id(e);
    t6 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
    t7 = t6._f;
    t8 = t7.length;
    if (0 >= t8)
      throw $.ioore(0);
    t7[0] = 0;
    if (1 >= t8)
      throw $.ioore(1);
    t7[1] = 0;
    t7 = new $.Vector($._TypedArrayFactoryProvider__F64(2));
    t8 = t7._f;
    t5 = t8.length;
    if (0 >= t5)
      throw $.ioore(0);
    t8[0] = 0;
    if (1 >= t5)
      throw $.ioore(1);
    t8[1] = 0;
    item = new $.TransformItem(t6, t7, null, e);
    t7 = t4.get$left(rect);
    t6 = t4.get$width(rect);
    if (typeof t6 !== "number")
      throw t6.$div();
    if (typeof t7 !== "number")
      throw t7.$add();
    t8 = t4.get$top(rect);
    t4 = t4.get$height(rect);
    if (typeof t4 !== "number")
      throw t4.$div();
    if (typeof t8 !== "number")
      throw t8.$add();
    t5 = new $.Vector(new Float64Array(2));
    t9 = t5._f;
    t10 = t9.length;
    if (0 >= t10)
      throw $.ioore(0);
    t9[0] = t7 + t6 / 2;
    if (1 >= t10)
      throw $.ioore(1);
    t9[1] = t8 + t4 / 2;
    item.center = t5;
    t5 = $.get$_items();
    t5.$indexSet(t5, t1.get$id(e), item);
    b = $._world.createBody$1(t3);
    b.createFixture$1(t2);
    item.orginalMass = b.mass;
    t1 = t1.get$onMouseOver(e);
    t1 = new $._EventStreamSubscription(0, t1._liblib3$_target, t1._eventType, new $.main__closure(), t1._useCapture);
    t2 = t1._liblib3$_onData;
    if (t2 != null && !t1.get$isPaused())
      $.$$dom_addEventListener$3$x(t1._liblib3$_target, t1._eventType, t2, t1._useCapture);
  }
},

main__closure: {"": "Closure;",
  call$1: function(_) {
    $.get$attributes$x($.get$currentTarget$x(_))._element.setAttribute("opacity", "0.2");
    return "0.2";
  }
},

TransformItem: {"": "Object;currentTranslate,center<,orginalMass<,element<",
  setTransform$2: function(originTransform, rotation) {
    var t1, t2, t3, t4, t5, x, y;
    t1 = originTransform._f;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = this.center._f;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    x = t3 * 30 - t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    y = t1 * 30 - t4[1];
    $.get$attributes$x(this.element)._element.setAttribute("transform", "translate(" + $.S(x) + "," + $.S(y) + ") rotate(" + $.S(1 * ((x + y) / 10)) + " " + $.S(x / 2) + "," + $.S(y / 2) + ")");
  }
},

main: function() {
  var t1, t2, t3, fixDef, svgRect, t4, t5, t6, t7, rect, bodyDef;
  $.HttpRequest_getString("http://svg-developers.github.io/header.html", null, null).then$1(new $.main_closure());
  t1 = new $.Vector(new Float64Array(2));
  t2 = t1._f;
  t3 = t2.length;
  if (0 >= t3)
    throw $.ioore(0);
  t2[0] = 0;
  if (1 >= t3)
    throw $.ioore(1);
  t2[1] = 0.05;
  t2 = new $.DefaultWorldPool(null, null, null);
  t2.distance = $.Distance$_construct();
  t2.collision = $.Collision$_construct(t2);
  t2.timeOfImpact = $.TimeOfImpact$_construct(t2);
  $._world = $.World$(t1, true, t2);
  fixDef = $.FixtureDef$();
  fixDef.density = 1;
  fixDef.friction = 1.7;
  fixDef.restitution = 1.2;
  svgRect = document.querySelector("#floatingPetals").getBoundingClientRect();
  t2 = $.getInterceptor$x(svgRect);
  t1 = t2.get$left(svgRect);
  t3 = t2.get$width(svgRect);
  if (typeof t3 !== "number")
    throw t3.$div();
  if (typeof t1 !== "number")
    throw t1.$add();
  t4 = t2.get$top(svgRect);
  t2 = t2.get$height(svgRect);
  if (typeof t2 !== "number")
    throw t2.$div();
  if (typeof t4 !== "number")
    throw t4.$add();
  t5 = new $.Vector(new Float64Array(2));
  t6 = t5._f;
  t7 = t6.length;
  if (0 >= t7)
    throw $.ioore(0);
  t6[0] = (t1 + t3 / 2) / 30;
  if (1 >= t7)
    throw $.ioore(1);
  t6[1] = (t4 + t2 / 3) / 30;
  $._targetPointOfAttraction = t5;
  rect = document.querySelector("#ground").getBoundingClientRect();
  fixDef.shape = $.PolygonShape$();
  t5 = fixDef.shape;
  t2 = $.getInterceptor$x(rect);
  t4 = t2.get$width(rect);
  if (typeof t4 !== "number")
    throw t4.$div();
  t6 = t2.get$height(rect);
  if (typeof t6 !== "number")
    throw t6.$div();
  t5.setAsBox$2(t4 / 30 / 2, t6 / 30 / 2);
  bodyDef = $.BodyDef$();
  bodyDef.type = 0;
  t6 = bodyDef.position;
  t4 = t2.get$left(rect);
  t5 = t2.get$width(rect);
  if (typeof t5 !== "number")
    throw t5.$div();
  if (typeof t4 !== "number")
    throw t4.$add();
  t6.set$x(t6, (t4 + t5 / 2) / 30);
  t2 = t2.get$top(rect);
  if (typeof t2 !== "number")
    throw t2.$sub();
  t6.set$y(t6, (t2 - 120) / 30);
  $._world.createBody$1(bodyDef).createFixture$1(fixDef);
  bodyDef.type = 2;
  t2 = new $._FrozenElementList(document.querySelectorAll("[id^='path']"));
  t2.forEach$1(t2, new $.main_closure0(fixDef, bodyDef));
  $.Window_methods.get$animationFrame(window).then$1($.update$closure);
},

update: function(highResTime) {
  var t1, b, itemPosition, targetPosition, t2, t3, t4, t5, targetDistance, path, opacity;
  t1 = $._world;
  t1.step$3(t1, 0.02, 10, 10);
  $._world.clearForces$0();
  $.Window_methods.get$animationFrame(window).then$1($.update$closure);
  for (t1 = $._world, t1.get$bodyList, b = t1._bodyList; b != null; b = b.get$next()) {
    t1 = $.getInterceptor$x(b);
    if (!$.$eq(t1.get$type(b), 0)) {
      itemPosition = t1.get$position(b);
      targetPosition = $._targetPointOfAttraction;
      t2 = new $.Vector(new Float64Array(2))._f;
      t3 = t2.length;
      if (0 >= t3)
        throw $.ioore(0);
      t2[0] = 0;
      if (1 >= t3)
        throw $.ioore(1);
      t2[1] = 0;
      t3 = t2[0];
      t4 = itemPosition.get$_f();
      if (0 >= t4.length)
        throw $.ioore(0);
      t2[0] = t3 + t4[0];
      t4 = t2[1];
      t3 = itemPosition.get$_f();
      if (1 >= t3.length)
        throw $.ioore(1);
      t2[1] = t4 + t3[1];
      t3 = t2[0];
      t4 = targetPosition._f;
      t5 = t4.length;
      if (0 >= t5)
        throw $.ioore(0);
      t2[0] = t3 - t4[0];
      t3 = t2[1];
      if (1 >= t5)
        throw $.ioore(1);
      t2[1] = t3 - t4[1];
      t4 = t2[0];
      t3 = t2[1];
      t3 = t4 * t4 + t3 * t3;
      Math.sqrt(t3);
      t3 = t2.length;
      if (0 >= t3)
        throw $.ioore(0);
      t2[0] = -t2[0];
      if (1 >= t3)
        throw $.ioore(1);
      t2[1] = -t2[1];
      t3 = t2[0];
      t2 = t2[1];
      targetDistance = new $.Vector(new Float64Array(2));
      t4 = targetDistance._f;
      t5 = t4.length;
      if (0 >= t5)
        throw $.ioore(0);
      t4[0] = t3 / 50;
      if (1 >= t5)
        throw $.ioore(1);
      t4[1] = t2 / 50;
      t2 = $.get$_items();
      path = t2.$index(t2, b.get$userData());
      $.get$_random();
      t2 = Math.random() < 0.5 ? 1 : -1;
      $.get$_random();
      b.set$mass(Math.random() < 0.5 ? $.$mul$n(b.get$mass(), 1 + 1.1755 * t2) : path.get$orginalMass());
      b.applyForce$2(targetDistance, t1.get$position(b));
      t2 = $.get$x$x(t1.get$position(b));
      t1 = $.get$y$x(t1.get$position(b));
      t3 = new $.Vector(new Float64Array(2));
      t4 = t3._f;
      t5 = t4.length;
      if (0 >= t5)
        throw $.ioore(0);
      t4[0] = t2;
      if (1 >= t5)
        throw $.ioore(1);
      t4[1] = t1;
      t1 = b.get$originTransform().rotation;
      path.setTransform$2(t3, $.S(t1.col1) + ", " + $.S(t1.col2));
      opacity = $.Primitives_parseDouble($.get$attributes$x(path.get$element())._element.getAttribute("opacity"), null);
      if (typeof opacity !== "number")
        return $.update$bailout(1, b, opacity, path);
      t1 = $.get$attributes$x(path.get$element());
      $.get$_random();
      t1._element.setAttribute("opacity", $.S(opacity + 0.02 * (Math.random() < 0.5 ? -1 : 1)));
    }
  }
},

update$bailout: function(state0, b, opacity, path) {
  switch (state0) {
    case 0:
      t1 = $._world;
      t1.step$3(t1, 0.02, 10, 10);
      $._world.clearForces$0();
      $.Window_methods.get$animationFrame(window).then$1($.update$closure);
      t1 = $._world;
      t1.get$bodyList;
      b = t1._bodyList;
    case 1:
      var t1, itemPosition, targetPosition, t2, t3, t4, t5, targetDistance;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(b != null))
                break L0;
              t1 = $.getInterceptor$x(b);
            case 1:
              if (state0 === 1 || state0 === 0 && !$.$eq(t1.get$type(b), 0))
                switch (state0) {
                  case 0:
                    itemPosition = t1.get$position(b);
                    targetPosition = $._targetPointOfAttraction;
                    t2 = new $.Vector(new Float64Array(2))._f;
                    t3 = t2.length;
                    if (0 >= t3)
                      throw $.ioore(0);
                    t2[0] = 0;
                    if (1 >= t3)
                      throw $.ioore(1);
                    t2[1] = 0;
                    t3 = t2[0];
                    t4 = itemPosition.get$_f();
                    if (0 >= t4.length)
                      throw $.ioore(0);
                    t2[0] = t3 + t4[0];
                    t4 = t2[1];
                    t3 = itemPosition.get$_f();
                    if (1 >= t3.length)
                      throw $.ioore(1);
                    t2[1] = t4 + t3[1];
                    t3 = t2[0];
                    t4 = targetPosition._f;
                    t5 = t4.length;
                    if (0 >= t5)
                      throw $.ioore(0);
                    t2[0] = t3 - t4[0];
                    t3 = t2[1];
                    if (1 >= t5)
                      throw $.ioore(1);
                    t2[1] = t3 - t4[1];
                    t4 = t2[0];
                    t3 = t2[1];
                    t3 = t4 * t4 + t3 * t3;
                    Math.sqrt(t3);
                    t3 = t2.length;
                    if (0 >= t3)
                      throw $.ioore(0);
                    t2[0] = -t2[0];
                    if (1 >= t3)
                      throw $.ioore(1);
                    t2[1] = -t2[1];
                    t3 = t2[0];
                    t2 = t2[1];
                    targetDistance = new $.Vector(new Float64Array(2));
                    t4 = targetDistance._f;
                    t5 = t4.length;
                    if (0 >= t5)
                      throw $.ioore(0);
                    t4[0] = t3 / 50;
                    if (1 >= t5)
                      throw $.ioore(1);
                    t4[1] = t2 / 50;
                    t2 = $.get$_items();
                    path = t2.$index(t2, b.get$userData());
                    $.get$_random();
                    t2 = Math.random() < 0.5 ? 1 : -1;
                    $.get$_random();
                    b.set$mass(Math.random() < 0.5 ? $.$mul$n(b.get$mass(), 1 + 1.1755 * t2) : path.get$orginalMass());
                    b.applyForce$2(targetDistance, t1.get$position(b));
                    t2 = $.get$x$x(t1.get$position(b));
                    t1 = $.get$y$x(t1.get$position(b));
                    t3 = new $.Vector(new Float64Array(2));
                    t4 = t3._f;
                    t5 = t4.length;
                    if (0 >= t5)
                      throw $.ioore(0);
                    t4[0] = t2;
                    if (1 >= t5)
                      throw $.ioore(1);
                    t4[1] = t1;
                    t1 = b.get$originTransform().rotation;
                    path.setTransform$2(t3, $.S(t1.col1) + ", " + $.S(t1.col2));
                    opacity = $.Primitives_parseDouble($.get$attributes$x(path.get$element())._element.getAttribute("opacity"), null);
                  case 1:
                    state0 = 0;
                    t1 = $.get$attributes$x(path.get$element());
                    $.get$_random();
                    t1._element.setAttribute("opacity", $.S($.$add$ns(opacity, 0.02 * (Math.random() < 0.5 ? -1 : 1))));
                }
              b = b.get$next();
          }
  }
}}],
["html_common", "dart:html_common", , {
convertDartToNative_Dictionary_closure: {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  }
},

FilteredElementList: {"": "ListBase;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return $.List_List$from(t1.where$1(t1, new $.FilteredElementList__filtered_closure()), true);
  },
  forEach$1: function(_, f) {
    $.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    $.replaceWith$1$x(t1[index], value);
  },
  set$length: function(_, newLength) {
    var len;
    if (typeof newLength !== "number")
      return this.set$length$bailout(1, newLength);
    len = this.get$_filtered().length;
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw $.wrapException(new $.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  set$length$bailout: function(state0, newLength) {
    var len, t1;
    len = this.get$_filtered().length;
    t1 = $.getInterceptor$n(newLength);
    if (t1.$ge(newLength, len))
      return;
    else if (t1.$lt(newLength, 0))
      throw $.wrapException(new $.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  add$1: function(_, value) {
    this._childNodes._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException(new $.UnsupportedError("Cannot setRange on filtered list"));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  removeRange$2: function(_, start, end) {
    $.IterableMixinWorkaround_forEach($.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new $.FilteredElementList_removeRange_closure());
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.remove$0$ax(result);
    return result;
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$iterator: function(_) {
    var t1 = this.get$_filtered();
    return new $.ListIterator(t1, t1.length, 0, null);
  },
  $asList: null,
  $asIterable: null
},

FilteredElementList__filtered_closure: {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && !!$.getInterceptor(n).$isElement;
  }
},

FilteredElementList_removeRange_closure: {"": "Closure;",
  call$1: function(el) {
    return $.remove$0$ax(el);
  }
},

convertDartToNative_Dictionary: function(dict) {
  var object = {};
  dict.forEach$1(dict, new $.convertDartToNative_Dictionary_closure(object));
  return object;
}}],
["metadata", "../../../../../../../../dart/dart-sdk/lib/html/html_common/metadata.dart", , {
SupportedBrowser: {"": "Object;browserName,minimumVersion"},

DomName: {"": "Object;name"}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

$.IsolateNatives__processWorkerMessage$closure = new $.Closure$_processWorkerMessage($.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
$.Primitives__throwFormatException$closure = new $.Closure$_throwFormatException($.Primitives__throwFormatException, "Primitives__throwFormatException$closure");
$.wrapException$closure = new $.Closure$wrapException($.wrapException, "wrapException$closure");
$.DartError_toStringWrapper$closure = new $.Closure$toStringWrapper($.DartError_toStringWrapper, "DartError_toStringWrapper$closure");
$.invokeClosure$closure = new $.Closure$invokeClosure($.invokeClosure, "invokeClosure$closure");
$.typeNameInChrome$closure = new $.Closure$typeNameInChrome($.typeNameInChrome, "typeNameInChrome$closure");
$.typeNameInSafari$closure = new $.Closure$typeNameInSafari($.typeNameInSafari, "typeNameInSafari$closure");
$.typeNameInOpera$closure = new $.Closure$typeNameInOpera($.typeNameInOpera, "typeNameInOpera$closure");
$.typeNameInFirefox$closure = new $.Closure$typeNameInFirefox($.typeNameInFirefox, "typeNameInFirefox$closure");
$.typeNameInIE$closure = new $.Closure$typeNameInIE($.typeNameInIE, "typeNameInIE$closure");
$.constructorNameFallback$closure = new $.Closure$constructorNameFallback($.constructorNameFallback, "constructorNameFallback$closure");
$._asyncRunCallback$closure = new $.Closure$_asyncRunCallback($._asyncRunCallback, "_asyncRunCallback$closure");
$._nullDataHandler$closure = new $.Closure$_nullDataHandler($._nullDataHandler, "_nullDataHandler$closure");
$._nullErrorHandler$closure = new $.Closure$_nullErrorHandler($._nullErrorHandler, "_nullErrorHandler$closure");
$._nullDoneHandler$closure = new $.Closure$_nullDoneHandler($._nullDoneHandler, "_nullDoneHandler$closure");
$.Comparable_compare$closure = new $.Closure$compare($.Comparable_compare, "Comparable_compare$closure");
$.main$closure = new $.Closure$main($.main, "main$closure");
$.update$closure = new $.Closure$update($.update, "update$closure");
$.C_JSUnknown = new $.JSUnknown();
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.List_empty = Isolate.makeConstantList([]);
$.C_NullThrownError = new $.NullThrownError();
$.JSDouble_methods = $.JSDouble.prototype;
$.C__DelayedDone = new $._DelayedDone();
$.C__Random = new $._Random();
$.Window_methods = $.Window.prototype;
$.JSNumber_methods = $.JSNumber.prototype;
$.JSString_methods = $.JSString.prototype;
$.EventStreamProvider_error = new $.EventStreamProvider("error");
$.EventStreamProvider_progress = new $.EventStreamProvider("progress");
$.NodeList_methods = $.NodeList.prototype;
$.EventStreamProvider_load = new $.EventStreamProvider("load");
$.JSArray_methods = $.JSArray.prototype;
$.Duration_0 = new $.Duration(0);
$.C_CloseToken = new $.CloseToken();
$.EventStreamProvider_mouseover = new $.EventStreamProvider("mouseover");
$.dispatchPropertyName = null;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$._getTypeNameOf = null;
$.interceptorsByTag = null;
$.leafTags = null;
$.TimeOfImpact_toiCalls = null;
$.TimeOfImpact_toiIters = null;
$.TimeOfImpact_toiMaxIters = null;
$.TimeOfImpact_toiRootIters = null;
$.TimeOfImpact_toiMaxRootIters = null;
$._callbacksAreEnqueued = false;
$.Expando__keyCount = 0;
$._world = null;
$._targetPointOfAttraction = null;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_replaceChild$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_replaceChild$2(receiver, a0, a1);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.$tdiv$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
$.abs$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).abs$0(receiver);
};
$.compareTo$1$ns = function(receiver, a0) {
  return $.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$attributes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$attributes(receiver);
};
$.get$body$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$body(receiver);
};
$.get$children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$children(receiver);
};
$.get$currentTarget$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$currentTarget(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$id$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$id(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$key$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$key(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$name$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$name(receiver);
};
$.get$parent$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$parent(receiver);
};
$.get$points$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$points(receiver);
};
$.get$position$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$position(receiver);
};
$.get$responseText$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$responseText(receiver);
};
$.get$shape$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$shape(receiver);
};
$.get$type$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$type(receiver);
};
$.get$value$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$value(receiver);
};
$.get$x$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$x(receiver);
};
$.get$y$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$y(receiver);
};
$.open$3$async$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).open$3$async(receiver, a0, a1, a2);
};
$.register$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).register$2(receiver, a0, a1);
};
$.remove$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).remove$0(receiver);
};
$.replaceWith$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
$.send$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).send$1(receiver, a0);
};
$.send$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).send$2(receiver, a0, a1);
};
$.set$innerHtml$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
$.set$parent$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$parent(receiver, value);
};
$.set$type$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$type(receiver, value);
};
$.set$x$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$x(receiver, value);
};
$.set$y$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$y(receiver, value);
};
$.setRange$3$ax = function(receiver, a0, a1, a2) {
  return $.getInterceptor$ax(receiver).setRange$3(receiver, a0, a1, a2);
};
$.skip$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).skip$1(receiver, a0);
};
$.toList$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).toList$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.trim$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).trim$0(receiver);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new $.Expando(null);
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  return new $.Expando("asynchronous error");
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return $.ListQueue$(null);
});
Isolate.$lazy($, "_current", "_Zone__current", "get$_Zone__current", function() {
  return new $._DefaultZone(null, [], 0, false);
});
Isolate.$lazy($, "_items", "_items", "get$_items", function() {
  return new $.HashMap(0, null, null, null, null);
});
Isolate.$lazy($, "_random", "_random", "get$_random", function() {
  return $.C__Random;
});
// Native classes
$.defineNativeMethodsNonleaf("HTMLElement", $._HTMLElement);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("WebKitAnimationEvent", $.AnimationEvent);

$.defineNativeMethods("HTMLAreaElement", $.AreaElement);

$.defineNativeMethods("HTMLAudioElement", $.AudioElement);

$.defineNativeMethods("AutocompleteErrorEvent", $.AutocompleteErrorEvent);

$.defineNativeMethods("HTMLBRElement", $.BRElement);

$.defineNativeMethods("HTMLBaseElement", $.BaseElement);

$.defineNativeMethods("BeforeLoadEvent", $.BeforeLoadEvent);

$.defineNativeMethodsNonleaf("Blob", $.Blob);

$.defineNativeMethods("HTMLBodyElement", $.BodyElement);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("CDATASection", $.CDataSection);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethodsNonleaf("CharacterData", $.CharacterData);

$.defineNativeMethods("CloseEvent", $.CloseEvent);

$.defineNativeMethods("Comment", $.Comment);

$.defineNativeMethods("CompositionEvent", $.CompositionEvent);

$.defineNativeMethods("HTMLContentElement", $.ContentElement);

$.defineNativeMethods("CSSFontFaceLoadEvent", $.CssFontFaceLoadEvent);

$.defineNativeMethods("CustomElementConstructor", $.CustomElementConstructor);

$.defineNativeMethods("CustomEvent", $.CustomEvent);

$.defineNativeMethods("HTMLDListElement", $.DListElement);

$.defineNativeMethods("HTMLDataListElement", $.DataListElement);

$.defineNativeMethods("HTMLDetailsElement", $.DetailsElement);

$.defineNativeMethods("DeviceMotionEvent", $.DeviceMotionEvent);

$.defineNativeMethods("DeviceOrientationEvent", $.DeviceOrientationEvent);

$.defineNativeMethods("HTMLDialogElement", $.DialogElement);

$.defineNativeMethods("HTMLDivElement", $.DivElement);

$.defineNativeMethodsNonleaf("Document", $.Document);

$.defineNativeMethodsNonleaf("DocumentFragment", $.DocumentFragment);

$.defineNativeMethods("DocumentType", $.DocumentType);

$.defineNativeMethods("DOMError", $.DomError);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethods("ErrorEvent", $.ErrorEvent);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethods("EventException", $.EventException);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("File", $.File);

$.defineNativeMethods("FileError", $.FileError);

$.defineNativeMethods("FileException", $.FileException);

$.defineNativeMethods("FocusEvent", $.FocusEvent);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("HTMLHRElement", $.HRElement);

$.defineNativeMethods("HashChangeEvent", $.HashChangeEvent);

$.defineNativeMethods("HTMLHeadElement", $.HeadElement);

$.defineNativeMethods("HTMLHeadingElement", $.HeadingElement);

$.defineNativeMethodsNonleaf("HTMLCollection", $.HtmlCollection);

$.defineNativeMethods("HTMLDocument", $.HtmlDocument);

$.defineNativeMethods("HTMLHtmlElement", $.HtmlElement);

$.defineNativeMethods("HTMLFormControlsCollection", $.HtmlFormControlsCollection);

$.defineNativeMethods("HTMLOptionsCollection", $.HtmlOptionsCollection);

$.defineNativeMethods("XMLHttpRequest", $.HttpRequest);

$.defineNativeMethods("XMLHttpRequestProgressEvent", $.HttpRequestProgressEvent);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("KeyboardEvent", $.KeyboardEvent);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("HTMLLabelElement", $.LabelElement);

$.defineNativeMethods("HTMLLegendElement", $.LegendElement);

$.defineNativeMethods("HTMLLinkElement", $.LinkElement);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("MediaError", $.MediaError);

$.defineNativeMethods("MediaKeyError", $.MediaKeyError);

$.defineNativeMethods("MediaKeyEvent", $.MediaKeyEvent);

$.defineNativeMethods("MediaKeyMessageEvent", $.MediaKeyMessageEvent);

$.defineNativeMethods("MediaKeyNeededEvent", $.MediaKeyNeededEvent);

$.defineNativeMethods("MediaStreamEvent", $.MediaStreamEvent);

$.defineNativeMethods("MediaStreamTrackEvent", $.MediaStreamTrackEvent);

$.defineNativeMethods("HTMLMenuElement", $.MenuElement);

$.defineNativeMethods("MessageEvent", $.MessageEvent);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethods("MIDIConnectionEvent", $.MidiConnectionEvent);

$.defineNativeMethods("MIDIMessageEvent", $.MidiMessageEvent);

$.defineNativeMethods("HTMLModElement", $.ModElement);

$.defineNativeMethodsNonleaf("MouseEvent", $.MouseEvent);

$.defineNativeMethods("MutationEvent", $.MutationEvent);

$.defineNativeMethods("Navigator", $.Navigator);

$.defineNativeMethods("NavigatorUserMediaError", $.NavigatorUserMediaError);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethods("NodeList|RadioNodeList", $.NodeList);

$.defineNativeMethods("Notation", $.Notation);

$.defineNativeMethods("HTMLOListElement", $.OListElement);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptGroupElement", $.OptGroupElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("OverflowEvent", $.OverflowEvent);

$.defineNativeMethods("PageTransitionEvent", $.PageTransitionEvent);

$.defineNativeMethods("HTMLParagraphElement", $.ParagraphElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("PopStateEvent", $.PopStateEvent);

$.defineNativeMethods("PositionError", $.PositionError);

$.defineNativeMethods("HTMLPreElement", $.PreElement);

$.defineNativeMethods("ProcessingInstruction", $.ProcessingInstruction);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethodsNonleaf("ProgressEvent", $.ProgressEvent);

$.defineNativeMethods("HTMLQuoteElement", $.QuoteElement);

$.defineNativeMethods("ResourceProgressEvent", $.ResourceProgressEvent);

$.defineNativeMethods("RTCDataChannelEvent", $.RtcDataChannelEvent);

$.defineNativeMethods("RTCDTMFToneChangeEvent", $.RtcDtmfToneChangeEvent);

$.defineNativeMethods("RTCIceCandidateEvent", $.RtcIceCandidateEvent);

$.defineNativeMethods("HTMLScriptElement", $.ScriptElement);

$.defineNativeMethods("SecurityPolicyViolationEvent", $.SecurityPolicyViolationEvent);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("HTMLShadowElement", $.ShadowElement);

$.defineNativeMethods("ShadowRoot", $.ShadowRoot);

$.defineNativeMethods("HTMLSourceElement", $.SourceElement);

$.defineNativeMethods("HTMLSpanElement", $.SpanElement);

$.defineNativeMethods("SpeechInputEvent", $.SpeechInputEvent);

$.defineNativeMethods("SpeechRecognitionError", $.SpeechRecognitionError);

$.defineNativeMethods("SpeechRecognitionEvent", $.SpeechRecognitionEvent);

$.defineNativeMethods("SpeechSynthesisEvent", $.SpeechSynthesisEvent);

$.defineNativeMethods("StorageEvent", $.StorageEvent);

$.defineNativeMethods("HTMLStyleElement", $.StyleElement);

$.defineNativeMethods("HTMLTableCaptionElement", $.TableCaptionElement);

$.defineNativeMethods("HTMLTableCellElement", $.TableCellElement);

$.defineNativeMethods("HTMLTableColElement", $.TableColElement);

$.defineNativeMethods("HTMLTableElement", $.TableElement);

$.defineNativeMethods("HTMLTableRowElement", $.TableRowElement);

$.defineNativeMethods("HTMLTableSectionElement", $.TableSectionElement);

$.defineNativeMethods("HTMLTemplateElement", $.TemplateElement);

$.defineNativeMethodsNonleaf("Text", $.Text);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("TextEvent", $.TextEvent);

$.defineNativeMethods("HTMLTitleElement", $.TitleElement);

$.defineNativeMethods("TouchEvent", $.TouchEvent);

$.defineNativeMethods("HTMLTrackElement", $.TrackElement);

$.defineNativeMethods("TrackEvent", $.TrackEvent);

$.defineNativeMethods("TransitionEvent|WebKitTransitionEvent", $.TransitionEvent);

$.defineNativeMethodsNonleaf("UIEvent", $.UIEvent);

$.defineNativeMethods("HTMLUListElement", $.UListElement);

$.defineNativeMethods("HTMLUnknownElement", $.UnknownElement);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("MouseScrollEvent|MouseWheelEvent|WheelEvent", $.WheelEvent);

$.defineNativeMethods("DOMWindow|Window", $.Window);

$.defineNativeMethods("XPathException", $.XPathException);

$.defineNativeMethods("Attr", $._Attr);

$.defineNativeMethods("ClientRect", $._ClientRect);

$.defineNativeMethods("Entity", $._Entity);

$.defineNativeMethods("NamedNodeMap", $._NamedNodeMap);

$.defineNativeMethods("IDBVersionChangeEvent", $.VersionChangeEvent);

$.defineNativeMethods("SVGAElement", $.AElement);

$.defineNativeMethods("SVGAltGlyphElement", $.AltGlyphElement);

$.defineNativeMethods("SVGAnimateElement", $.AnimateElement);

$.defineNativeMethods("SVGAnimateMotionElement", $.AnimateMotionElement);

$.defineNativeMethods("SVGAnimateTransformElement", $.AnimateTransformElement);

$.defineNativeMethods("SVGAnimatedEnumeration", $.AnimatedEnumeration);

$.defineNativeMethods("SVGAnimatedLength", $.AnimatedLength);

$.defineNativeMethods("SVGAnimatedLengthList", $.AnimatedLengthList);

$.defineNativeMethods("SVGAnimatedNumber", $.AnimatedNumber);

$.defineNativeMethods("SVGAnimatedNumberList", $.AnimatedNumberList);

$.defineNativeMethodsNonleaf("SVGAnimationElement", $.AnimationElement);

$.defineNativeMethods("SVGCircleElement", $.CircleElement);

$.defineNativeMethods("SVGClipPathElement", $.ClipPathElement);

$.defineNativeMethods("SVGDefsElement", $.DefsElement);

$.defineNativeMethods("SVGDescElement", $.DescElement);

$.defineNativeMethods("SVGEllipseElement", $.EllipseElement);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEDistantLightElement", $.FEDistantLightElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEFuncAElement", $.FEFuncAElement);

$.defineNativeMethods("SVGFEFuncBElement", $.FEFuncBElement);

$.defineNativeMethods("SVGFEFuncGElement", $.FEFuncGElement);

$.defineNativeMethods("SVGFEFuncRElement", $.FEFuncRElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMergeNodeElement", $.FEMergeNodeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFEPointLightElement", $.FEPointLightElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFESpotLightElement", $.FESpotLightElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGGElement", $.GElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGLineElement", $.LineElement);

$.defineNativeMethods("SVGLinearGradientElement", $.LinearGradientElement);

$.defineNativeMethods("SVGMarkerElement", $.MarkerElement);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGMetadataElement", $.MetadataElement);

$.defineNativeMethods("SVGPathElement", $.PathElement);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGPointList", $.PointList);

$.defineNativeMethods("SVGPolygonElement", $.PolygonElement);

$.defineNativeMethods("SVGPolylineElement", $.PolylineElement);

$.defineNativeMethods("SVGRadialGradientElement", $.RadialGradientElement);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGScriptElement", $.ScriptElement0);

$.defineNativeMethods("SVGSetElement", $.SetElement);

$.defineNativeMethods("SVGStopElement", $.StopElement);

$.defineNativeMethods("SVGStyleElement", $.StyleElement0);

$.defineNativeMethodsNonleaf("SVGStyledElement", $.StyledElement);

$.defineNativeMethods("SVGDocument", $.SvgDocument);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGException", $.SvgException);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGSwitchElement", $.SwitchElement);

$.defineNativeMethods("SVGSymbolElement", $.SymbolElement);

$.defineNativeMethods("SVGTSpanElement", $.TSpanElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGTextElement", $.TextElement);

$.defineNativeMethods("SVGTextPathElement", $.TextPathElement);

$.defineNativeMethodsNonleaf("SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGTitleElement", $.TitleElement0);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethods("SVGViewElement", $.ViewElement);

$.defineNativeMethods("SVGZoomEvent", $.ZoomEvent);

$.defineNativeMethodsNonleaf("SVGGradientElement", $._GradientElement);

$.defineNativeMethodsNonleaf("SVGComponentTransferFunctionElement", $._SVGComponentTransferFunctionElement);

$.defineNativeMethods("AudioProcessingEvent", $.AudioProcessingEvent);

$.defineNativeMethods("OfflineAudioCompletionEvent", $.OfflineAudioCompletionEvent);

$.defineNativeMethods("WebGLContextEvent", $.ContextEvent);

$.defineNativeMethods("SQLError", $.SqlError);

$.defineNativeMethods("SQLException", $.SqlException);

$.defineNativeMethods("ArrayBuffer", $.ByteBuffer);

$.defineNativeMethodsNonleaf("ArrayBufferView", $.TypedData);

$.defineNativeMethods("DataView", $.ByteData);

$.defineNativeMethods("Float32Array", $.Float32List);

$.defineNativeMethods("Float64Array", $.Float64List);

$.defineNativeMethods("Int16Array", $.Int16List);

$.defineNativeMethods("Int32Array", $.Int32List);

$.defineNativeMethods("Int8Array", $.Int8List);

$.defineNativeMethods("Uint16Array", $.Uint16List);

$.defineNativeMethods("Uint32Array", $.Uint32List);

$.defineNativeMethods("Uint8ClampedArray", $.Uint8ClampedList);

$.defineNativeMethodsNonleaf("Uint8Array", $.Uint8List);


var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.initializeDispatchProperty(function(a) {
  $.getDispatchProperty = a;
}, "___dart_dispatch_record_ZxYxX_0_", $.Interceptor.prototype);
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main$closure); });
      } else {
        $.startRootIsolate($.main$closure);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main$closure); });
  } else {
    $.startRootIsolate($.main$closure);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], prototype);
        var parameter = "parameter_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", "c", ["f<"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        var constructor = defineClass(name, cls, fields, desc);
        isolateProperties[cls] = constructor;
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.makeConstantList = oldIsolate.makeConstantList;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=floating_petals.dart.js.map
